new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 88, 4082, 4088)) {
            final String npe_invocation_var874 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var874, String.class, 88, 4082, 4104)) {
                if (!npe_invocation_var874.startsWith("visitCt")) {
                    return;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 91, 4174, 4180)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < (clone.getBody().getStatements().size() - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 102, 4955, 4970)) {
                final CtExecutableReference npe_invocation_var875 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var875, CtExecutableReference.class, 102, 4955, 4986)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 102, 4937, 4946)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 102, 5027, 5042)) {
                            final CtExecutableReference npe_invocation_var876 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var876, CtExecutableReference.class, 102, 5027, 5058)) {
                                final CtTypeReference npe_invocation_var877 = npe_invocation_var876.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var877, CtTypeReference.class, 102, 5027, 5077)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 102, 5008, 5018)) {
                                        if ("getValue".equals(npe_invocation_var875.getSimpleName()) && "CtLiteral".equals(npe_invocation_var877.getSimpleName())) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 103, 5105, 5109)) {
                                                final CtBlock<T> npe_invocation_var878 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var878, CtBlock.class, 103, 5105, 5119)) {
                                                    final CtStatement npe_invocation_var879 = npe_invocation_var878.getStatement(i--);
                                                    if (CallChecker.beforeDeref(npe_invocation_var879, CtStatement.class, 103, 5105, 5137)) {
                                                        npe_invocation_var879.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 106, 5177, 5181)) {
                final CtBlock<T> npe_invocation_var880 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var880, CtBlock.class, 106, 5177, 5191)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5256, 5260)) {
                        final CtBlock<T> npe_invocation_var881 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var881, CtBlock.class, 107, 5256, 5270)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 107, 5289, 5295)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 107, 5323, 5341)) {
                                    final CodeFactory npe_invocation_var882 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var882, CodeFactory.class, 107, 5289, 5302)) {
                                        final CtStatement npe_invocation_var883 = npe_invocation_var880.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var883, CtStatement.class, 106, 5177, 5207)) {
                                            npe_invocation_var883.replace(createSetter(((CtInvocation) (npe_invocation_var881.getStatement(i))), npe_invocation_var882.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 111, 5418, 5422)) {
            final CtBlock<T> npe_invocation_var884 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var884, CtBlock.class, 111, 5418, 5432)) {
                final CtStatement npe_invocation_var885 = npe_invocation_var884.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var885, CtStatement.class, 111, 5418, 5448)) {
                    npe_invocation_var885.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5464, 5468)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5493, 5497)) {
                final CtBlock<T> npe_invocation_var886 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var886, CtBlock.class, 112, 5493, 5507)) {
                    final List<CtStatement> npe_invocation_var887 = npe_invocation_var886.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var887, List.class, 112, 5493, 5523)) {
                        final CtBlock<T> npe_invocation_var888 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var888, CtBlock.class, 112, 5464, 5478)) {
                            final CtStatement npe_invocation_var889 = npe_invocation_var888.getStatement(npe_invocation_var887.size() - 1);
                            if (CallChecker.beforeDeref(npe_invocation_var889, CtStatement.class, 112, 5464, 5535)) {
                                npe_invocation_var889.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 115, 5615, 5619)) {
            final CtBlock<T> npe_invocation_var890 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var890, CtBlock.class, 115, 5615, 5629)) {
                npe_invocation_var890.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 118, 5714, 5718)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 118, 5757, 5763)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 118, 5791, 5809)) {
                    final CodeFactory npe_invocation_var891 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var891, CodeFactory.class, 118, 5757, 5770)) {
                        final CtBlock<T> npe_invocation_var892 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var892, CtBlock.class, 118, 5714, 5728)) {
                            npe_invocation_var892.insertEnd(createAssignment(npe_invocation_var891.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 122, 5939, 5945)) {
            comment.setCommentType(CtComment.CommentType.INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5997, 6003)) {
            comment.setContent("auto-generated, see " + CloneVisitorGenerator.class.getName());
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 124, 6085, 6089)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 126, 6117, 6122)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference(("void CtElement#set" + getterName.substring(3, getterName.length())) + "()");
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 141, 7068, 7074)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 141, 7100, 7106)) {
                final TypeFactory npe_invocation_var893 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var893, TypeFactory.class, 141, 7100, 7113)) {
                    final CodeFactory npe_invocation_var894 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var894, CodeFactory.class, 141, 7068, 7081)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 141, 7049, 7056)) {
                            cloneInv.setTarget(npe_invocation_var894.createTypeAccess(npe_invocation_var893.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7189, 7195)) {
            final CodeFactory npe_invocation_var895 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var895, CodeFactory.class, 142, 7189, 7202)) {
                return npe_invocation_var895.createInvocation(elementVarRead, setterRef, cloneInv);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 151, 7462, 7468)) {
            final CodeFactory npe_invocation_var896 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var896, CodeFactory.class, 151, 7462, 7475)) {
                return npe_invocation_var896.createVariableAssignment(other, false, assignment);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 161, 7997, 8003)) {
            final CodeFactory npe_invocation_var897 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var897, CodeFactory.class, 161, 7997, 8010)) {
                return npe_invocation_var897.createLocalVariable(typeReference, "a" + typeReference.getSimpleName(), ctInvocation);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 171, 8540, 8546)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 171, 8663, 8675)) {
                final CodeFactory npe_invocation_var898 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var898, CodeFactory.class, 171, 8540, 8553)) {
                    return npe_invocation_var898.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 183, 9185, 9194)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 185, 9297, 9305)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            } else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference(("CoreFactory Factory#" + factoryName) + "()"));
        if (CallChecker.beforeDeref(factory, Factory.class, 188, 9568, 9574)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 188, 9613, 9619)) {
                if (CallChecker.beforeDeref(typeName, String.class, 188, 9705, 9712)) {
                    final ExecutableFactory npe_invocation_var899 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var899, ExecutableFactory.class, 188, 9613, 9632)) {
                        final CodeFactory npe_invocation_var900 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var900, CodeFactory.class, 188, 9568, 9581)) {
                            return npe_invocation_var900.createInvocation(coreFactory, npe_invocation_var899.createReference(("CoreFactory CtElement#create" + typeName.substring(2, typeName.length())) + "()"));
                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var902.get(CtScanner.class))-->new CtScanner() {
    private final List<String> internals = Collections.singletonList("CtCircularTypeReference");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 88, 4082, 4088)) {
            final String npe_invocation_var874 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var874, String.class, 88, 4082, 4104)) {
                if (!npe_invocation_var874.startsWith("visitCt")) {
                    return;
                }
            }
        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 91, 4174, 4180)) {
            clone = element.clone();
        }
        final CtParameter<CtElement> ctParameter = ((CtParameter<CtElement>) (element.getParameters().get(0)));
        final CtVariableAccess<CtElement> elementVarRead = factory.Code().createVariableRead(ctParameter.getReference(), false);
        final CtInvocation cloneBuilderInvocation = createCloneBuilderInvocation(elementVarRead);
        final CtLocalVariable localCloningElement = createLocalCloningElement(ctParameter.getType(), cloneBuilderInvocation);
        for (int i = 1; i < (clone.getBody().getStatements().size() - 1); i++) {
            final CtInvocation targetInvocation = ((CtInvocation) (((CtInvocation) (clone.getBody().getStatement(i))).getArguments().get(0)));
            if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 102, 4955, 4970)) {
                final CtExecutableReference npe_invocation_var875 = targetInvocation.getExecutable();
                if (CallChecker.beforeDeref(npe_invocation_var875, CtExecutableReference.class, 102, 4955, 4986)) {
                    if (CallChecker.beforeDeref("getValue", String.class, 102, 4937, 4946)) {
                        if (CallChecker.beforeDeref(targetInvocation, CtInvocation.class, 102, 5027, 5042)) {
                            final CtExecutableReference npe_invocation_var876 = targetInvocation.getExecutable();
                            if (CallChecker.beforeDeref(npe_invocation_var876, CtExecutableReference.class, 102, 5027, 5058)) {
                                final CtTypeReference npe_invocation_var877 = npe_invocation_var876.getDeclaringType();
                                if (CallChecker.beforeDeref(npe_invocation_var877, CtTypeReference.class, 102, 5027, 5077)) {
                                    if (CallChecker.beforeDeref("CtLiteral", String.class, 102, 5008, 5018)) {
                                        if ("getValue".equals(npe_invocation_var875.getSimpleName()) && "CtLiteral".equals(npe_invocation_var877.getSimpleName())) {
                                            if (CallChecker.beforeDeref(clone, CtMethod.class, 103, 5105, 5109)) {
                                                final CtBlock<T> npe_invocation_var878 = clone.getBody();
                                                if (CallChecker.beforeDeref(npe_invocation_var878, CtBlock.class, 103, 5105, 5119)) {
                                                    final CtStatement npe_invocation_var879 = npe_invocation_var878.getStatement(i--);
                                                    if (CallChecker.beforeDeref(npe_invocation_var879, CtStatement.class, 103, 5105, 5137)) {
                                                        npe_invocation_var879.delete();
                                                    }
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (CallChecker.beforeDeref(clone, CtMethod.class, 106, 5177, 5181)) {
                final CtBlock<T> npe_invocation_var880 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var880, CtBlock.class, 106, 5177, 5191)) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 107, 5256, 5260)) {
                        final CtBlock<T> npe_invocation_var881 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var881, CtBlock.class, 107, 5256, 5270)) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 107, 5289, 5295)) {
                                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 107, 5323, 5341)) {
                                    final CodeFactory npe_invocation_var882 = factory.Code();
                                    if (CallChecker.beforeDeref(npe_invocation_var882, CodeFactory.class, 107, 5289, 5302)) {
                                        final CtStatement npe_invocation_var883 = npe_invocation_var880.getStatement(i);
                                        if (CallChecker.beforeDeref(npe_invocation_var883, CtStatement.class, 106, 5177, 5207)) {
                                            npe_invocation_var883.replace(createSetter(((CtInvocation) (npe_invocation_var881.getStatement(i))), npe_invocation_var882.createVariableRead(localCloningElement.getReference(), false)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 111, 5418, 5422)) {
            final CtBlock<T> npe_invocation_var884 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var884, CtBlock.class, 111, 5418, 5432)) {
                final CtStatement npe_invocation_var885 = npe_invocation_var884.getStatement(0);
                if (CallChecker.beforeDeref(npe_invocation_var885, CtStatement.class, 111, 5418, 5448)) {
                    npe_invocation_var885.delete();
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5464, 5468)) {
            if (CallChecker.beforeDeref(clone, CtMethod.class, 112, 5493, 5497)) {
                final CtBlock<T> npe_invocation_var886 = clone.getBody();
                if (CallChecker.beforeDeref(npe_invocation_var886, CtBlock.class, 112, 5493, 5507)) {
                    final List<CtStatement> npe_invocation_var887 = npe_invocation_var886.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var887, List.class, 112, 5493, 5523)) {
                        final CtBlock<T> npe_invocation_var888 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var888, CtBlock.class, 112, 5464, 5478)) {
                            final CtStatement npe_invocation_var889 = npe_invocation_var888.getStatement(npe_invocation_var887.size() - 1);
                            if (CallChecker.beforeDeref(npe_invocation_var889, CtStatement.class, 112, 5464, 5535)) {
                                npe_invocation_var889.delete();
                            }
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 115, 5615, 5619)) {
            final CtBlock<T> npe_invocation_var890 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var890, CtBlock.class, 115, 5615, 5629)) {
                npe_invocation_var890.insertBegin(localCloningElement);
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 118, 5714, 5718)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 118, 5757, 5763)) {
                if (CallChecker.beforeDeref(localCloningElement, CtLocalVariable.class, 118, 5791, 5809)) {
                    final CodeFactory npe_invocation_var891 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var891, CodeFactory.class, 118, 5757, 5770)) {
                        final CtBlock<T> npe_invocation_var892 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var892, CtBlock.class, 118, 5714, 5728)) {
                            npe_invocation_var892.insertEnd(createAssignment(npe_invocation_var891.createVariableRead(localCloningElement.getReference(), false)));
                        }
                    }
                }
            }
        }
        final CtComment comment = factory.Core().createComment();
        if (CallChecker.beforeDeref(comment, CtComment.class, 122, 5939, 5945)) {
            comment.setCommentType(CtComment.CommentType.INLINE);
        }
        if (CallChecker.beforeDeref(comment, CtComment.class, 123, 5997, 6003)) {
            comment.setContent("auto-generated, see " + CloneVisitorGenerator.class.getName());
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 124, 6085, 6089)) {
            clone.addComment(comment);
        }
        if (CallChecker.beforeDeref(target, CtClass.class, 126, 6117, 6122)) {
            target.addMethod(clone);
        }
    }

    private CtInvocation<?> createSetter(CtInvocation scanInvocation, CtVariableAccess<CtElement> elementVarRead) {
        final CtInvocation<?> getter = ((CtInvocation<?>) (scanInvocation.getArguments().get(0)));
        final String getterName = getter.getExecutable().getSimpleName();
        final CtExecutableReference<Object> setterRef = factory.Executable().createReference(("void CtElement#set" + getterName.substring(3, getterName.length())) + "()");
        final CtExecutableReference<Object> cloneRef = factory.Executable().createReference("CtElement spoon.support.visitor.equals.CloneHelper#clone()");
        final CtInvocation<Object> cloneInv = factory.Code().createInvocation(null, cloneRef, getter);
        if (CallChecker.beforeDeref(factory, Factory.class, 141, 7068, 7074)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 141, 7100, 7106)) {
                final TypeFactory npe_invocation_var893 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var893, TypeFactory.class, 141, 7100, 7113)) {
                    final CodeFactory npe_invocation_var894 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var894, CodeFactory.class, 141, 7068, 7081)) {
                        if (CallChecker.beforeDeref(cloneInv, CtInvocation.class, 141, 7049, 7056)) {
                            cloneInv.setTarget(npe_invocation_var894.createTypeAccess(npe_invocation_var893.createReference("spoon.support.visitor.equals.CloneHelper")));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 142, 7189, 7195)) {
            final CodeFactory npe_invocation_var895 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var895, CodeFactory.class, 142, 7189, 7202)) {
                return npe_invocation_var895.createInvocation(elementVarRead, setterRef, cloneInv);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtAssignment createAssignment(CtVariableAccess assignment) {
        if (CallChecker.beforeDeref(factory, Factory.class, 151, 7462, 7468)) {
            final CodeFactory npe_invocation_var896 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var896, CodeFactory.class, 151, 7462, 7475)) {
                return npe_invocation_var896.createVariableAssignment(other, false, assignment);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtLocalVariable<T> createLocalCloningElement(CtTypeReference<T> typeReference, CtInvocation<T> ctInvocation) {
        if (CallChecker.beforeDeref(factory, Factory.class, 161, 7997, 8003)) {
            final CodeFactory npe_invocation_var897 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var897, CodeFactory.class, 161, 7997, 8010)) {
                return npe_invocation_var897.createLocalVariable(typeReference, "a" + typeReference.getSimpleName(), ctInvocation);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<CloneBuilder> createCloneBuilderInvocation(CtVariableAccess<CtElement> elementAccess) {
        final CtExecutableReference<CloneBuilder> buildExecRef = factory.Executable().createReference("CloneBuilder CtElement#build()");
        if (CallChecker.beforeDeref(factory, Factory.class, 171, 8540, 8546)) {
            if (CallChecker.beforeDeref(elementAccess, CtVariableAccess.class, 171, 8663, 8675)) {
                final CodeFactory npe_invocation_var898 = factory.Code();
                if (CallChecker.beforeDeref(npe_invocation_var898, CodeFactory.class, 171, 8540, 8553)) {
                    return npe_invocation_var898.createInvocation(cloneBuilderType, buildExecRef, builderFieldAccess, elementAccess, createFactoryInvocation(elementAccess.clone()));
                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<Object> createFactoryInvocation(CtVariableAccess<CtElement> elementAccess) {
        final String typeName = elementAccess.getType().getSimpleName();
        final CtInvocation<Object> getFactory = factory.Code().createInvocation(null, factory.Executable().createReference("Factory CtElement#getFactory()"));
        if (CallChecker.beforeDeref(getFactory, CtInvocation.class, 183, 9185, 9194)) {
            getFactory.setTarget(elementAccess);
        }
        String factoryName = CallChecker.init(String.class);
        if (CallChecker.beforeDeref(internals, List.class, 185, 9297, 9305)) {
            if (internals.contains(typeName)) {
                factoryName = "Internal";
            } else {
                factoryName = "Core";
            }
        }
        final CtInvocation<Object> coreFactory = factory.Code().createInvocation(getFactory, factory.Executable().createReference(("CoreFactory Factory#" + factoryName) + "()"));
        if (CallChecker.beforeDeref(factory, Factory.class, 188, 9568, 9574)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 188, 9613, 9619)) {
                if (CallChecker.beforeDeref(typeName, String.class, 188, 9705, 9712)) {
                    final ExecutableFactory npe_invocation_var899 = factory.Executable();
                    if (CallChecker.beforeDeref(npe_invocation_var899, ExecutableFactory.class, 188, 9613, 9632)) {
                        final CodeFactory npe_invocation_var900 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var900, CodeFactory.class, 188, 9568, 9581)) {
                            return npe_invocation_var900.createInvocation(coreFactory, npe_invocation_var899.createReference(("CoreFactory CtElement#create" + typeName.substring(2, typeName.length())) + "()"));
                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var902.get(CtScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:125)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:639)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:630)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:1430)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1703)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:38)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:1331)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:462)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:187)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:61)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:294)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:55)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:551)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:330)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:118)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)
new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.code.CtLabelledFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(CloneVisitorGenerator.GENERATING_CLONE_PACKAGE + ".GetterTemplateMatcher");

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(CloneVisitorGenerator.GENERATING_CLONE_PACKAGE + ".SetterTemplateMatcher");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 211, 11610, 11616)) {
            final String npe_invocation_var903 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var903, String.class, 211, 11610, 11632)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 211, 11660, 11666)) {
                    final String npe_invocation_var904 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var904, String.class, 211, 11660, 11682)) {
                        if ((!npe_invocation_var903.startsWith("visitCt")) && (!npe_invocation_var904.startsWith("scanCt"))) {
                            return;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 214, 11760, 11766)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 214, 11735, 11751)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + element.getParameters().get(0).getType().getQualifiedName().substring(5)) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 218, 11960, 11970)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 223, 12252, 12258)) {
                throw new SpoonException((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + element.getSignature());
            } else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 226, 12308, 12314)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 227, 12329, 12333)) {
            final CtBlock<T> npe_invocation_var905 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var905, CtBlock.class, 227, 12329, 12343)) {
                final List<CtStatement> npe_invocation_var906 = npe_invocation_var905.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var906, List.class, 227, 12329, 12359)) {
                    npe_invocation_var906.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 229, 12460, 12466)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 229, 12436, 12449)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 235, 12604, 12610)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 243, 13043, 13056)) {
                if (methodsToAvoid.size() > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 244, 13078, 13082)) {
                        final CtBlock<T> npe_invocation_var907 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var907, CtBlock.class, 244, 13078, 13092)) {
                            npe_invocation_var907.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                } else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 246, 13191, 13195)) {
                        final CtBlock<T> npe_invocation_var908 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var908, CtBlock.class, 246, 13191, 13205)) {
                            npe_invocation_var908.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 249, 13260, 13264)) {
            final CtBlock<T> npe_invocation_var909 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var909, CtBlock.class, 249, 13260, 13274)) {
                final List<CtStatement> npe_invocation_var910 = npe_invocation_var909.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var910, List.class, 249, 13260, 13290)) {
                    if (npe_invocation_var910.size() > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13311, 13315)) {
                            final CtBlock<T> npe_invocation_var911 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var911, CtBlock.class, 250, 13311, 13325)) {
                                npe_invocation_var911.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 254, 13475, 13481)) {
                            comment.setCommentType(CtComment.CommentType.INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13534, 13540)) {
                            comment.setContent("auto-generated, see " + CloneVisitorGenerator.class.getName());
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 256, 13623, 13627)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 258, 13656, 13668)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 267, 13987, 13993)) {
            final CoreFactory npe_invocation_var912 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var912, CoreFactory.class, 267, 13987, 14000)) {
                final CtUnaryOperator<Object> npe_invocation_var913 = npe_invocation_var912.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var913, CtUnaryOperator.class, 267, 13987, 14022)) {
                    final CtUnaryOperator npe_invocation_var914 = npe_invocation_var913.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var914, CtUnaryOperator.class, 267, 13987, 14071)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 267, 13969, 13972)) {
                            anIf.setCondition(npe_invocation_var914.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 14132, 14138)) {
            final CodeFactory npe_invocation_var915 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var915, CodeFactory.class, 268, 14132, 14145)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 14110, 14113)) {
                    anIf.setThenStatement(npe_invocation_var915.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < methodsAvoid.size(); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 283, 14665, 14671)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 284, 14723, 14729)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 284, 14755, 14765)) {
                            final CodeFactory npe_invocation_var916 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var916, CodeFactory.class, 284, 14723, 14736)) {
                                final CodeFactory npe_invocation_var917 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var917, CodeFactory.class, 283, 14665, 14678)) {
                                    left = npe_invocation_var917.createBinaryOperator(otherRead, npe_invocation_var916.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            } else {
                if (CallChecker.beforeDeref(factory, Factory.class, 287, 14855, 14861)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 288, 14913, 14919)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 288, 14945, 14955)) {
                            final CodeFactory npe_invocation_var918 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var918, CodeFactory.class, 288, 14913, 14926)) {
                                final CodeFactory npe_invocation_var919 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var919, CodeFactory.class, 287, 14855, 14868)) {
                                    right = npe_invocation_var919.createBinaryOperator(otherRead, npe_invocation_var918.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 291, 15031, 15037)) {
                    final CodeFactory npe_invocation_var920 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var920, CodeFactory.class, 291, 15031, 15044)) {
                        left = npe_invocation_var920.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!avoidThrowUnsupportedOperationException(ctMethod)) {
                if (CallChecker.beforeDeref(avoid, List.class, 309, 15834, 15838)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 319, 16074, 16082)) {
            final CtBlock<?> npe_invocation_var921 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var921, CtBlock.class, 319, 16074, 16092)) {
                final List<CtStatement> npe_invocation_var922 = npe_invocation_var921.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var922, List.class, 319, 16074, 16108)) {
                    if (npe_invocation_var922.size() != 1) {
                        return true;
                    }
                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 322, 16159, 16167)) {
            final CtBlock<?> npe_invocation_var923 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var923, CtBlock.class, 322, 16159, 16177)) {
                if (!(npe_invocation_var923.getStatement(0) instanceof CtThrow)) {
                    return true;
                }
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 325, 16264, 16272)) {
            final CtBlock<?> npe_invocation_var924 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var924, CtBlock.class, 325, 16264, 16282)) {
                ctThrow = npe_invocation_var924.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 326, 16311, 16317)) {
            if (!(ctThrow.getThrownExpression() instanceof CtConstructorCall)) {
                return true;
            }
        } else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 330, 16547, 16562)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 330, 16581, 16587)) {
                final TypeFactory npe_invocation_var925 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var925, TypeFactory.class, 330, 16581, 16594)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var926 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var926, CtTypeReference.class, 330, 16547, 16572)) {
                        if (!npe_invocation_var926.equals(npe_invocation_var925.createReference(UnsupportedOperationException.class))) {
                            return true;
                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 341, 16911, 16916)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 341, 16941, 16948)) {
                    final String npe_invocation_var927 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var927, String.class, 341, 16911, 16932)) {
                        if (!npe_invocation_var927.equals(ctMethod.getSimpleName())) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 344, 17013, 17018)) {
                final List<? extends CtParameter<?>> npe_invocation_var928 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var928, List.class, 344, 17013, 17034)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 344, 17046, 17053)) {
                        final List<? extends CtParameter<?>> npe_invocation_var929 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var929, List.class, 344, 17046, 17069)) {
                            cont = npe_invocation_var928.size() == npe_invocation_var929.size();
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < method.getParameters().size()); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 346, 17161, 17166)) {
                    final List<? extends CtParameter<?>> npe_invocation_var930 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var930, List.class, 346, 17161, 17182)) {
                        if (CallChecker.beforeDeref(npe_invocation_var930.get(i), CtParameter.class, 346, 17161, 17189)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 346, 17208, 17215)) {
                                final List<? extends CtParameter<?>> npe_invocation_var931 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var931, List.class, 346, 17208, 17231)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var931.get(i), CtParameter.class, 346, 17208, 17238)) {
                                        final CtTypeReference<?> npe_invocation_var932 = npe_invocation_var930.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var932, CtTypeReference.class, 346, 17161, 17199)) {
                                            if (!npe_invocation_var932.equals(npe_invocation_var931.get(i).getType())) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 354, 17395, 17400)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 354, 17448, 17453)) {
                throw new AssertionError((("Can't find method " + method.getSignature()) + " in the given interface ") + ctType.getQualifiedName());
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 363, 17828, 17838)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 363, 17863, 17875)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 363, 17906, 17918)) {
                        final String npe_invocation_var933 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var933, String.class, 363, 17906, 17934)) {
                            final String npe_invocation_var934 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var934, String.class, 363, 17863, 17891)) {
                                final String npe_invocation_var935 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var935, String.class, 363, 17828, 17854)) {
                                    if (npe_invocation_var935.equals(npe_invocation_var934.substring(0, npe_invocation_var933.length() - 4))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17984, 17994)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        } else
                                            throw new AbnormalExecutionError();

                                    }
                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 367, 18114, 18126)) {
            throw new AssertionError("You should have the interface for the implementation " + declaringType.getQualifiedName());
        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 376, 18364, 18370)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 377, 18403, 18409)) {
                final CoreFactory npe_invocation_var936 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var936, CoreFactory.class, 377, 18403, 18416)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 377, 18439, 18445)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18463, 18469)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 377, 18497, 18503)) {
                                final List<? extends CtParameter<?>> npe_invocation_var937 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var937, List.class, 377, 18497, 18519)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var937.get(0), CtParameter.class, 377, 18497, 18526)) {
                                        final CodeFactory npe_invocation_var938 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var938, CodeFactory.class, 377, 18463, 18476)) {
                                            final CodeFactory npe_invocation_var939 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var939, CodeFactory.class, 376, 18364, 18377)) {
                                                return npe_invocation_var939.createInvocation(npe_invocation_var936.createSuperAccess(), element.getReference(), npe_invocation_var938.createVariableRead(npe_invocation_var937.get(0).getReference(), false));
                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 390, 19013, 19019)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 390, 19045, 19053)) {
                final CtVariableAccess<Object> npe_invocation_var940 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var940, CtVariableAccess.class, 390, 19045, 19061)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 390, 19082, 19087)) {
                        final CodeFactory npe_invocation_var941 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var941, CodeFactory.class, 390, 19013, 19026)) {
                            return npe_invocation_var941.createInvocation(npe_invocation_var940.addTypeCast(type), setter.getReference(), getter);
                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 400, 19372, 19378)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 400, 19404, 19410)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 400, 19438, 19444)) {
                    final CodeFactory npe_invocation_var942 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var942, CodeFactory.class, 400, 19404, 19417)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 400, 19470, 19475)) {
                            final CodeFactory npe_invocation_var943 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var943, CodeFactory.class, 400, 19372, 19385)) {
                                return npe_invocation_var943.createInvocation(npe_invocation_var942.createVariableRead(element.getReference(), false), getter.getReference());
                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 409, 19745, 19752)) {
                final String npe_invocation_var944 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var944, String.class, 409, 19745, 19768)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 409, 19791, 19798)) {
                        final String npe_invocation_var945 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var945, String.class, 409, 19791, 19814)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 409, 19839, 19845)) {
                                final String npe_invocation_var946 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var946, String.class, 409, 19839, 19861)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var945.toLowerCase(), String.class, 409, 19791, 19828)) {
                                        if (npe_invocation_var944.startsWith("set") && npe_invocation_var945.toLowerCase().contains(npe_invocation_var946.toLowerCase())) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19891, 19898)) {
                                                final List<? extends CtParameter<?>> npe_invocation_var947 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var947, List.class, 410, 19891, 19914)) {
                                                    if (npe_invocation_var947.size() != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 413, 19967, 19974)) {
                                                final List<? extends CtParameter<?>> npe_invocation_var948 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var948, List.class, 413, 19967, 19990)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var948.get(0), CtParameter.class, 413, 19967, 19997)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 413, 20016, 20022)) {
                                                            final CtTypeReference<?> npe_invocation_var949 = npe_invocation_var948.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var949, CtTypeReference.class, 413, 19967, 20007)) {
                                                                if (!npe_invocation_var949.equals(ctField.getType())) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 419, 20157, 20163)) {
            final TypeFactory npe_invocation_var950 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var950, TypeFactory.class, 419, 20157, 20170)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 419, 20103, 20131)) {
                    final CtMethod<Object> npe_invocation_var951 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var950.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var951, CtMethod.class, 419, 20103, 20189)) {
                        npe_invocation_var951.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 424, 20439, 20442)) {
                    final List<CtStatement> npe_invocation_var952 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var952, List.class, 424, 20439, 20458)) {
                        if (npe_invocation_var952.size() != 3) {
                            return false;
                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 427, 20514, 20517)) {
                    if (body.getStatement(1) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(1))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 432, 20746, 20771)) {
                            final CtFieldReference npe_invocation_var953 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var953, CtFieldReference.class, 432, 20746, 20785)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 432, 20810, 20816)) {
                                    final String npe_invocation_var954 = npe_invocation_var953.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var954, String.class, 432, 20746, 20801)) {
                                        if (!npe_invocation_var954.equals(ctField.getSimpleName())) {
                                            return false;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else {
                        return false;
                    }
                } else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 441, 20955, 20962)) {
            if (matchers.size() != 1) {
                if (CallChecker.beforeDeref(matchers, List.class, 442, 21099, 21106)) {
                    throw new SpoonException((("Get more than one setter. Please make an more ingenious method to get setter method. " + matchers.size()) + " ") + ctField);
                } else
                    throw new AbnormalExecutionError();

            }
        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 444, 21150, 21157)) {
            return matchers.get(0);
        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 453, 21417, 21424)) {
                final String npe_invocation_var955 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var955, String.class, 453, 21417, 21440)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 453, 21463, 21470)) {
                        final String npe_invocation_var956 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var956, String.class, 453, 21463, 21486)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21519, 21526)) {
                                final String npe_invocation_var957 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var957, String.class, 454, 21519, 21542)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 454, 21567, 21573)) {
                                        final String npe_invocation_var958 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var958, String.class, 454, 21567, 21589)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var957.toLowerCase(), String.class, 454, 21519, 21556)) {
                                                if ((npe_invocation_var955.startsWith("get") || npe_invocation_var956.startsWith("is")) && npe_invocation_var957.toLowerCase().contains(npe_invocation_var958.toLowerCase())) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21620, 21627)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21646, 21652)) {
                                                            final CtTypeReference<?> npe_invocation_var959 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var959, CtTypeReference.class, 455, 21620, 21637)) {
                                                                if (!npe_invocation_var959.equals(ctField.getType())) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 458, 21703, 21710)) {
                                                        final List<? extends CtParameter<?>> npe_invocation_var960 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var960, List.class, 458, 21703, 21726)) {
                                                            if (npe_invocation_var960.size() != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 466, 21950, 21961)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 466, 22002, 22008)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 466, 22036, 22042)) {
                    final CodeFactory npe_invocation_var961 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var961, CodeFactory.class, 466, 22002, 22015)) {
                        final CtReturn npe_invocation_var962 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var962, CtReturn.class, 466, 21938, 21978)) {
                            npe_invocation_var962.setReturnedExpression(npe_invocation_var961.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22098, 22104)) {
            final CtType<?> npe_invocation_var964 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var964, CtType.class, 467, 22098, 22123)) {
                matchers = npe_invocation_var964.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 470, 22256, 22262)) {
                            final CtBlock npe_invocation_var963 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var963, CtBlock.class, 470, 22256, 22272)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 470, 22292, 22303)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var963.toString(), String.class, 470, 22256, 22283)) {
                                        return npe_invocation_var963.toString().equals(templateRoot.toString());
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    }
                });
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 473, 22341, 22348)) {
            if (matchers.size() != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 476, 22501, 22508)) {
            return matchers.get(0);
        } else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 483, 22665, 22668)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 483, 22700, 22706)) {
                final TypeFactory npe_invocation_var965 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var965, TypeFactory.class, 483, 22700, 22713)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 483, 22688, 22691)) {
                        if ((!type.isPrimitive()) && (!type.equals(npe_invocation_var965.STRING))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22752, 22758)) {
                                final TypeFactory npe_invocation_var966 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var966, TypeFactory.class, 484, 22752, 22765)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22735, 22738)) {
                                        if (type.isSubtypeOf(npe_invocation_var966.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22839, 22842)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 487, 22870, 22883)) {
                                    final String npe_invocation_var967 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var967, String.class, 487, 22839, 22861)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22908, 22911)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 487, 22939, 22958)) {
                                                final String npe_invocation_var968 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var968, String.class, 487, 22908, 22930)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22983, 22986)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 487, 23014, 23026)) {
                                                            final String npe_invocation_var969 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var969, String.class, 487, 22983, 23005)) {
                                                                if ((npe_invocation_var967.equals(LIST_REFERENCE.getQualifiedName()) || npe_invocation_var968.equals(COLLECTION_REFERENCE.getQualifiedName())) || npe_invocation_var969.equals(SET_REFERENCE.getQualifiedName())) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 23061, 23064)) {
                                                                        final List<? extends CtTypeReference<?>> npe_invocation_var970 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var970, List.class, 488, 23061, 23089)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var970.get(0), CtTypeReference.class, 488, 23061, 23096)) {
                                                                                if (npe_invocation_var970.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            } else
                                                                                throw new AbnormalExecutionError();

                                                                        } else
                                                                            throw new AbnormalExecutionError();

                                                                    } else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            } else
                                                                throw new AbnormalExecutionError();

                                                        } else
                                                            throw new AbnormalExecutionError();

                                                    } else
                                                        throw new AbnormalExecutionError();

                                                } else
                                                    throw new AbnormalExecutionError();

                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 497, 23270, 23276)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 497, 23325, 23331)) {
                return ctField.getModifiers().contains(ModifierKind.FINAL) || ctField.getModifiers().contains(ModifierKind.STATIC);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var972.get(CtInheritanceScanner.class))-->new CtScanner() {
    private final List<String> excludesAST = Arrays.asList("spoon.support.reflect.declaration.CtTypeInformationImpl", "spoon.support.reflect.code.CtAbstractInvocationImpl", "spoon.support.reflect.declaration.CtTypedElementImpl", "spoon.support.reflect.declaration.CtVariableImpl", "spoon.support.reflect.reference.CtActualTypeContainerImpl", "spoon.support.reflect.code.CtCFlowBreakImpl", "spoon.support.reflect.code.CtLabelledFlowBreakImpl", "spoon.support.reflect.declaration.CtCodeSnippetImpl", "spoon.support.reflect.declaration.CtFormalTypeDeclarerImpl", "spoon.support.reflect.declaration.CtGenericElementImpl", "spoon.support.reflect.reference.CtGenericElementReferenceImpl", "spoon.support.reflect.declaration.CtModifiableImpl", "spoon.support.reflect.declaration.CtMultiTypedElementImpl", "spoon.support.reflect.declaration.CtTypeMemberImpl");

    private final List<String> excludesFields = Arrays.asList("factory", "elementValues", "target", "metadata");

    private final CtTypeReference<List> LIST_REFERENCE = factory.Type().createReference(List.class);

    private final CtTypeReference<Collection> COLLECTION_REFERENCE = factory.Type().createReference(Collection.class);

    private final CtTypeReference<Set> SET_REFERENCE = factory.Type().createReference(Set.class);

    private final CtTypeReference<CtElement> CTELEMENT_REFERENCE = factory.Type().createReference(CtElement.class);

    private final CtClass<?> GETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(CloneVisitorGenerator.GENERATING_CLONE_PACKAGE + ".GetterTemplateMatcher");

    private final CtClass<?> SETTER_TEMPLATE_MATCHER_CLASS = factory.Class().get(CloneVisitorGenerator.GENERATING_CLONE_PACKAGE + ".SetterTemplateMatcher");

    @Override
    public <T> void visitCtMethod(CtMethod<T> element) {
        if (CallChecker.beforeDeref(element, CtMethod.class, 211, 11610, 11616)) {
            final String npe_invocation_var903 = element.getSimpleName();
            if (CallChecker.beforeDeref(npe_invocation_var903, String.class, 211, 11610, 11632)) {
                if (CallChecker.beforeDeref(element, CtMethod.class, 211, 11660, 11666)) {
                    final String npe_invocation_var904 = element.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var904, String.class, 211, 11660, 11682)) {
                        if ((!npe_invocation_var903.startsWith("visitCt")) && (!npe_invocation_var904.startsWith("scanCt"))) {
                            return;
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(element, CtMethod.class, 214, 11760, 11766)) {
            if (CallChecker.beforeDeref("scanCtVisitable", String.class, 214, 11735, 11751)) {
                if ("scanCtVisitable".equals(element.getSimpleName())) {
                    return;
                }
            }
        }
        final String qualifiedNameOfImplClass = ("spoon.support" + element.getParameters().get(0).getType().getQualifiedName().substring(5)) + "Impl";
        if (CallChecker.beforeDeref(excludesAST, List.class, 218, 11960, 11970)) {
            if (excludesAST.contains(qualifiedNameOfImplClass)) {
                return;
            }
        }
        final CtType<?> declaration = factory.Class().get(qualifiedNameOfImplClass);
        if (declaration == null) {
            if (CallChecker.beforeDeref(element, CtMethod.class, 223, 12252, 12258)) {
                throw new SpoonException((qualifiedNameOfImplClass + " doesn't have declaration in the source path for ") + element.getSignature());
            } else
                throw new AbnormalExecutionError();

        }
        CtMethod<T> clone = CallChecker.init(CtMethod.class);
        if (CallChecker.beforeDeref(element, CtMethod.class, 226, 12308, 12314)) {
            clone = element.clone();
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 227, 12329, 12333)) {
            final CtBlock<T> npe_invocation_var905 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var905, CtBlock.class, 227, 12329, 12343)) {
                final List<CtStatement> npe_invocation_var906 = npe_invocation_var905.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var906, List.class, 227, 12329, 12359)) {
                    npe_invocation_var906.clear();
                }
            }
        }
        for (CtField<?> ctField : declaration.getFields()) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 229, 12460, 12466)) {
                if (CallChecker.beforeDeref(excludesFields, List.class, 229, 12436, 12449)) {
                    if (excludesFields.contains(ctField.getSimpleName())) {
                        continue;
                    }
                }
            }
            if (isConstantOrStatic(ctField)) {
                continue;
            }
            if (CallChecker.beforeDeref(ctField, CtField.class, 235, 12604, 12610)) {
                if (isSubTypeOfCtElement(ctField.getType())) {
                    continue;
                }
            }
            final CtMethod<?> setterOfField = getSetterOf(ctField);
            final CtInvocation<?> setterInvocation = createSetterInvocation(element.getParameters().get(0).getType(), setterOfField, createGetterInvocation(element.getParameters().get(0), getGetterOf(ctField)));
            final List<CtMethod<?>> methodsToAvoid = getCtMethodThrowUnsupportedOperation(setterOfField);
            if (CallChecker.beforeDeref(methodsToAvoid, List.class, 243, 13043, 13056)) {
                if (methodsToAvoid.size() > 0) {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 244, 13078, 13082)) {
                        final CtBlock<T> npe_invocation_var907 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var907, CtBlock.class, 244, 13078, 13092)) {
                            npe_invocation_var907.addStatement(createProtectionToException(setterInvocation, methodsToAvoid));
                        }
                    }
                } else {
                    if (CallChecker.beforeDeref(clone, CtMethod.class, 246, 13191, 13195)) {
                        final CtBlock<T> npe_invocation_var908 = clone.getBody();
                        if (CallChecker.beforeDeref(npe_invocation_var908, CtBlock.class, 246, 13191, 13205)) {
                            npe_invocation_var908.addStatement(setterInvocation);
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(clone, CtMethod.class, 249, 13260, 13264)) {
            final CtBlock<T> npe_invocation_var909 = clone.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var909, CtBlock.class, 249, 13260, 13274)) {
                final List<CtStatement> npe_invocation_var910 = npe_invocation_var909.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var910, List.class, 249, 13260, 13290)) {
                    if (npe_invocation_var910.size() > 0) {
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 250, 13311, 13315)) {
                            final CtBlock<T> npe_invocation_var911 = clone.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var911, CtBlock.class, 250, 13311, 13325)) {
                                npe_invocation_var911.insertEnd(createSuperInvocation(element));
                            }
                        }
                        final CtComment comment = factory.Core().createComment();
                        if (CallChecker.beforeDeref(comment, CtComment.class, 254, 13475, 13481)) {
                            comment.setCommentType(CtComment.CommentType.INLINE);
                        }
                        if (CallChecker.beforeDeref(comment, CtComment.class, 255, 13534, 13540)) {
                            comment.setContent("auto-generated, see " + CloneVisitorGenerator.class.getName());
                        }
                        if (CallChecker.beforeDeref(clone, CtMethod.class, 256, 13623, 13627)) {
                            clone.addComment(comment);
                        }
                        if (CallChecker.beforeDeref(targetBuilder, CtClass.class, 258, 13656, 13668)) {
                            targetBuilder.addMethod(clone);
                        }
                    }
                }
            }
        }
    }

    private CtIf createProtectionToException(CtInvocation<?> setterInvocation, List<CtMethod<?>> methodsAvoid) {
        final CtIf anIf = factory.Core().createIf();
        if (CallChecker.beforeDeref(factory, Factory.class, 267, 13987, 13993)) {
            final CoreFactory npe_invocation_var912 = factory.Core();
            if (CallChecker.beforeDeref(npe_invocation_var912, CoreFactory.class, 267, 13987, 14000)) {
                final CtUnaryOperator<Object> npe_invocation_var913 = npe_invocation_var912.createUnaryOperator();
                if (CallChecker.beforeDeref(npe_invocation_var913, CtUnaryOperator.class, 267, 13987, 14022)) {
                    final CtUnaryOperator npe_invocation_var914 = npe_invocation_var913.setOperand(createBinaryConditions(methodsAvoid));
                    if (CallChecker.beforeDeref(npe_invocation_var914, CtUnaryOperator.class, 267, 13987, 14071)) {
                        if (CallChecker.beforeDeref(anIf, CtIf.class, 267, 13969, 13972)) {
                            anIf.setCondition(npe_invocation_var914.setKind(UnaryOperatorKind.NOT));
                        }
                    }
                }
            }
        }
        if (CallChecker.beforeDeref(factory, Factory.class, 268, 14132, 14138)) {
            final CodeFactory npe_invocation_var915 = factory.Code();
            if (CallChecker.beforeDeref(npe_invocation_var915, CodeFactory.class, 268, 14132, 14145)) {
                if (CallChecker.beforeDeref(anIf, CtIf.class, 268, 14110, 14113)) {
                    anIf.setThenStatement(npe_invocation_var915.createCtBlock(setterInvocation));
                }
            }
        }
        return anIf;
    }

    private CtExpression<Object> createBinaryConditions(List<CtMethod<?>> methodsAvoid) {
        CtExpression<Object> left = null;
        CtExpression<Object> right = CallChecker.init(CtExpression.class);
        for (int i = 0; i < methodsAvoid.size(); i++) {
            final CtInterface<?> ctInterface = getInterfaceOf(methodsAvoid.get(i).getDeclaringType());
            if (i == 0) {
                if (CallChecker.beforeDeref(factory, Factory.class, 283, 14665, 14671)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 284, 14723, 14729)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 284, 14755, 14765)) {
                            final CodeFactory npe_invocation_var916 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var916, CodeFactory.class, 284, 14723, 14736)) {
                                final CodeFactory npe_invocation_var917 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var917, CodeFactory.class, 283, 14665, 14678)) {
                                    left = npe_invocation_var917.createBinaryOperator(otherRead, npe_invocation_var916.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
            } else {
                if (CallChecker.beforeDeref(factory, Factory.class, 287, 14855, 14861)) {
                    if (CallChecker.beforeDeref(factory, Factory.class, 288, 14913, 14919)) {
                        if (CallChecker.beforeDeref(ctInterface, CtInterface.class, 288, 14945, 14955)) {
                            final CodeFactory npe_invocation_var918 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var918, CodeFactory.class, 288, 14913, 14926)) {
                                final CodeFactory npe_invocation_var919 = factory.Code();
                                if (CallChecker.beforeDeref(npe_invocation_var919, CodeFactory.class, 287, 14855, 14868)) {
                                    right = npe_invocation_var919.createBinaryOperator(otherRead, npe_invocation_var918.createTypeAccess(ctInterface.getReference()), BinaryOperatorKind.INSTANCEOF);
                                }
                            }
                        }
                    }
                }
                if (CallChecker.beforeDeref(factory, Factory.class, 291, 15031, 15037)) {
                    final CodeFactory npe_invocation_var920 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var920, CodeFactory.class, 291, 15031, 15044)) {
                        left = npe_invocation_var920.createBinaryOperator(left, right, BinaryOperatorKind.OR);
                    }
                }
            }
        }
        return left;
    }

    private List<CtMethod<?>> getCtMethodThrowUnsupportedOperation(CtMethod<?> method) {
        final List<CtMethod<?>> avoid = new ArrayList<>();
        final CtInterface<?> ctInterface = getInterfaceOf(method.getDeclaringType());
        if (ctInterface == null) {
            return avoid;
        }
        final CtMethod<?> declarationMethod = getMethodByCtMethod(ctInterface, method);
        for (CtMethod<?> ctMethod : Query.getElements(factory, new OverridingMethodFilter(declarationMethod))) {
            if (!avoidThrowUnsupportedOperationException(ctMethod)) {
                if (CallChecker.beforeDeref(avoid, List.class, 309, 15834, 15838)) {
                    avoid.add(ctMethod);
                }
            }
        }
        return avoid;
    }

    private boolean avoidThrowUnsupportedOperationException(CtMethod<?> candidate) {
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 319, 16074, 16082)) {
            final CtBlock<?> npe_invocation_var921 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var921, CtBlock.class, 319, 16074, 16092)) {
                final List<CtStatement> npe_invocation_var922 = npe_invocation_var921.getStatements();
                if (CallChecker.beforeDeref(npe_invocation_var922, List.class, 319, 16074, 16108)) {
                    if (npe_invocation_var922.size() != 1) {
                        return true;
                    }
                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(candidate, CtMethod.class, 322, 16159, 16167)) {
            final CtBlock<?> npe_invocation_var923 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var923, CtBlock.class, 322, 16159, 16177)) {
                if (!(npe_invocation_var923.getStatement(0) instanceof CtThrow)) {
                    return true;
                }
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        CtThrow ctThrow = CallChecker.init(CtThrow.class);
        if (CallChecker.beforeDeref(candidate, CtMethod.class, 325, 16264, 16272)) {
            final CtBlock<?> npe_invocation_var924 = candidate.getBody();
            if (CallChecker.beforeDeref(npe_invocation_var924, CtBlock.class, 325, 16264, 16282)) {
                ctThrow = npe_invocation_var924.getStatement(0);
            }
        }
        if (CallChecker.beforeDeref(ctThrow, CtThrow.class, 326, 16311, 16317)) {
            if (!(ctThrow.getThrownExpression() instanceof CtConstructorCall)) {
                return true;
            }
        } else
            throw new AbnormalExecutionError();

        final CtConstructorCall<? extends Throwable> thrownExpression = ((CtConstructorCall<? extends Throwable>) (ctThrow.getThrownExpression()));
        if (CallChecker.beforeDeref(thrownExpression, CtConstructorCall.class, 330, 16547, 16562)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 330, 16581, 16587)) {
                final TypeFactory npe_invocation_var925 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var925, TypeFactory.class, 330, 16581, 16594)) {
                    final CtTypeReference<? extends Throwable> npe_invocation_var926 = thrownExpression.getType();
                    if (CallChecker.beforeDeref(npe_invocation_var926, CtTypeReference.class, 330, 16547, 16572)) {
                        if (!npe_invocation_var926.equals(npe_invocation_var925.createReference(UnsupportedOperationException.class))) {
                            return true;
                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        return false;
    }

    private CtMethod<?> getMethodByCtMethod(CtType<?> ctType, CtMethod<?> method) {
        for (CtMethod<?> ctMethod : ctType.getAllMethods()) {
            if (CallChecker.beforeDeref(method, CtMethod.class, 341, 16911, 16916)) {
                if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 341, 16941, 16948)) {
                    final String npe_invocation_var927 = method.getSimpleName();
                    if (CallChecker.beforeDeref(npe_invocation_var927, String.class, 341, 16911, 16932)) {
                        if (!npe_invocation_var927.equals(ctMethod.getSimpleName())) {
                            continue;
                        }
                    }
                }
            }
            boolean cont = CallChecker.init(boolean.class);
            if (CallChecker.beforeDeref(method, CtMethod.class, 344, 17013, 17018)) {
                final List<? extends CtParameter<?>> npe_invocation_var928 = method.getParameters();
                if (CallChecker.beforeDeref(npe_invocation_var928, List.class, 344, 17013, 17034)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 344, 17046, 17053)) {
                        final List<? extends CtParameter<?>> npe_invocation_var929 = ctMethod.getParameters();
                        if (CallChecker.beforeDeref(npe_invocation_var929, List.class, 344, 17046, 17069)) {
                            cont = npe_invocation_var928.size() == npe_invocation_var929.size();
                        }
                    }
                }
            }
            for (int i = 0; cont && (i < method.getParameters().size()); i++) {
                if (CallChecker.beforeDeref(method, CtMethod.class, 346, 17161, 17166)) {
                    final List<? extends CtParameter<?>> npe_invocation_var930 = method.getParameters();
                    if (CallChecker.beforeDeref(npe_invocation_var930, List.class, 346, 17161, 17182)) {
                        if (CallChecker.beforeDeref(npe_invocation_var930.get(i), CtParameter.class, 346, 17161, 17189)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 346, 17208, 17215)) {
                                final List<? extends CtParameter<?>> npe_invocation_var931 = ctMethod.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var931, List.class, 346, 17208, 17231)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var931.get(i), CtParameter.class, 346, 17208, 17238)) {
                                        final CtTypeReference<?> npe_invocation_var932 = npe_invocation_var930.get(i).getType();
                                        if (CallChecker.beforeDeref(npe_invocation_var932, CtTypeReference.class, 346, 17161, 17199)) {
                                            if (!npe_invocation_var932.equals(npe_invocation_var931.get(i).getType())) {
                                                cont = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (cont) {
                return ctMethod;
            }
        }
        if (CallChecker.beforeDeref(method, CtMethod.class, 354, 17395, 17400)) {
            if (CallChecker.beforeDeref(ctType, CtType.class, 354, 17448, 17453)) {
                throw new AssertionError((("Can't find method " + method.getSignature()) + " in the given interface ") + ctType.getQualifiedName());
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInterface<?> getInterfaceOf(CtType<?> declaringType) {
        final CtTypeReference<?>[] interfaces = declaringType.getSuperInterfaces().toArray(new CtTypeReference[declaringType.getSuperInterfaces().size()]);
        for (CtTypeReference<?> anInterface : interfaces) {
            if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 363, 17828, 17838)) {
                if (CallChecker.beforeDeref(declaringType, CtType.class, 363, 17863, 17875)) {
                    if (CallChecker.beforeDeref(declaringType, CtType.class, 363, 17906, 17918)) {
                        final String npe_invocation_var933 = declaringType.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var933, String.class, 363, 17906, 17934)) {
                            final String npe_invocation_var934 = declaringType.getSimpleName();
                            if (CallChecker.beforeDeref(npe_invocation_var934, String.class, 363, 17863, 17891)) {
                                final String npe_invocation_var935 = anInterface.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var935, String.class, 363, 17828, 17854)) {
                                    if (npe_invocation_var935.equals(npe_invocation_var934.substring(0, npe_invocation_var933.length() - 4))) {
                                        if (CallChecker.beforeDeref(anInterface, CtTypeReference.class, 364, 17984, 17994)) {
                                            return ((CtInterface<?>) (anInterface.getDeclaration()));
                                        } else
                                            throw new AbnormalExecutionError();

                                    }
                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(declaringType, CtType.class, 367, 18114, 18126)) {
            throw new AssertionError("You should have the interface for the implementation " + declaringType.getQualifiedName());
        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtInvocation<T> createSuperInvocation(CtMethod<T> element) {
        if (CallChecker.beforeDeref(factory, Factory.class, 376, 18364, 18370)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 377, 18403, 18409)) {
                final CoreFactory npe_invocation_var936 = factory.Core();
                if (CallChecker.beforeDeref(npe_invocation_var936, CoreFactory.class, 377, 18403, 18416)) {
                    if (CallChecker.beforeDeref(element, CtMethod.class, 377, 18439, 18445)) {
                        if (CallChecker.beforeDeref(factory, Factory.class, 377, 18463, 18469)) {
                            if (CallChecker.beforeDeref(element, CtMethod.class, 377, 18497, 18503)) {
                                final List<? extends CtParameter<?>> npe_invocation_var937 = element.getParameters();
                                if (CallChecker.beforeDeref(npe_invocation_var937, List.class, 377, 18497, 18519)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var937.get(0), CtParameter.class, 377, 18497, 18526)) {
                                        final CodeFactory npe_invocation_var938 = factory.Code();
                                        if (CallChecker.beforeDeref(npe_invocation_var938, CodeFactory.class, 377, 18463, 18476)) {
                                            final CodeFactory npe_invocation_var939 = factory.Code();
                                            if (CallChecker.beforeDeref(npe_invocation_var939, CodeFactory.class, 376, 18364, 18377)) {
                                                return npe_invocation_var939.createInvocation(npe_invocation_var936.createSuperAccess(), element.getReference(), npe_invocation_var938.createVariableRead(npe_invocation_var937.get(0).getReference(), false));
                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createSetterInvocation(CtTypeReference<?> type, CtMethod<?> setter, CtInvocation<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 390, 19013, 19019)) {
            if (CallChecker.beforeDeref(otherRead, CtVariableAccess.class, 390, 19045, 19053)) {
                final CtVariableAccess<Object> npe_invocation_var940 = otherRead.clone();
                if (CallChecker.beforeDeref(npe_invocation_var940, CtVariableAccess.class, 390, 19045, 19061)) {
                    if (CallChecker.beforeDeref(setter, CtMethod.class, 390, 19082, 19087)) {
                        final CodeFactory npe_invocation_var941 = factory.Code();
                        if (CallChecker.beforeDeref(npe_invocation_var941, CodeFactory.class, 390, 19013, 19026)) {
                            return npe_invocation_var941.createInvocation(npe_invocation_var940.addTypeCast(type), setter.getReference(), getter);
                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private CtInvocation<?> createGetterInvocation(CtParameter<?> element, CtMethod<?> getter) {
        if (CallChecker.beforeDeref(factory, Factory.class, 400, 19372, 19378)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 400, 19404, 19410)) {
                if (CallChecker.beforeDeref(element, CtParameter.class, 400, 19438, 19444)) {
                    final CodeFactory npe_invocation_var942 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var942, CodeFactory.class, 400, 19404, 19417)) {
                        if (CallChecker.beforeDeref(getter, CtMethod.class, 400, 19470, 19475)) {
                            final CodeFactory npe_invocation_var943 = factory.Code();
                            if (CallChecker.beforeDeref(npe_invocation_var943, CodeFactory.class, 400, 19372, 19385)) {
                                return npe_invocation_var943.createInvocation(npe_invocation_var942.createVariableRead(element.getReference(), false), getter.getReference());
                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getSetterOf(final CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 409, 19745, 19752)) {
                final String npe_invocation_var944 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var944, String.class, 409, 19745, 19768)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 409, 19791, 19798)) {
                        final String npe_invocation_var945 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var945, String.class, 409, 19791, 19814)) {
                            if (CallChecker.beforeDeref(ctField, CtField.class, 409, 19839, 19845)) {
                                final String npe_invocation_var946 = ctField.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var946, String.class, 409, 19839, 19861)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var945.toLowerCase(), String.class, 409, 19791, 19828)) {
                                        if (npe_invocation_var944.startsWith("set") && npe_invocation_var945.toLowerCase().contains(npe_invocation_var946.toLowerCase())) {
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 410, 19891, 19898)) {
                                                final List<? extends CtParameter<?>> npe_invocation_var947 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var947, List.class, 410, 19891, 19914)) {
                                                    if (npe_invocation_var947.size() != 1) {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 413, 19967, 19974)) {
                                                final List<? extends CtParameter<?>> npe_invocation_var948 = ctMethod.getParameters();
                                                if (CallChecker.beforeDeref(npe_invocation_var948, List.class, 413, 19967, 19990)) {
                                                    if (CallChecker.beforeDeref(npe_invocation_var948.get(0), CtParameter.class, 413, 19967, 19997)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 413, 20016, 20022)) {
                                                            final CtTypeReference<?> npe_invocation_var949 = npe_invocation_var948.get(0).getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var949, CtTypeReference.class, 413, 19967, 20007)) {
                                                                if (!npe_invocation_var949.equals(ctField.getType())) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            return ctMethod;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        if (CallChecker.beforeDeref(factory, Factory.class, 419, 20157, 20163)) {
            final TypeFactory npe_invocation_var950 = factory.Type();
            if (CallChecker.beforeDeref(npe_invocation_var950, TypeFactory.class, 419, 20157, 20170)) {
                if (CallChecker.beforeDeref(SETTER_TEMPLATE_MATCHER_CLASS, CtClass.class, 419, 20103, 20131)) {
                    final CtMethod<Object> npe_invocation_var951 = SETTER_TEMPLATE_MATCHER_CLASS.getMethod("setElement", npe_invocation_var950.BOOLEAN_PRIMITIVE);
                    if (CallChecker.beforeDeref(npe_invocation_var951, CtMethod.class, 419, 20103, 20189)) {
                        npe_invocation_var951.getBody();
                    }
                }
            }
        }
        final List<CtMethod> matchers = ctField.getDeclaringType().getElements(new TypeFilter<CtMethod>(CtMethod.class) {
            @Override
            public boolean matches(CtMethod element) {
                final CtBlock body = element.getBody();
                if (CallChecker.beforeDeref(body, CtBlock.class, 424, 20439, 20442)) {
                    final List<CtStatement> npe_invocation_var952 = body.getStatements();
                    if (CallChecker.beforeDeref(npe_invocation_var952, List.class, 424, 20439, 20458)) {
                        if (npe_invocation_var952.size() != 3) {
                            return false;
                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

                if (CallChecker.beforeDeref(body, CtBlock.class, 427, 20514, 20517)) {
                    if (body.getStatement(1) instanceof CtAssignment) {
                        final CtExpression assigned = ((CtAssignment) (body.getStatement(1))).getAssigned();
                        if (!(assigned instanceof CtFieldAccess)) {
                            return false;
                        }
                        if (CallChecker.beforeDeref(assigned, CtExpression.class, 432, 20746, 20771)) {
                            final CtFieldReference npe_invocation_var953 = ((CtFieldAccess) (assigned)).getVariable();
                            if (CallChecker.beforeDeref(npe_invocation_var953, CtFieldReference.class, 432, 20746, 20785)) {
                                if (CallChecker.beforeDeref(ctField, CtField.class, 432, 20810, 20816)) {
                                    final String npe_invocation_var954 = npe_invocation_var953.getSimpleName();
                                    if (CallChecker.beforeDeref(npe_invocation_var954, String.class, 432, 20746, 20801)) {
                                        if (!npe_invocation_var954.equals(ctField.getSimpleName())) {
                                            return false;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else {
                        return false;
                    }
                } else
                    throw new AbnormalExecutionError();

                return true;
            }
        });
        if (CallChecker.beforeDeref(matchers, List.class, 441, 20955, 20962)) {
            if (matchers.size() != 1) {
                if (CallChecker.beforeDeref(matchers, List.class, 442, 21099, 21106)) {
                    throw new SpoonException((("Get more than one setter. Please make an more ingenious method to get setter method. " + matchers.size()) + " ") + ctField);
                } else
                    throw new AbnormalExecutionError();

            }
        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 444, 21150, 21157)) {
            return matchers.get(0);
        } else
            throw new AbnormalExecutionError();

    }

    private <T> CtMethod<?> getGetterOf(CtField<T> ctField) {
        for (CtMethod<?> ctMethod : ctField.getDeclaringType().getMethods()) {
            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 453, 21417, 21424)) {
                final String npe_invocation_var955 = ctMethod.getSimpleName();
                if (CallChecker.beforeDeref(npe_invocation_var955, String.class, 453, 21417, 21440)) {
                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 453, 21463, 21470)) {
                        final String npe_invocation_var956 = ctMethod.getSimpleName();
                        if (CallChecker.beforeDeref(npe_invocation_var956, String.class, 453, 21463, 21486)) {
                            if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 454, 21519, 21526)) {
                                final String npe_invocation_var957 = ctMethod.getSimpleName();
                                if (CallChecker.beforeDeref(npe_invocation_var957, String.class, 454, 21519, 21542)) {
                                    if (CallChecker.beforeDeref(ctField, CtField.class, 454, 21567, 21573)) {
                                        final String npe_invocation_var958 = ctField.getSimpleName();
                                        if (CallChecker.beforeDeref(npe_invocation_var958, String.class, 454, 21567, 21589)) {
                                            if (CallChecker.beforeDeref(npe_invocation_var957.toLowerCase(), String.class, 454, 21519, 21556)) {
                                                if ((npe_invocation_var955.startsWith("get") || npe_invocation_var956.startsWith("is")) && npe_invocation_var957.toLowerCase().contains(npe_invocation_var958.toLowerCase())) {
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 455, 21620, 21627)) {
                                                        if (CallChecker.beforeDeref(ctField, CtField.class, 455, 21646, 21652)) {
                                                            final CtTypeReference<?> npe_invocation_var959 = ctMethod.getType();
                                                            if (CallChecker.beforeDeref(npe_invocation_var959, CtTypeReference.class, 455, 21620, 21637)) {
                                                                if (!npe_invocation_var959.equals(ctField.getType())) {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (CallChecker.beforeDeref(ctMethod, CtMethod.class, 458, 21703, 21710)) {
                                                        final List<? extends CtParameter<?>> npe_invocation_var960 = ctMethod.getParameters();
                                                        if (CallChecker.beforeDeref(npe_invocation_var960, List.class, 458, 21703, 21726)) {
                                                            if (npe_invocation_var960.size() != 0) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    return ctMethod;
                                                }
                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        }
        final CtBlock<?> templateRoot = GETTER_TEMPLATE_MATCHER_CLASS.getMethod("getElement").getBody();
        if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 466, 21950, 21961)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 466, 22002, 22008)) {
                if (CallChecker.beforeDeref(ctField, CtField.class, 466, 22036, 22042)) {
                    final CodeFactory npe_invocation_var961 = factory.Code();
                    if (CallChecker.beforeDeref(npe_invocation_var961, CodeFactory.class, 466, 22002, 22015)) {
                        final CtReturn npe_invocation_var962 = ((CtReturn) (templateRoot.getStatement(0)));
                        if (CallChecker.beforeDeref(npe_invocation_var962, CtReturn.class, 466, 21938, 21978)) {
                            npe_invocation_var962.setReturnedExpression(npe_invocation_var961.createVariableRead(ctField.getReference(), true));
                        }
                    }
                }
            }
        }
        List<CtMethod> matchers = CallChecker.init(List.class);
        if (CallChecker.beforeDeref(ctField, CtField.class, 467, 22098, 22104)) {
            final CtType<?> npe_invocation_var964 = ctField.getDeclaringType();
            if (CallChecker.beforeDeref(npe_invocation_var964, CtType.class, 467, 22098, 22123)) {
                matchers = npe_invocation_var964.getElements(new TypeFilter<CtMethod>(CtMethod.class) {
                    @Override
                    public boolean matches(CtMethod element) {
                        if (CallChecker.beforeDeref(element, CtMethod.class, 470, 22256, 22262)) {
                            final CtBlock npe_invocation_var963 = element.getBody();
                            if (CallChecker.beforeDeref(npe_invocation_var963, CtBlock.class, 470, 22256, 22272)) {
                                if (CallChecker.beforeDeref(templateRoot, CtBlock.class, 470, 22292, 22303)) {
                                    if (CallChecker.beforeDeref(npe_invocation_var963.toString(), String.class, 470, 22256, 22283)) {
                                        return npe_invocation_var963.toString().equals(templateRoot.toString());
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        } else
                            throw new AbnormalExecutionError();

                    }
                });
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 473, 22341, 22348)) {
            if (matchers.size() != 1) {
                throw new SpoonException("Get more than one getter. Please make an more ingenious method to get getter method.");
            }
        } else
            throw new AbnormalExecutionError();

        if (CallChecker.beforeDeref(matchers, List.class, 476, 22501, 22508)) {
            return matchers.get(0);
        } else
            throw new AbnormalExecutionError();

    }

    private boolean isSubTypeOfCtElement(CtTypeReference<?> type) {
        if (CallChecker.beforeDeref(type, CtTypeReference.class, 483, 22665, 22668)) {
            if (CallChecker.beforeDeref(factory, Factory.class, 483, 22700, 22706)) {
                final TypeFactory npe_invocation_var965 = factory.Type();
                if (CallChecker.beforeDeref(npe_invocation_var965, TypeFactory.class, 483, 22700, 22713)) {
                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 483, 22688, 22691)) {
                        if ((!type.isPrimitive()) && (!type.equals(npe_invocation_var965.STRING))) {
                            if (CallChecker.beforeDeref(factory, Factory.class, 484, 22752, 22758)) {
                                final TypeFactory npe_invocation_var966 = factory.Type();
                                if (CallChecker.beforeDeref(npe_invocation_var966, TypeFactory.class, 484, 22752, 22765)) {
                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 484, 22735, 22738)) {
                                        if (type.isSubtypeOf(npe_invocation_var966.createReference(CtElement.class))) {
                                            return true;
                                        }
                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                            if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22839, 22842)) {
                                if (CallChecker.beforeDeref(LIST_REFERENCE, CtTypeReference.class, 487, 22870, 22883)) {
                                    final String npe_invocation_var967 = type.getQualifiedName();
                                    if (CallChecker.beforeDeref(npe_invocation_var967, String.class, 487, 22839, 22861)) {
                                        if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22908, 22911)) {
                                            if (CallChecker.beforeDeref(COLLECTION_REFERENCE, CtTypeReference.class, 487, 22939, 22958)) {
                                                final String npe_invocation_var968 = type.getQualifiedName();
                                                if (CallChecker.beforeDeref(npe_invocation_var968, String.class, 487, 22908, 22930)) {
                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 487, 22983, 22986)) {
                                                        if (CallChecker.beforeDeref(SET_REFERENCE, CtTypeReference.class, 487, 23014, 23026)) {
                                                            final String npe_invocation_var969 = type.getQualifiedName();
                                                            if (CallChecker.beforeDeref(npe_invocation_var969, String.class, 487, 22983, 23005)) {
                                                                if ((npe_invocation_var967.equals(LIST_REFERENCE.getQualifiedName()) || npe_invocation_var968.equals(COLLECTION_REFERENCE.getQualifiedName())) || npe_invocation_var969.equals(SET_REFERENCE.getQualifiedName())) {
                                                                    if (CallChecker.beforeDeref(type, CtTypeReference.class, 488, 23061, 23064)) {
                                                                        final List<? extends CtTypeReference<?>> npe_invocation_var970 = type.getActualTypeArguments();
                                                                        if (CallChecker.beforeDeref(npe_invocation_var970, List.class, 488, 23061, 23089)) {
                                                                            if (CallChecker.beforeDeref(npe_invocation_var970.get(0), CtTypeReference.class, 488, 23061, 23096)) {
                                                                                if (npe_invocation_var970.get(0).isSubtypeOf(CTELEMENT_REFERENCE)) {
                                                                                    return true;
                                                                                }
                                                                            } else
                                                                                throw new AbnormalExecutionError();

                                                                        } else
                                                                            throw new AbnormalExecutionError();

                                                                    } else
                                                                        throw new AbnormalExecutionError();

                                                                }
                                                            } else
                                                                throw new AbnormalExecutionError();

                                                        } else
                                                            throw new AbnormalExecutionError();

                                                    } else
                                                        throw new AbnormalExecutionError();

                                                } else
                                                    throw new AbnormalExecutionError();

                                            } else
                                                throw new AbnormalExecutionError();

                                        } else
                                            throw new AbnormalExecutionError();

                                    } else
                                        throw new AbnormalExecutionError();

                                } else
                                    throw new AbnormalExecutionError();

                            } else
                                throw new AbnormalExecutionError();

                        }
                    } else
                        throw new AbnormalExecutionError();

                } else
                    throw new AbnormalExecutionError();

            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

        return false;
    }

    private boolean isConstantOrStatic(CtField<?> ctField) {
        if (CallChecker.beforeDeref(ctField, CtField.class, 497, 23270, 23276)) {
            if (CallChecker.beforeDeref(ctField, CtField.class, 497, 23325, 23331)) {
                return ctField.getModifiers().contains(ModifierKind.FINAL) || ctField.getModifiers().contains(ModifierKind.STATIC);
            } else
                throw new AbnormalExecutionError();

        } else
            throw new AbnormalExecutionError();

    }
}.scan(npe_invocation_var972.get(CtInheritanceScanner.class))
java.lang.ClassCastException: spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.code.CtStatement
	at spoon.support.reflect.code.CtForImpl.setForUpdate(CtForImpl.java:125)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:639)
	at spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener.set(ReplacementVisitor.java:630)
	at spoon.support.visitor.replace.ReplacementVisitor.replaceInListIfExist(ReplacementVisitor.java:1430)
	at spoon.support.visitor.replace.ReplacementVisitor.visitCtFor(ReplacementVisitor.java:1703)
	at spoon.support.reflect.code.CtForImpl.accept(CtForImpl.java:38)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.replace.ReplacementVisitor.replace(ReplacementVisitor.java:1331)
	at spoon.support.reflect.declaration.CtElementImpl.replace(CtElementImpl.java:462)
	at fr.inria.spirals.npefix.transformer.processors.ProcessorUtility.removeUnaryOperator(ProcessorUtility.java:100)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:187)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:61)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:294)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:55)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:551)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:330)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:118)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:176)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:61)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtInvocation(CtScanner.java:497)
	at spoon.support.reflect.code.CtInvocationImpl.accept(CtInvocationImpl.java:44)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:476)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:34)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:294)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:55)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:551)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:330)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:118)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)
if (jdtCompiler.getEnvironment().getNoClasspath()) {
    treeBuilderCompiler.lookupEnvironment.mayTolerateMissingType = true;
}-->jdtCompiler.getEnvironment().getNoClasspath()
java.lang.NullPointerException
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:176)
	at fr.inria.spirals.npefix.transformer.processors.BeforeDerefAdder.process(BeforeDerefAdder.java:61)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:70)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtIf(CtScanner.java:476)
	at spoon.support.reflect.code.CtIfImpl.accept(CtIfImpl.java:34)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtBlock(CtScanner.java:294)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:55)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.visitCtMethod(CtScanner.java:551)
	at spoon.support.reflect.declaration.CtMethodImpl.accept(CtMethodImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:165)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:139)
	at spoon.reflect.visitor.CtScanner.visitCtClass(CtScanner.java:330)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:66)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:118)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:105)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)
spoon.support.compiler.SnippetCompilationError: Lambda expressions are allowed only at source level 1.8 or above at [C@65a288e7:70
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblemsWhenCompiling(JDTBasedSpoonCompiler.java:590)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:160)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)

Usage: java -jar npefix.jar
                          (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> (-t|--test) test1:test2:...:testN  [--complianceLevel <complianceLevel>] [(-i|--iteration) <iteration>] [(-w|--workingdirectory) <workingdirectory>] [--repairStrategy <repairStrategy>]

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  (-t|--test) test1:test2:...:testN 
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [(-i|--iteration) <iteration>]
        The maximum number of npefix iteration. (default: 100)

  [(-w|--workingdirectory) <workingdirectory>]
        Define the location where npefix will put its files. (default: .)

  [--repairStrategy <repairStrategy>]
        Define the repair strategy used by NPEFix. (default:
        fr.inria.spirals.npefix.main.all.DefaultRepairStrategy)

Exception in thread "main" spoon.support.compiler.SnippetCompilationError: Lambda expressions are allowed only at source level 1.8 or above at [C@65a288e7:70
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.reportProblemsWhenCompiling(JDTBasedSpoonCompiler.java:590)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.compile(JDTBasedSpoonCompiler.java:160)
	at fr.inria.spirals.npefix.main.all.Launcher.instrument(Launcher.java:109)
	at fr.inria.spirals.npefix.main.run.Main.run(Main.java:70)
	at fr.inria.spirals.npefix.main.run.Main.main(Main.java:50)
