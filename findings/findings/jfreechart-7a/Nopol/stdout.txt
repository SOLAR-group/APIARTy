11:32:19.358 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [/apiarty/data/jfreechart-7a/jfreechart/source, /apiarty/data/jfreechart-7a/jfreechart/tests]
11:32:19.381 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/apiarty/data/jfreechart-7a/jfreechart/build/, file:/apiarty/data/jfreechart-7a/jfreechart/build-tests/, file:/apiarty/data/jfreechart-7a/jfreechart/./lib/itext-2.0.6.jar, file:/apiarty/data/jfreechart-7a/jfreechart/./lib/junit.jar, file:/apiarty/data/jfreechart-7a/jfreechart/./lib/servlet.jar]
11:32:19.382 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
11:32:19.383 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.XYPlotTests]
11:32:19.386 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/jfreechart-7a/jfreechart/source, /apiarty/data/jfreechart-7a/jfreechart/tests], projectClasspath='[Ljava.net.URL;@4ec6a292', projectTests=[org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.XYPlotTests], complianceLevel=8, outputFolder=., json=false}
11:32:19.387 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 2
11:32:19.411 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 50 MB
11:32:19.411 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
11:32:19.412 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 59 MB
11:32:19.413 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_232
11:32:19.416 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
11:32:19.418 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /apiarty/apiarty.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
11:33:45.187 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
11:33:45.190 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2293 which is executed by 1 tests
-1690918013
11:33:52.553 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
11:33:52.554 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2286 which is executed by 1 tests
-1690918013
11:33:59.278 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:34:13.679 [pool-2-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
XYPlot.java:985: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: XYPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:34:14.171 [pool-2-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class XYPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = 7044148245716569264L;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList renderers;

    private java.util.Map datasetToDomainAxisMap;

    private java.util.Map datasetToRangeAxisMap;

    private transient java.awt.geom.Point2D quadrantOrigin = new java.awt.geom.Point2D.Double(0.0, 0.0);

    private transient java.awt.Paint[] quadrantPaint = new java.awt.Paint[]{ null, null, null, null };

    private boolean domainGridlinesVisible;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private boolean domainZeroBaselineVisible;

    private transient java.awt.Stroke domainZeroBaselineStroke;

    private transient java.awt.Paint domainZeroBaselinePaint;

    private boolean rangeZeroBaselineVisible;

    private transient java.awt.Stroke rangeZeroBaselineStroke;

    private transient java.awt.Paint rangeZeroBaselinePaint;

    private boolean domainCrosshairVisible;

    private double domainCrosshairValue;

    private transient java.awt.Stroke domainCrosshairStroke;

    private transient java.awt.Paint domainCrosshairPaint;

    private boolean domainCrosshairLockedOnData = true;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private transient java.awt.Paint domainTickBandPaint;

    private transient java.awt.Paint rangeTickBandPaint;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder = org.jfree.chart.plot.SeriesRenderingOrder.REVERSE;

    private int weight;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public XYPlot() {
        this(null, null, null, null);
    }

    public XYPlot(org.jfree.data.xy.XYDataset dataset, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.weight = 1;
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new java.util.TreeMap();
        this.datasetToRangeAxisMap = new java.util.TreeMap();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.domainAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        this.rangeAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = true;
        this.domainGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.domainZeroBaselineVisible = false;
        this.domainZeroBaselinePaint = java.awt.Color.black;
        this.domainZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.rangeGridlinesVisible = true;
        this.rangeGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeZeroBaselineVisible = false;
        this.rangeZeroBaselinePaint = java.awt.Color.black;
        this.rangeZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.domainCrosshairVisible = false;
        this.domainCrosshairValue = 0.0;
        this.domainCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.domainCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.rangeCrosshairVisible = false;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.XYPlot.localizationResources.getString("XY_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (orientation != this.orientation) {
            this.orientation = orientation;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getDomainAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(0)));
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation());
        }
        return result;
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge());
        }
        return result;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        if (axis != null) {
            axis.setPlot(this);
        }
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis();
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.rangeAxes.set(0, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(0)));
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(0, location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation());
        }
        return result;
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge());
        }
        return result;
    }

    public org.jfree.data.xy.XYDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.xy.XYDataset getDataset(int index) {
        org.jfree.data.xy.XYDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.xy.XYDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.xy.XYDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.xy.XYDataset dataset) {
        org.jfree.data.xy.XYDataset existing = getDataset(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public int indexOf(org.jfree.data.xy.XYDataset dataset) {
        int result = -1;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (dataset == this.datasets.get(i)) {
                result = i;
                break;
            }
        }
        return result;
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(0, renderer);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.xy.XYItemRenderer existing = getRenderer(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.datasetRenderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.datasetRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder() {
        return this.seriesRenderingOrder;
    }

    public void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.seriesRenderingOrder = order;
        fireChangeEvent();
    }

    public int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset dataset) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
                if (result == null) {
                    result = getRenderer();
                }
                break;
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isDomainZeroBaselineVisible() {
        return this.domainZeroBaselineVisible;
    }

    public void setDomainZeroBaselineVisible(boolean visible) {
        this.domainZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainZeroBaselineStroke() {
        return this.domainZeroBaselineStroke;
    }

    public void setDomainZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainZeroBaselinePaint() {
        return this.domainZeroBaselinePaint;
    }

    public void setDomainZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeZeroBaselineVisible() {
        return this.rangeZeroBaselineVisible;
    }

    public void setRangeZeroBaselineVisible(boolean visible) {
        this.rangeZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getRangeZeroBaselineStroke() {
        return this.rangeZeroBaselineStroke;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeZeroBaselinePaint() {
        return this.rangeZeroBaselinePaint;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainTickBandPaint() {
        return this.domainTickBandPaint;
    }

    public void setDomainTickBandPaint(java.awt.Paint paint) {
        this.domainTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeTickBandPaint() {
        return this.rangeTickBandPaint;
    }

    public void setRangeTickBandPaint(java.awt.Paint paint) {
        this.rangeTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.geom.Point2D getQuadrantOrigin() {
        return this.quadrantOrigin;
    }

    public void setQuadrantOrigin(java.awt.geom.Point2D origin) {
        if (origin == null) {
            throw new java.lang.IllegalArgumentException("Null 'origin' argument.");
        }
        this.quadrantOrigin = origin;
        fireChangeEvent();
    }

    public java.awt.Paint getQuadrantPaint(int index) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        return this.quadrantPaint[index];
    }

    public void setQuadrantPaint(int index, java.awt.Paint paint) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        this.quadrantPaint[index] = paint;
        fireChangeEvent();
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue",org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlineStroke",org.jfree.chart.plot.XYPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint",org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke",org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairValue",org.jfree.chart.plot.XYPlot.this.domainCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxisLocations",org.jfree.chart.plot.XYPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.localizationResources",org.jfree.chart.plot.XYPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.datasets",org.jfree.chart.plot.XYPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder",org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible",org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.annotations",org.jfree.chart.plot.XYPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.fixedLegendItems",org.jfree.chart.plot.XYPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxisLocations",org.jfree.chart.plot.XYPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder",org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantPaint",org.jfree.chart.plot.XYPlot.this.quadrantPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.renderers",org.jfree.chart.plot.XYPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinePaint",org.jfree.chart.plot.XYPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.weight",org.jfree.chart.plot.XYPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint",org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxes",org.jfree.chart.plot.XYPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.axisOffset",org.jfree.chart.plot.XYPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainTickBandPaint",org.jfree.chart.plot.XYPlot.this.domainTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint",org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxes",org.jfree.chart.plot.XYPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.orientation",org.jfree.chart.plot.XYPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantOrigin",org.jfree.chart.plot.XYPlot.this.quadrantOrigin);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible",org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke",org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
            }
            if (runtimeAngelicValue)
                markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));

        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public java.util.List getAnnotations() {
        return new java.util.ArrayList(this.annotations);
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateDomainAxisSpace(g2, plotArea, space);
        space = calculateRangeAxisSpace(g2, plotArea, space);
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (info != null) {
            info.setPlotArea(area);
        }
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        if (info != null) {
            info.setDataArea(dataArea);
        }
        drawBackground(g2, dataArea);
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, info);
        org.jfree.chart.plot.PlotOrientation orient = getOrientation();
        if ((anchor != null) && (!dataArea.contains(anchor))) {
            anchor = null;
        }
        org.jfree.chart.plot.CrosshairState crosshairState = new org.jfree.chart.plot.CrosshairState();
        crosshairState.setCrosshairDistance(java.lang.Double.POSITIVE_INFINITY);
        crosshairState.setAnchor(anchor);
        crosshairState.setAnchorX(java.lang.Double.NaN);
        crosshairState.setAnchorY(java.lang.Double.NaN);
        if (anchor != null) {
            org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxis();
            if (domainAxis != null) {
                double x;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge());
                } else {
                    x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge());
                }
                crosshairState.setAnchorX(x);
            }
            org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxis();
            if (rangeAxis != null) {
                double y;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge());
                } else {
                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge());
                }
                crosshairState.setAnchorY(y);
            }
        }
        crosshairState.setCrosshairX(getDomainCrosshairValue());
        crosshairState.setCrosshairY(getRangeCrosshairValue());
        java.awt.Shape originalClip = g2.getClip();
        java.awt.Composite originalComposite = g2.getComposite();
        g2.clip(dataArea);
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.axis.AxisState domainAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getDomainAxis())));
        if (domainAxisState == null) {
            if (parentState != null) {
                domainAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getDomainAxis())));
            }
        }
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (domainAxisState != null) {
            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());
        }
        if (rangeAxisState != null) {
            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());
        }
        if (domainAxisState != null) {
            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());
            drawZeroDomainBaseline(g2, dataArea);
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
            drawZeroRangeBaseline(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                }
            }
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
            }
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                }
            }
        } else
            if (order == org.jfree.chart.plot.DatasetRenderingOrder.REVERSE) {
                int rendererCount = this.renderers.size();
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                    }
                }
                for (int i = getDatasetCount() - 1; i >= 0; i--) {
                    foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
                }
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                    }
                }
            }

        int xAxisIndex = crosshairState.getDomainAxisIndex();
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis(xAxisIndex);
        org.jfree.chart.util.RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);
        if ((!this.domainCrosshairLockedOnData) && (anchor != null)) {
            double xx;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);
            } else {
                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);
            }
            crosshairState.setCrosshairX(xx);
        }
        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);
        if (isDomainCrosshairVisible()) {
            double x = getDomainCrosshairValue();
            java.awt.Paint paint = getDomainCrosshairPaint();
            java.awt.Stroke stroke = getDomainCrosshairStroke();
            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);
        }
        int yAxisIndex = crosshairState.getRangeAxisIndex();
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(yAxisIndex);
        org.jfree.chart.util.RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);
        if ((!this.rangeCrosshairLockedOnData) && (anchor != null)) {
            double yy;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);
            } else {
                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);
            }
            crosshairState.setCrosshairY(yy);
        }
        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);
        if (isRangeCrosshairVisible()) {
            double y = getRangeCrosshairValue();
            java.awt.Paint paint = getRangeCrosshairPaint();
            java.awt.Stroke stroke = getRangeCrosshairStroke();
            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);
        }
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, info);
        g2.setClip(originalClip);
        g2.setComposite(originalComposite);
        drawOutline(g2, dataArea);
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawQuadrants(g2, area);
        drawBackgroundImage(g2, area);
    }

    protected void drawQuadrants(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        boolean somethingToDraw = false;
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
        double x = xAxis.getRange().constrain(this.quadrantOrigin.getX());
        double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge());
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
        double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());
        double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge());
        double xmin = xAxis.getLowerBound();
        double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());
        double xmax = xAxis.getUpperBound();
        double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge());
        double ymin = yAxis.getLowerBound();
        double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge());
        double ymax = yAxis.getUpperBound();
        double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge());
        java.awt.geom.Rectangle2D[] r = new java.awt.geom.Rectangle2D[]{ null, null, null, null };
        if (this.quadrantPaint[0] != null) {
            if ((x > xmin) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[1] != null) {
            if ((x < xmax) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[2] != null) {
            if ((x > xmin) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[3] != null) {
            if ((x < xmax) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (somethingToDraw) {
            java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getBackgroundAlpha()));
            for (int i = 0; i < 4; i++) {
                if ((this.quadrantPaint[i] != null) && (r[i] != null)) {
                    g2.setPaint(this.quadrantPaint[i]);
                    g2.fill(r[i]);
                }
            }
            g2.setComposite(originalComposite);
        }
    }

    public void drawDomainTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getDomainTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            double previous = xAxis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = xAxis.getUpperBound();
            if (fillBand) {
                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end);
            }
        }
    }

    public void drawRangeTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getRangeTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            double previous = axis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = axis.getUpperBound();
            if (fillBand) {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end);
            }
        }
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
            if (axis != null) {
                axisCollection.add(axis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info, org.jfree.chart.plot.CrosshairState crosshairState) {
        boolean foundData = false;
        org.jfree.data.xy.XYDataset dataset = getDataset(index);
        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(dataset)) {
            foundData = true;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxisForDataset(index);
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxisForDataset(index);
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(index);
            if (renderer == null) {
                renderer = getRenderer();
                if (renderer == null) {
                    return foundData;
                }
            }
            org.jfree.chart.renderer.xy.XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info);
            int passCount = renderer.getPassCount();
            org.jfree.chart.plot.SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder();
            if (seriesOrder == org.jfree.chart.plot.SeriesRenderingOrder.REVERSE) {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = seriesCount - 1; series >= 0; series--) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (lastItem == (-1)) {
                            continue;
                        }
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            } else {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = 0; series < seriesCount; series++) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            }
        }
        return foundData;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getDomainAxis(axisIndex.intValue());
        } else {
            valueAxis = getDomainAxis(0);
        }
        return valueAxis;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getRangeAxis(axisIndex.intValue());
        } else {
            valueAxis = getRangeAxis(0);
        }
        return valueAxis;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isDomainGridlinesVisible()) {
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke);
            } 
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            if (axis != null) {
                java.util.Iterator iterator = ticks.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                    if ((tick.getValue() != 0.0) || (!isRangeZeroBaselineVisible())) {
                        getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke);
                    }
                } 
            }
        }
    }

    protected void drawZeroDomainBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isDomainZeroBaselineVisible()) {
            org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer();
            r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke);
        }
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isRangeZeroBaselineVisible()) {
            getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = this.annotations.iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    protected void drawHorizontalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getDomainAxis();
        }
        if (axis.getRange().contains(value)) {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawVerticalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getDomainAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getRangeAxis();
        }
        if (axis.getRange().contains(value)) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            org.jfree.chart.axis.ValueAxis da = getDomainAxis();
            if (da != null) {
                double hvalue = da.java2DToValue(x, info.getDataArea(), getDomainAxisEdge());
                setDomainCrosshairValue(hvalue);
            }
            org.jfree.chart.axis.ValueAxis ra = getRangeAxis();
            if (ra != null) {
                double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge());
                setRangeCrosshairValue(vvalue);
            }
        }
    }

    private java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    private java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.domainAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getDomainAxisIndex(axis);
            }
        }
        return result;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        boolean isDomainAxis = true;
        int domainIndex = getDomainAxisIndex(axis);
        if (domainIndex >= 0) {
            isDomainAxis = true;
            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new java.lang.Integer(domainIndex)));
        }
        int rangeIndex = getRangeAxisIndex(axis);
        if (rangeIndex >= 0) {
            isDomainAxis = false;
            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new java.lang.Integer(rangeIndex)));
        }
        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataset d = ((org.jfree.data.xy.XYDataset) (iterator.next()));
            if (d != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRendererForDataset(d);
                if (isDomainAxis) {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findDomainBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findDomainBounds(d));
                    }
                } else {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findRangeBounds(d));
                    }
                }
            }
        } 
        return result;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        configureDomainAxes();
        configureRangeAxes();
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        fireChangeEvent();
    }

    public boolean isDomainCrosshairVisible() {
        return this.domainCrosshairVisible;
    }

    public void setDomainCrosshairVisible(boolean flag) {
        if (this.domainCrosshairVisible != flag) {
            this.domainCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isDomainCrosshairLockedOnData() {
        return this.domainCrosshairLockedOnData;
    }

    public void setDomainCrosshairLockedOnData(boolean flag) {
        if (this.domainCrosshairLockedOnData != flag) {
            this.domainCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getDomainCrosshairValue() {
        return this.domainCrosshairValue;
    }

    public void setDomainCrosshairValue(double value) {
        setDomainCrosshairValue(value, true);
    }

    public void setDomainCrosshairValue(double value, boolean notify) {
        this.domainCrosshairValue = value;
        if (isDomainCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainCrosshairStroke() {
        return this.domainCrosshairStroke;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainCrosshairPaint() {
        return this.domainCrosshairPaint;
    }

    public void setDomainCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainCrosshairPaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomDomainAxes(factor, info, source, false);
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                if (useAnchor) {
                    double sourceX = source.getX();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceX = source.getY();
                    }
                    double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge());
                    domainAxis.resizeRange(factor, anchorX);
                } else {
                    domainAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                domainAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, info, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public boolean isDomainZoomable() {
        return true;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public int getSeriesCount() {
        int result = 0;
        org.jfree.data.xy.XYDataset dataset = getDataset();
        if (dataset != null) {
            result = dataset.getSeriesCount();
        }
        return result;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.fixedLegendItems != null) {
            return this.fixedLegendItems;
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int count = this.datasets.size();
        for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
            org.jfree.data.xy.XYDataset dataset = getDataset(datasetIndex);
            if (dataset != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(datasetIndex);
                if (renderer == null) {
                    renderer = getRenderer(0);
                }
                if (renderer != null) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int i = 0; i < seriesCount; i++) {
                        if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.XYPlot)) {
            return false;
        }
        org.jfree.chart.plot.XYPlot that = ((org.jfree.chart.plot.XYPlot) (obj));
        if (this.weight != that.weight) {
            return false;
        }
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
            return false;
        }
        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
            return false;
        }
        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
            return false;
        }
        if (this.domainCrosshairValue != that.domainCrosshairValue) {
            return false;
        }
        if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
            return false;
        }
        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
            return false;
        }
        for (int i = 0; i < 4; i++) {
            if (!org.jfree.chart.util.PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
                return false;
            }
        }
        return super.equals(obj);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.XYPlot clone = ((org.jfree.chart.plot.XYPlot) (super.clone()));
        clone.domainAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.domainAxes)));
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.domainAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxes)));
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.rangeAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxisLocations)));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.datasets)));
        for (int i = 0; i < clone.datasets.size(); ++i) {
            org.jfree.data.xy.XYDataset d = getDataset(i);
            if (d != null) {
                d.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = new java.util.TreeMap();
        clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
        clone.datasetToRangeAxisMap = new java.util.TreeMap();
        clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
        clone.renderers = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.renderers)));
        for (int i = 0; i < this.renderers.size(); i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer2 = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer2 instanceof org.jfree.chart.util.PublicCloneable) {
                org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (renderer2));
                clone.renderers.set(i, pc.clone());
            }
        }
        clone.foregroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundDomainMarkers)));
        clone.backgroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundDomainMarkers)));
        clone.foregroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundRangeMarkers)));
        clone.backgroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundRangeMarkers)));
        clone.annotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.annotations)));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        clone.quadrantOrigin = ((java.awt.geom.Point2D) (org.jfree.chart.util.ObjectUtilities.clone(this.quadrantOrigin)));
        clone.quadrantPaint = ((java.awt.Paint[]) (this.quadrantPaint.clone()));
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePoint2D(this.quadrantOrigin, stream);
        for (int i = 0; i < 4; i++) {
            org.jfree.chart.util.SerialUtilities.writePaint(this.quadrantPaint[i], stream);
        }
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.quadrantOrigin = org.jfree.chart.util.SerialUtilities.readPoint2D(stream);
        this.quadrantPaint = new java.awt.Paint[4];
        for (int i = 0; i < 4; i++) {
            this.quadrantPaint[i] = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        }
        this.domainZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        int domainAxisCount = this.domainAxes.size();
        for (int i = 0; i < domainAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int rangeAxisCount = this.rangeAxes.size();
        for (int i = 0; i < rangeAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:34:14.180 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:34:14.181 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
11:34:14.182 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2285 which is executed by 1 tests
-1690918013
11:34:20.552 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:34:29.301 [pool-4-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
XYPlot.java:984: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: XYPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:34:29.546 [pool-4-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class XYPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = 7044148245716569264L;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList renderers;

    private java.util.Map datasetToDomainAxisMap;

    private java.util.Map datasetToRangeAxisMap;

    private transient java.awt.geom.Point2D quadrantOrigin = new java.awt.geom.Point2D.Double(0.0, 0.0);

    private transient java.awt.Paint[] quadrantPaint = new java.awt.Paint[]{ null, null, null, null };

    private boolean domainGridlinesVisible;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private boolean domainZeroBaselineVisible;

    private transient java.awt.Stroke domainZeroBaselineStroke;

    private transient java.awt.Paint domainZeroBaselinePaint;

    private boolean rangeZeroBaselineVisible;

    private transient java.awt.Stroke rangeZeroBaselineStroke;

    private transient java.awt.Paint rangeZeroBaselinePaint;

    private boolean domainCrosshairVisible;

    private double domainCrosshairValue;

    private transient java.awt.Stroke domainCrosshairStroke;

    private transient java.awt.Paint domainCrosshairPaint;

    private boolean domainCrosshairLockedOnData = true;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private transient java.awt.Paint domainTickBandPaint;

    private transient java.awt.Paint rangeTickBandPaint;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder = org.jfree.chart.plot.SeriesRenderingOrder.REVERSE;

    private int weight;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public XYPlot() {
        this(null, null, null, null);
    }

    public XYPlot(org.jfree.data.xy.XYDataset dataset, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.weight = 1;
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new java.util.TreeMap();
        this.datasetToRangeAxisMap = new java.util.TreeMap();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.domainAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        this.rangeAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = true;
        this.domainGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.domainZeroBaselineVisible = false;
        this.domainZeroBaselinePaint = java.awt.Color.black;
        this.domainZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.rangeGridlinesVisible = true;
        this.rangeGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeZeroBaselineVisible = false;
        this.rangeZeroBaselinePaint = java.awt.Color.black;
        this.rangeZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.domainCrosshairVisible = false;
        this.domainCrosshairValue = 0.0;
        this.domainCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.domainCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.rangeCrosshairVisible = false;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.XYPlot.localizationResources.getString("XY_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (orientation != this.orientation) {
            this.orientation = orientation;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getDomainAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(0)));
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation());
        }
        return result;
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge());
        }
        return result;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        if (axis != null) {
            axis.setPlot(this);
        }
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis();
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.rangeAxes.set(0, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(0)));
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(0, location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation());
        }
        return result;
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge());
        }
        return result;
    }

    public org.jfree.data.xy.XYDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.xy.XYDataset getDataset(int index) {
        org.jfree.data.xy.XYDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.xy.XYDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.xy.XYDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.xy.XYDataset dataset) {
        org.jfree.data.xy.XYDataset existing = getDataset(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public int indexOf(org.jfree.data.xy.XYDataset dataset) {
        int result = -1;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (dataset == this.datasets.get(i)) {
                result = i;
                break;
            }
        }
        return result;
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(0, renderer);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.xy.XYItemRenderer existing = getRenderer(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.datasetRenderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.datasetRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder() {
        return this.seriesRenderingOrder;
    }

    public void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.seriesRenderingOrder = order;
        fireChangeEvent();
    }

    public int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset dataset) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
                if (result == null) {
                    result = getRenderer();
                }
                break;
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isDomainZeroBaselineVisible() {
        return this.domainZeroBaselineVisible;
    }

    public void setDomainZeroBaselineVisible(boolean visible) {
        this.domainZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainZeroBaselineStroke() {
        return this.domainZeroBaselineStroke;
    }

    public void setDomainZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainZeroBaselinePaint() {
        return this.domainZeroBaselinePaint;
    }

    public void setDomainZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeZeroBaselineVisible() {
        return this.rangeZeroBaselineVisible;
    }

    public void setRangeZeroBaselineVisible(boolean visible) {
        this.rangeZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getRangeZeroBaselineStroke() {
        return this.rangeZeroBaselineStroke;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeZeroBaselinePaint() {
        return this.rangeZeroBaselinePaint;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainTickBandPaint() {
        return this.domainTickBandPaint;
    }

    public void setDomainTickBandPaint(java.awt.Paint paint) {
        this.domainTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeTickBandPaint() {
        return this.rangeTickBandPaint;
    }

    public void setRangeTickBandPaint(java.awt.Paint paint) {
        this.rangeTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.geom.Point2D getQuadrantOrigin() {
        return this.quadrantOrigin;
    }

    public void setQuadrantOrigin(java.awt.geom.Point2D origin) {
        if (origin == null) {
            throw new java.lang.IllegalArgumentException("Null 'origin' argument.");
        }
        this.quadrantOrigin = origin;
        fireChangeEvent();
    }

    public java.awt.Paint getQuadrantPaint(int index) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        return this.quadrantPaint[index];
    }

    public void setQuadrantPaint(int index, java.awt.Paint paint) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        this.quadrantPaint[index] = paint;
        fireChangeEvent();
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue",org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlineStroke",org.jfree.chart.plot.XYPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint",org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke",org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairValue",org.jfree.chart.plot.XYPlot.this.domainCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxisLocations",org.jfree.chart.plot.XYPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.localizationResources",org.jfree.chart.plot.XYPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.datasets",org.jfree.chart.plot.XYPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder",org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible",org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.annotations",org.jfree.chart.plot.XYPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.fixedLegendItems",org.jfree.chart.plot.XYPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxisLocations",org.jfree.chart.plot.XYPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder",org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantPaint",org.jfree.chart.plot.XYPlot.this.quadrantPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.renderers",org.jfree.chart.plot.XYPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinePaint",org.jfree.chart.plot.XYPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.weight",org.jfree.chart.plot.XYPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint",org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxes",org.jfree.chart.plot.XYPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.axisOffset",org.jfree.chart.plot.XYPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainTickBandPaint",org.jfree.chart.plot.XYPlot.this.domainTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("layer == org.jfree.chart.util.Layer.FOREGROUND",layer == org.jfree.chart.util.Layer.FOREGROUND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint",org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxes",org.jfree.chart.plot.XYPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.orientation",org.jfree.chart.plot.XYPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantOrigin",org.jfree.chart.plot.XYPlot.this.quadrantOrigin);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible",org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke",org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
        }
        if (runtimeAngelicValue) if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public java.util.List getAnnotations() {
        return new java.util.ArrayList(this.annotations);
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateDomainAxisSpace(g2, plotArea, space);
        space = calculateRangeAxisSpace(g2, plotArea, space);
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (info != null) {
            info.setPlotArea(area);
        }
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        if (info != null) {
            info.setDataArea(dataArea);
        }
        drawBackground(g2, dataArea);
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, info);
        org.jfree.chart.plot.PlotOrientation orient = getOrientation();
        if ((anchor != null) && (!dataArea.contains(anchor))) {
            anchor = null;
        }
        org.jfree.chart.plot.CrosshairState crosshairState = new org.jfree.chart.plot.CrosshairState();
        crosshairState.setCrosshairDistance(java.lang.Double.POSITIVE_INFINITY);
        crosshairState.setAnchor(anchor);
        crosshairState.setAnchorX(java.lang.Double.NaN);
        crosshairState.setAnchorY(java.lang.Double.NaN);
        if (anchor != null) {
            org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxis();
            if (domainAxis != null) {
                double x;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge());
                } else {
                    x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge());
                }
                crosshairState.setAnchorX(x);
            }
            org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxis();
            if (rangeAxis != null) {
                double y;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge());
                } else {
                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge());
                }
                crosshairState.setAnchorY(y);
            }
        }
        crosshairState.setCrosshairX(getDomainCrosshairValue());
        crosshairState.setCrosshairY(getRangeCrosshairValue());
        java.awt.Shape originalClip = g2.getClip();
        java.awt.Composite originalComposite = g2.getComposite();
        g2.clip(dataArea);
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.axis.AxisState domainAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getDomainAxis())));
        if (domainAxisState == null) {
            if (parentState != null) {
                domainAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getDomainAxis())));
            }
        }
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (domainAxisState != null) {
            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());
        }
        if (rangeAxisState != null) {
            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());
        }
        if (domainAxisState != null) {
            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());
            drawZeroDomainBaseline(g2, dataArea);
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
            drawZeroRangeBaseline(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                }
            }
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
            }
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                }
            }
        } else
            if (order == org.jfree.chart.plot.DatasetRenderingOrder.REVERSE) {
                int rendererCount = this.renderers.size();
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                    }
                }
                for (int i = getDatasetCount() - 1; i >= 0; i--) {
                    foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
                }
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                    }
                }
            }

        int xAxisIndex = crosshairState.getDomainAxisIndex();
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis(xAxisIndex);
        org.jfree.chart.util.RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);
        if ((!this.domainCrosshairLockedOnData) && (anchor != null)) {
            double xx;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);
            } else {
                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);
            }
            crosshairState.setCrosshairX(xx);
        }
        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);
        if (isDomainCrosshairVisible()) {
            double x = getDomainCrosshairValue();
            java.awt.Paint paint = getDomainCrosshairPaint();
            java.awt.Stroke stroke = getDomainCrosshairStroke();
            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);
        }
        int yAxisIndex = crosshairState.getRangeAxisIndex();
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(yAxisIndex);
        org.jfree.chart.util.RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);
        if ((!this.rangeCrosshairLockedOnData) && (anchor != null)) {
            double yy;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);
            } else {
                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);
            }
            crosshairState.setCrosshairY(yy);
        }
        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);
        if (isRangeCrosshairVisible()) {
            double y = getRangeCrosshairValue();
            java.awt.Paint paint = getRangeCrosshairPaint();
            java.awt.Stroke stroke = getRangeCrosshairStroke();
            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);
        }
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, info);
        g2.setClip(originalClip);
        g2.setComposite(originalComposite);
        drawOutline(g2, dataArea);
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawQuadrants(g2, area);
        drawBackgroundImage(g2, area);
    }

    protected void drawQuadrants(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        boolean somethingToDraw = false;
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
        double x = xAxis.getRange().constrain(this.quadrantOrigin.getX());
        double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge());
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
        double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());
        double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge());
        double xmin = xAxis.getLowerBound();
        double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());
        double xmax = xAxis.getUpperBound();
        double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge());
        double ymin = yAxis.getLowerBound();
        double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge());
        double ymax = yAxis.getUpperBound();
        double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge());
        java.awt.geom.Rectangle2D[] r = new java.awt.geom.Rectangle2D[]{ null, null, null, null };
        if (this.quadrantPaint[0] != null) {
            if ((x > xmin) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[1] != null) {
            if ((x < xmax) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[2] != null) {
            if ((x > xmin) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[3] != null) {
            if ((x < xmax) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (somethingToDraw) {
            java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getBackgroundAlpha()));
            for (int i = 0; i < 4; i++) {
                if ((this.quadrantPaint[i] != null) && (r[i] != null)) {
                    g2.setPaint(this.quadrantPaint[i]);
                    g2.fill(r[i]);
                }
            }
            g2.setComposite(originalComposite);
        }
    }

    public void drawDomainTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getDomainTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            double previous = xAxis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = xAxis.getUpperBound();
            if (fillBand) {
                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end);
            }
        }
    }

    public void drawRangeTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getRangeTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            double previous = axis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = axis.getUpperBound();
            if (fillBand) {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end);
            }
        }
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
            if (axis != null) {
                axisCollection.add(axis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info, org.jfree.chart.plot.CrosshairState crosshairState) {
        boolean foundData = false;
        org.jfree.data.xy.XYDataset dataset = getDataset(index);
        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(dataset)) {
            foundData = true;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxisForDataset(index);
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxisForDataset(index);
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(index);
            if (renderer == null) {
                renderer = getRenderer();
                if (renderer == null) {
                    return foundData;
                }
            }
            org.jfree.chart.renderer.xy.XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info);
            int passCount = renderer.getPassCount();
            org.jfree.chart.plot.SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder();
            if (seriesOrder == org.jfree.chart.plot.SeriesRenderingOrder.REVERSE) {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = seriesCount - 1; series >= 0; series--) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (lastItem == (-1)) {
                            continue;
                        }
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            } else {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = 0; series < seriesCount; series++) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            }
        }
        return foundData;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getDomainAxis(axisIndex.intValue());
        } else {
            valueAxis = getDomainAxis(0);
        }
        return valueAxis;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getRangeAxis(axisIndex.intValue());
        } else {
            valueAxis = getRangeAxis(0);
        }
        return valueAxis;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isDomainGridlinesVisible()) {
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke);
            } 
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            if (axis != null) {
                java.util.Iterator iterator = ticks.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                    if ((tick.getValue() != 0.0) || (!isRangeZeroBaselineVisible())) {
                        getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke);
                    }
                } 
            }
        }
    }

    protected void drawZeroDomainBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isDomainZeroBaselineVisible()) {
            org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer();
            r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke);
        }
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isRangeZeroBaselineVisible()) {
            getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = this.annotations.iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    protected void drawHorizontalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getDomainAxis();
        }
        if (axis.getRange().contains(value)) {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawVerticalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getDomainAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getRangeAxis();
        }
        if (axis.getRange().contains(value)) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            org.jfree.chart.axis.ValueAxis da = getDomainAxis();
            if (da != null) {
                double hvalue = da.java2DToValue(x, info.getDataArea(), getDomainAxisEdge());
                setDomainCrosshairValue(hvalue);
            }
            org.jfree.chart.axis.ValueAxis ra = getRangeAxis();
            if (ra != null) {
                double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge());
                setRangeCrosshairValue(vvalue);
            }
        }
    }

    private java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    private java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.domainAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getDomainAxisIndex(axis);
            }
        }
        return result;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        boolean isDomainAxis = true;
        int domainIndex = getDomainAxisIndex(axis);
        if (domainIndex >= 0) {
            isDomainAxis = true;
            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new java.lang.Integer(domainIndex)));
        }
        int rangeIndex = getRangeAxisIndex(axis);
        if (rangeIndex >= 0) {
            isDomainAxis = false;
            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new java.lang.Integer(rangeIndex)));
        }
        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataset d = ((org.jfree.data.xy.XYDataset) (iterator.next()));
            if (d != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRendererForDataset(d);
                if (isDomainAxis) {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findDomainBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findDomainBounds(d));
                    }
                } else {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findRangeBounds(d));
                    }
                }
            }
        } 
        return result;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        configureDomainAxes();
        configureRangeAxes();
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        fireChangeEvent();
    }

    public boolean isDomainCrosshairVisible() {
        return this.domainCrosshairVisible;
    }

    public void setDomainCrosshairVisible(boolean flag) {
        if (this.domainCrosshairVisible != flag) {
            this.domainCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isDomainCrosshairLockedOnData() {
        return this.domainCrosshairLockedOnData;
    }

    public void setDomainCrosshairLockedOnData(boolean flag) {
        if (this.domainCrosshairLockedOnData != flag) {
            this.domainCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getDomainCrosshairValue() {
        return this.domainCrosshairValue;
    }

    public void setDomainCrosshairValue(double value) {
        setDomainCrosshairValue(value, true);
    }

    public void setDomainCrosshairValue(double value, boolean notify) {
        this.domainCrosshairValue = value;
        if (isDomainCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainCrosshairStroke() {
        return this.domainCrosshairStroke;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainCrosshairPaint() {
        return this.domainCrosshairPaint;
    }

    public void setDomainCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainCrosshairPaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomDomainAxes(factor, info, source, false);
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                if (useAnchor) {
                    double sourceX = source.getX();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceX = source.getY();
                    }
                    double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge());
                    domainAxis.resizeRange(factor, anchorX);
                } else {
                    domainAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                domainAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, info, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public boolean isDomainZoomable() {
        return true;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public int getSeriesCount() {
        int result = 0;
        org.jfree.data.xy.XYDataset dataset = getDataset();
        if (dataset != null) {
            result = dataset.getSeriesCount();
        }
        return result;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.fixedLegendItems != null) {
            return this.fixedLegendItems;
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int count = this.datasets.size();
        for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
            org.jfree.data.xy.XYDataset dataset = getDataset(datasetIndex);
            if (dataset != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(datasetIndex);
                if (renderer == null) {
                    renderer = getRenderer(0);
                }
                if (renderer != null) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int i = 0; i < seriesCount; i++) {
                        if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.XYPlot)) {
            return false;
        }
        org.jfree.chart.plot.XYPlot that = ((org.jfree.chart.plot.XYPlot) (obj));
        if (this.weight != that.weight) {
            return false;
        }
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
            return false;
        }
        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
            return false;
        }
        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
            return false;
        }
        if (this.domainCrosshairValue != that.domainCrosshairValue) {
            return false;
        }
        if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
            return false;
        }
        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
            return false;
        }
        for (int i = 0; i < 4; i++) {
            if (!org.jfree.chart.util.PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
                return false;
            }
        }
        return super.equals(obj);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.XYPlot clone = ((org.jfree.chart.plot.XYPlot) (super.clone()));
        clone.domainAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.domainAxes)));
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.domainAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxes)));
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.rangeAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxisLocations)));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.datasets)));
        for (int i = 0; i < clone.datasets.size(); ++i) {
            org.jfree.data.xy.XYDataset d = getDataset(i);
            if (d != null) {
                d.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = new java.util.TreeMap();
        clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
        clone.datasetToRangeAxisMap = new java.util.TreeMap();
        clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
        clone.renderers = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.renderers)));
        for (int i = 0; i < this.renderers.size(); i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer2 = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer2 instanceof org.jfree.chart.util.PublicCloneable) {
                org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (renderer2));
                clone.renderers.set(i, pc.clone());
            }
        }
        clone.foregroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundDomainMarkers)));
        clone.backgroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundDomainMarkers)));
        clone.foregroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundRangeMarkers)));
        clone.backgroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundRangeMarkers)));
        clone.annotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.annotations)));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        clone.quadrantOrigin = ((java.awt.geom.Point2D) (org.jfree.chart.util.ObjectUtilities.clone(this.quadrantOrigin)));
        clone.quadrantPaint = ((java.awt.Paint[]) (this.quadrantPaint.clone()));
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePoint2D(this.quadrantOrigin, stream);
        for (int i = 0; i < 4; i++) {
            org.jfree.chart.util.SerialUtilities.writePaint(this.quadrantPaint[i], stream);
        }
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.quadrantOrigin = org.jfree.chart.util.SerialUtilities.readPoint2D(stream);
        this.quadrantPaint = new java.awt.Paint[4];
        for (int i = 0; i < 4; i++) {
            this.quadrantPaint[i] = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        }
        this.domainZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        int domainAxisCount = this.domainAxes.size();
        for (int i = 0; i < domainAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int rangeAxisCount = this.rangeAxes.size();
        for (int i = 0; i < rangeAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:34:29.548 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:34:29.555 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:34:39.994 [pool-6-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:34:39.996 [pool-6-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:34:39.997 [pool-6-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2285.
11:34:39.998 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
11:34:39.999 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2265 which is executed by 1 tests
-1690918013
11:34:48.366 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
11:34:48.384 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2248 which is executed by 1 tests
-1690918013
11:34:56.451 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
11:34:56.452 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2232 which is executed by 1 tests
-1690918013
11:35:03.007 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
11:35:03.016 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2529 which is executed by 1 tests
-1690918013
11:35:10.327 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
11:35:10.328 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2522 which is executed by 1 tests
-1690918013
11:35:17.618 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:35:28.804 [pool-12-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
XYPlot.java:1100: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: XYPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:35:29.028 [pool-12-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class XYPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = 7044148245716569264L;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList renderers;

    private java.util.Map datasetToDomainAxisMap;

    private java.util.Map datasetToRangeAxisMap;

    private transient java.awt.geom.Point2D quadrantOrigin = new java.awt.geom.Point2D.Double(0.0, 0.0);

    private transient java.awt.Paint[] quadrantPaint = new java.awt.Paint[]{ null, null, null, null };

    private boolean domainGridlinesVisible;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private boolean domainZeroBaselineVisible;

    private transient java.awt.Stroke domainZeroBaselineStroke;

    private transient java.awt.Paint domainZeroBaselinePaint;

    private boolean rangeZeroBaselineVisible;

    private transient java.awt.Stroke rangeZeroBaselineStroke;

    private transient java.awt.Paint rangeZeroBaselinePaint;

    private boolean domainCrosshairVisible;

    private double domainCrosshairValue;

    private transient java.awt.Stroke domainCrosshairStroke;

    private transient java.awt.Paint domainCrosshairPaint;

    private boolean domainCrosshairLockedOnData = true;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private transient java.awt.Paint domainTickBandPaint;

    private transient java.awt.Paint rangeTickBandPaint;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder = org.jfree.chart.plot.SeriesRenderingOrder.REVERSE;

    private int weight;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public XYPlot() {
        this(null, null, null, null);
    }

    public XYPlot(org.jfree.data.xy.XYDataset dataset, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.weight = 1;
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new java.util.TreeMap();
        this.datasetToRangeAxisMap = new java.util.TreeMap();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.domainAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        this.rangeAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = true;
        this.domainGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.domainZeroBaselineVisible = false;
        this.domainZeroBaselinePaint = java.awt.Color.black;
        this.domainZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.rangeGridlinesVisible = true;
        this.rangeGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeZeroBaselineVisible = false;
        this.rangeZeroBaselinePaint = java.awt.Color.black;
        this.rangeZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.domainCrosshairVisible = false;
        this.domainCrosshairValue = 0.0;
        this.domainCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.domainCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.rangeCrosshairVisible = false;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.XYPlot.localizationResources.getString("XY_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (orientation != this.orientation) {
            this.orientation = orientation;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getDomainAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(0)));
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation());
        }
        return result;
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge());
        }
        return result;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        if (axis != null) {
            axis.setPlot(this);
        }
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis();
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.rangeAxes.set(0, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(0)));
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(0, location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation());
        }
        return result;
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge());
        }
        return result;
    }

    public org.jfree.data.xy.XYDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.xy.XYDataset getDataset(int index) {
        org.jfree.data.xy.XYDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.xy.XYDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.xy.XYDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.xy.XYDataset dataset) {
        org.jfree.data.xy.XYDataset existing = getDataset(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public int indexOf(org.jfree.data.xy.XYDataset dataset) {
        int result = -1;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (dataset == this.datasets.get(i)) {
                result = i;
                break;
            }
        }
        return result;
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(0, renderer);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.xy.XYItemRenderer existing = getRenderer(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.datasetRenderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.datasetRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder() {
        return this.seriesRenderingOrder;
    }

    public void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.seriesRenderingOrder = order;
        fireChangeEvent();
    }

    public int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset dataset) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
                if (result == null) {
                    result = getRenderer();
                }
                break;
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isDomainZeroBaselineVisible() {
        return this.domainZeroBaselineVisible;
    }

    public void setDomainZeroBaselineVisible(boolean visible) {
        this.domainZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainZeroBaselineStroke() {
        return this.domainZeroBaselineStroke;
    }

    public void setDomainZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainZeroBaselinePaint() {
        return this.domainZeroBaselinePaint;
    }

    public void setDomainZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeZeroBaselineVisible() {
        return this.rangeZeroBaselineVisible;
    }

    public void setRangeZeroBaselineVisible(boolean visible) {
        this.rangeZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getRangeZeroBaselineStroke() {
        return this.rangeZeroBaselineStroke;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeZeroBaselinePaint() {
        return this.rangeZeroBaselinePaint;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainTickBandPaint() {
        return this.domainTickBandPaint;
    }

    public void setDomainTickBandPaint(java.awt.Paint paint) {
        this.domainTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeTickBandPaint() {
        return this.rangeTickBandPaint;
    }

    public void setRangeTickBandPaint(java.awt.Paint paint) {
        this.rangeTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.geom.Point2D getQuadrantOrigin() {
        return this.quadrantOrigin;
    }

    public void setQuadrantOrigin(java.awt.geom.Point2D origin) {
        if (origin == null) {
            throw new java.lang.IllegalArgumentException("Null 'origin' argument.");
        }
        this.quadrantOrigin = origin;
        fireChangeEvent();
    }

    public java.awt.Paint getQuadrantPaint(int index) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        return this.quadrantPaint[index];
    }

    public void setQuadrantPaint(int index, java.awt.Paint paint) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        this.quadrantPaint[index] = paint;
        fireChangeEvent();
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue",org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlineStroke",org.jfree.chart.plot.XYPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint",org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke",org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairValue",org.jfree.chart.plot.XYPlot.this.domainCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxisLocations",org.jfree.chart.plot.XYPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.localizationResources",org.jfree.chart.plot.XYPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.datasets",org.jfree.chart.plot.XYPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder",org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible",org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.annotations",org.jfree.chart.plot.XYPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.fixedLegendItems",org.jfree.chart.plot.XYPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxisLocations",org.jfree.chart.plot.XYPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder",org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantPaint",org.jfree.chart.plot.XYPlot.this.quadrantPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.renderers",org.jfree.chart.plot.XYPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinePaint",org.jfree.chart.plot.XYPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.weight",org.jfree.chart.plot.XYPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint",org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxes",org.jfree.chart.plot.XYPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.axisOffset",org.jfree.chart.plot.XYPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainTickBandPaint",org.jfree.chart.plot.XYPlot.this.domainTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint",org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxes",org.jfree.chart.plot.XYPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.orientation",org.jfree.chart.plot.XYPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantOrigin",org.jfree.chart.plot.XYPlot.this.quadrantOrigin);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible",org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke",org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
            }
            if (runtimeAngelicValue)
                markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));

        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public java.util.List getAnnotations() {
        return new java.util.ArrayList(this.annotations);
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateDomainAxisSpace(g2, plotArea, space);
        space = calculateRangeAxisSpace(g2, plotArea, space);
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (info != null) {
            info.setPlotArea(area);
        }
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        if (info != null) {
            info.setDataArea(dataArea);
        }
        drawBackground(g2, dataArea);
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, info);
        org.jfree.chart.plot.PlotOrientation orient = getOrientation();
        if ((anchor != null) && (!dataArea.contains(anchor))) {
            anchor = null;
        }
        org.jfree.chart.plot.CrosshairState crosshairState = new org.jfree.chart.plot.CrosshairState();
        crosshairState.setCrosshairDistance(java.lang.Double.POSITIVE_INFINITY);
        crosshairState.setAnchor(anchor);
        crosshairState.setAnchorX(java.lang.Double.NaN);
        crosshairState.setAnchorY(java.lang.Double.NaN);
        if (anchor != null) {
            org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxis();
            if (domainAxis != null) {
                double x;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge());
                } else {
                    x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge());
                }
                crosshairState.setAnchorX(x);
            }
            org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxis();
            if (rangeAxis != null) {
                double y;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge());
                } else {
                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge());
                }
                crosshairState.setAnchorY(y);
            }
        }
        crosshairState.setCrosshairX(getDomainCrosshairValue());
        crosshairState.setCrosshairY(getRangeCrosshairValue());
        java.awt.Shape originalClip = g2.getClip();
        java.awt.Composite originalComposite = g2.getComposite();
        g2.clip(dataArea);
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.axis.AxisState domainAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getDomainAxis())));
        if (domainAxisState == null) {
            if (parentState != null) {
                domainAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getDomainAxis())));
            }
        }
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (domainAxisState != null) {
            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());
        }
        if (rangeAxisState != null) {
            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());
        }
        if (domainAxisState != null) {
            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());
            drawZeroDomainBaseline(g2, dataArea);
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
            drawZeroRangeBaseline(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                }
            }
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
            }
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                }
            }
        } else
            if (order == org.jfree.chart.plot.DatasetRenderingOrder.REVERSE) {
                int rendererCount = this.renderers.size();
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                    }
                }
                for (int i = getDatasetCount() - 1; i >= 0; i--) {
                    foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
                }
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                    }
                }
            }

        int xAxisIndex = crosshairState.getDomainAxisIndex();
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis(xAxisIndex);
        org.jfree.chart.util.RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);
        if ((!this.domainCrosshairLockedOnData) && (anchor != null)) {
            double xx;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);
            } else {
                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);
            }
            crosshairState.setCrosshairX(xx);
        }
        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);
        if (isDomainCrosshairVisible()) {
            double x = getDomainCrosshairValue();
            java.awt.Paint paint = getDomainCrosshairPaint();
            java.awt.Stroke stroke = getDomainCrosshairStroke();
            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);
        }
        int yAxisIndex = crosshairState.getRangeAxisIndex();
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(yAxisIndex);
        org.jfree.chart.util.RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);
        if ((!this.rangeCrosshairLockedOnData) && (anchor != null)) {
            double yy;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);
            } else {
                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);
            }
            crosshairState.setCrosshairY(yy);
        }
        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);
        if (isRangeCrosshairVisible()) {
            double y = getRangeCrosshairValue();
            java.awt.Paint paint = getRangeCrosshairPaint();
            java.awt.Stroke stroke = getRangeCrosshairStroke();
            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);
        }
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, info);
        g2.setClip(originalClip);
        g2.setComposite(originalComposite);
        drawOutline(g2, dataArea);
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawQuadrants(g2, area);
        drawBackgroundImage(g2, area);
    }

    protected void drawQuadrants(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        boolean somethingToDraw = false;
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
        double x = xAxis.getRange().constrain(this.quadrantOrigin.getX());
        double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge());
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
        double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());
        double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge());
        double xmin = xAxis.getLowerBound();
        double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());
        double xmax = xAxis.getUpperBound();
        double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge());
        double ymin = yAxis.getLowerBound();
        double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge());
        double ymax = yAxis.getUpperBound();
        double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge());
        java.awt.geom.Rectangle2D[] r = new java.awt.geom.Rectangle2D[]{ null, null, null, null };
        if (this.quadrantPaint[0] != null) {
            if ((x > xmin) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[1] != null) {
            if ((x < xmax) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[2] != null) {
            if ((x > xmin) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[3] != null) {
            if ((x < xmax) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (somethingToDraw) {
            java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getBackgroundAlpha()));
            for (int i = 0; i < 4; i++) {
                if ((this.quadrantPaint[i] != null) && (r[i] != null)) {
                    g2.setPaint(this.quadrantPaint[i]);
                    g2.fill(r[i]);
                }
            }
            g2.setComposite(originalComposite);
        }
    }

    public void drawDomainTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getDomainTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            double previous = xAxis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = xAxis.getUpperBound();
            if (fillBand) {
                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end);
            }
        }
    }

    public void drawRangeTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getRangeTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            double previous = axis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = axis.getUpperBound();
            if (fillBand) {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end);
            }
        }
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
            if (axis != null) {
                axisCollection.add(axis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info, org.jfree.chart.plot.CrosshairState crosshairState) {
        boolean foundData = false;
        org.jfree.data.xy.XYDataset dataset = getDataset(index);
        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(dataset)) {
            foundData = true;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxisForDataset(index);
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxisForDataset(index);
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(index);
            if (renderer == null) {
                renderer = getRenderer();
                if (renderer == null) {
                    return foundData;
                }
            }
            org.jfree.chart.renderer.xy.XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info);
            int passCount = renderer.getPassCount();
            org.jfree.chart.plot.SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder();
            if (seriesOrder == org.jfree.chart.plot.SeriesRenderingOrder.REVERSE) {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = seriesCount - 1; series >= 0; series--) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (lastItem == (-1)) {
                            continue;
                        }
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            } else {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = 0; series < seriesCount; series++) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            }
        }
        return foundData;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getDomainAxis(axisIndex.intValue());
        } else {
            valueAxis = getDomainAxis(0);
        }
        return valueAxis;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getRangeAxis(axisIndex.intValue());
        } else {
            valueAxis = getRangeAxis(0);
        }
        return valueAxis;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isDomainGridlinesVisible()) {
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke);
            } 
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            if (axis != null) {
                java.util.Iterator iterator = ticks.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                    if ((tick.getValue() != 0.0) || (!isRangeZeroBaselineVisible())) {
                        getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke);
                    }
                } 
            }
        }
    }

    protected void drawZeroDomainBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isDomainZeroBaselineVisible()) {
            org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer();
            r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke);
        }
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isRangeZeroBaselineVisible()) {
            getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = this.annotations.iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    protected void drawHorizontalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getDomainAxis();
        }
        if (axis.getRange().contains(value)) {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawVerticalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getDomainAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getRangeAxis();
        }
        if (axis.getRange().contains(value)) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            org.jfree.chart.axis.ValueAxis da = getDomainAxis();
            if (da != null) {
                double hvalue = da.java2DToValue(x, info.getDataArea(), getDomainAxisEdge());
                setDomainCrosshairValue(hvalue);
            }
            org.jfree.chart.axis.ValueAxis ra = getRangeAxis();
            if (ra != null) {
                double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge());
                setRangeCrosshairValue(vvalue);
            }
        }
    }

    private java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    private java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.domainAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getDomainAxisIndex(axis);
            }
        }
        return result;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        boolean isDomainAxis = true;
        int domainIndex = getDomainAxisIndex(axis);
        if (domainIndex >= 0) {
            isDomainAxis = true;
            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new java.lang.Integer(domainIndex)));
        }
        int rangeIndex = getRangeAxisIndex(axis);
        if (rangeIndex >= 0) {
            isDomainAxis = false;
            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new java.lang.Integer(rangeIndex)));
        }
        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataset d = ((org.jfree.data.xy.XYDataset) (iterator.next()));
            if (d != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRendererForDataset(d);
                if (isDomainAxis) {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findDomainBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findDomainBounds(d));
                    }
                } else {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findRangeBounds(d));
                    }
                }
            }
        } 
        return result;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        configureDomainAxes();
        configureRangeAxes();
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        fireChangeEvent();
    }

    public boolean isDomainCrosshairVisible() {
        return this.domainCrosshairVisible;
    }

    public void setDomainCrosshairVisible(boolean flag) {
        if (this.domainCrosshairVisible != flag) {
            this.domainCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isDomainCrosshairLockedOnData() {
        return this.domainCrosshairLockedOnData;
    }

    public void setDomainCrosshairLockedOnData(boolean flag) {
        if (this.domainCrosshairLockedOnData != flag) {
            this.domainCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getDomainCrosshairValue() {
        return this.domainCrosshairValue;
    }

    public void setDomainCrosshairValue(double value) {
        setDomainCrosshairValue(value, true);
    }

    public void setDomainCrosshairValue(double value, boolean notify) {
        this.domainCrosshairValue = value;
        if (isDomainCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainCrosshairStroke() {
        return this.domainCrosshairStroke;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainCrosshairPaint() {
        return this.domainCrosshairPaint;
    }

    public void setDomainCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainCrosshairPaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomDomainAxes(factor, info, source, false);
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                if (useAnchor) {
                    double sourceX = source.getX();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceX = source.getY();
                    }
                    double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge());
                    domainAxis.resizeRange(factor, anchorX);
                } else {
                    domainAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                domainAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, info, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public boolean isDomainZoomable() {
        return true;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public int getSeriesCount() {
        int result = 0;
        org.jfree.data.xy.XYDataset dataset = getDataset();
        if (dataset != null) {
            result = dataset.getSeriesCount();
        }
        return result;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.fixedLegendItems != null) {
            return this.fixedLegendItems;
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int count = this.datasets.size();
        for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
            org.jfree.data.xy.XYDataset dataset = getDataset(datasetIndex);
            if (dataset != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(datasetIndex);
                if (renderer == null) {
                    renderer = getRenderer(0);
                }
                if (renderer != null) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int i = 0; i < seriesCount; i++) {
                        if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.XYPlot)) {
            return false;
        }
        org.jfree.chart.plot.XYPlot that = ((org.jfree.chart.plot.XYPlot) (obj));
        if (this.weight != that.weight) {
            return false;
        }
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
            return false;
        }
        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
            return false;
        }
        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
            return false;
        }
        if (this.domainCrosshairValue != that.domainCrosshairValue) {
            return false;
        }
        if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
            return false;
        }
        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
            return false;
        }
        for (int i = 0; i < 4; i++) {
            if (!org.jfree.chart.util.PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
                return false;
            }
        }
        return super.equals(obj);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.XYPlot clone = ((org.jfree.chart.plot.XYPlot) (super.clone()));
        clone.domainAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.domainAxes)));
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.domainAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxes)));
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.rangeAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxisLocations)));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.datasets)));
        for (int i = 0; i < clone.datasets.size(); ++i) {
            org.jfree.data.xy.XYDataset d = getDataset(i);
            if (d != null) {
                d.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = new java.util.TreeMap();
        clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
        clone.datasetToRangeAxisMap = new java.util.TreeMap();
        clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
        clone.renderers = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.renderers)));
        for (int i = 0; i < this.renderers.size(); i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer2 = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer2 instanceof org.jfree.chart.util.PublicCloneable) {
                org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (renderer2));
                clone.renderers.set(i, pc.clone());
            }
        }
        clone.foregroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundDomainMarkers)));
        clone.backgroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundDomainMarkers)));
        clone.foregroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundRangeMarkers)));
        clone.backgroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundRangeMarkers)));
        clone.annotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.annotations)));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        clone.quadrantOrigin = ((java.awt.geom.Point2D) (org.jfree.chart.util.ObjectUtilities.clone(this.quadrantOrigin)));
        clone.quadrantPaint = ((java.awt.Paint[]) (this.quadrantPaint.clone()));
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePoint2D(this.quadrantOrigin, stream);
        for (int i = 0; i < 4; i++) {
            org.jfree.chart.util.SerialUtilities.writePaint(this.quadrantPaint[i], stream);
        }
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.quadrantOrigin = org.jfree.chart.util.SerialUtilities.readPoint2D(stream);
        this.quadrantPaint = new java.awt.Paint[4];
        for (int i = 0; i < 4; i++) {
            this.quadrantPaint[i] = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        }
        this.domainZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        int domainAxisCount = this.domainAxes.size();
        for (int i = 0; i < domainAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int rangeAxisCount = this.rangeAxes.size();
        for (int i = 0; i < rangeAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:35:29.043 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:35:29.044 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
11:35:29.045 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2521 which is executed by 1 tests
-1690918013
11:35:36.745 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:35:45.017 [pool-14-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
XYPlot.java:1099: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: XYPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:35:45.144 [pool-14-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class XYPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = 7044148245716569264L;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList renderers;

    private java.util.Map datasetToDomainAxisMap;

    private java.util.Map datasetToRangeAxisMap;

    private transient java.awt.geom.Point2D quadrantOrigin = new java.awt.geom.Point2D.Double(0.0, 0.0);

    private transient java.awt.Paint[] quadrantPaint = new java.awt.Paint[]{ null, null, null, null };

    private boolean domainGridlinesVisible;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private boolean domainZeroBaselineVisible;

    private transient java.awt.Stroke domainZeroBaselineStroke;

    private transient java.awt.Paint domainZeroBaselinePaint;

    private boolean rangeZeroBaselineVisible;

    private transient java.awt.Stroke rangeZeroBaselineStroke;

    private transient java.awt.Paint rangeZeroBaselinePaint;

    private boolean domainCrosshairVisible;

    private double domainCrosshairValue;

    private transient java.awt.Stroke domainCrosshairStroke;

    private transient java.awt.Paint domainCrosshairPaint;

    private boolean domainCrosshairLockedOnData = true;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private transient java.awt.Paint domainTickBandPaint;

    private transient java.awt.Paint rangeTickBandPaint;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.plot.SeriesRenderingOrder seriesRenderingOrder = org.jfree.chart.plot.SeriesRenderingOrder.REVERSE;

    private int weight;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public XYPlot() {
        this(null, null, null, null);
    }

    public XYPlot(org.jfree.data.xy.XYDataset dataset, org.jfree.chart.axis.ValueAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.weight = 1;
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new java.util.TreeMap();
        this.datasetToRangeAxisMap = new java.util.TreeMap();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.domainAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        this.rangeAxisLocations.set(0, org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT);
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = true;
        this.domainGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.domainZeroBaselineVisible = false;
        this.domainZeroBaselinePaint = java.awt.Color.black;
        this.domainZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.rangeGridlinesVisible = true;
        this.rangeGridlineStroke = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeZeroBaselineVisible = false;
        this.rangeZeroBaselinePaint = java.awt.Color.black;
        this.rangeZeroBaselineStroke = new java.awt.BasicStroke(0.5F);
        this.domainCrosshairVisible = false;
        this.domainCrosshairValue = 0.0;
        this.domainCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.domainCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.rangeCrosshairVisible = false;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.XYPlot.localizationResources.getString("XY_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        if (orientation != this.orientation) {
            this.orientation = orientation;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getDomainAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(0)));
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation());
        }
        return result;
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge());
        }
        return result;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        if (axis != null) {
            axis.setPlot(this);
        }
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis();
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.rangeAxes.set(0, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(0)));
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(0, location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot xy = ((org.jfree.chart.plot.XYPlot) (parent));
                result = xy.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = getRangeAxis(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation());
        }
        return result;
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge());
        }
        return result;
    }

    public org.jfree.data.xy.XYDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.xy.XYDataset getDataset(int index) {
        org.jfree.data.xy.XYDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.xy.XYDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.xy.XYDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.xy.XYDataset dataset) {
        org.jfree.data.xy.XYDataset existing = getDataset(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public int indexOf(org.jfree.data.xy.XYDataset dataset) {
        int result = -1;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (dataset == this.datasets.get(i)) {
                result = i;
                break;
            }
        }
        return result;
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.put(new java.lang.Integer(index), new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(0, renderer);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.xy.XYItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.xy.XYItemRenderer existing = getRenderer(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.datasetRenderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.datasetRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.plot.SeriesRenderingOrder getSeriesRenderingOrder() {
        return this.seriesRenderingOrder;
    }

    public void setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.seriesRenderingOrder = order;
        fireChangeEvent();
    }

    public int getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.renderer.xy.XYItemRenderer getRendererForDataset(org.jfree.data.xy.XYDataset dataset) {
        org.jfree.chart.renderer.xy.XYItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
                if (result == null) {
                    result = getRenderer();
                }
                break;
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isDomainZeroBaselineVisible() {
        return this.domainZeroBaselineVisible;
    }

    public void setDomainZeroBaselineVisible(boolean visible) {
        this.domainZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainZeroBaselineStroke() {
        return this.domainZeroBaselineStroke;
    }

    public void setDomainZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainZeroBaselinePaint() {
        return this.domainZeroBaselinePaint;
    }

    public void setDomainZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeZeroBaselineVisible() {
        return this.rangeZeroBaselineVisible;
    }

    public void setRangeZeroBaselineVisible(boolean visible) {
        this.rangeZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    public java.awt.Stroke getRangeZeroBaselineStroke() {
        return this.rangeZeroBaselineStroke;
    }

    public void setRangeZeroBaselineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeZeroBaselinePaint() {
        return this.rangeZeroBaselinePaint;
    }

    public void setRangeZeroBaselinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainTickBandPaint() {
        return this.domainTickBandPaint;
    }

    public void setDomainTickBandPaint(java.awt.Paint paint) {
        this.domainTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeTickBandPaint() {
        return this.rangeTickBandPaint;
    }

    public void setRangeTickBandPaint(java.awt.Paint paint) {
        this.rangeTickBandPaint = paint;
        fireChangeEvent();
    }

    public java.awt.geom.Point2D getQuadrantOrigin() {
        return this.quadrantOrigin;
    }

    public void setQuadrantOrigin(java.awt.geom.Point2D origin) {
        if (origin == null) {
            throw new java.lang.IllegalArgumentException("Null 'origin' argument.");
        }
        this.quadrantOrigin = origin;
        fireChangeEvent();
    }

    public java.awt.Paint getQuadrantPaint(int index) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        return this.quadrantPaint[index];
    }

    public void setQuadrantPaint(int index, java.awt.Paint paint) {
        if ((index < 0) || (index > 3)) {
            throw new java.lang.IllegalArgumentException(("The index value (" + index) + ") should be in the range 0 to 3.");
        }
        this.quadrantPaint[index] = paint;
        fireChangeEvent();
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue",org.jfree.chart.plot.XYPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.domainCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlineStroke",org.jfree.chart.plot.XYPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint",org.jfree.chart.plot.XYPlot.this.rangeTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke",org.jfree.chart.plot.XYPlot.this.domainCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairValue",org.jfree.chart.plot.XYPlot.this.domainCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.XYPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxisLocations",org.jfree.chart.plot.XYPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.XYPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.localizationResources",org.jfree.chart.plot.XYPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.datasets",org.jfree.chart.plot.XYPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder",org.jfree.chart.plot.XYPlot.this.seriesRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible",org.jfree.chart.plot.XYPlot.this.domainCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.annotations",org.jfree.chart.plot.XYPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.fixedLegendItems",org.jfree.chart.plot.XYPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.XYPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxisLocations",org.jfree.chart.plot.XYPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder",org.jfree.chart.plot.XYPlot.this.datasetRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantPaint",org.jfree.chart.plot.XYPlot.this.quadrantPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.XYPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.renderers",org.jfree.chart.plot.XYPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.XYPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.XYPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.XYPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.XYPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.XYPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinePaint",org.jfree.chart.plot.XYPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.weight",org.jfree.chart.plot.XYPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.domainZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint",org.jfree.chart.plot.XYPlot.this.domainCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeAxes",org.jfree.chart.plot.XYPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.axisOffset",org.jfree.chart.plot.XYPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainTickBandPaint",org.jfree.chart.plot.XYPlot.this.domainTickBandPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.XYPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("layer == org.jfree.chart.util.Layer.FOREGROUND",layer == org.jfree.chart.util.Layer.FOREGROUND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint",org.jfree.chart.plot.XYPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainAxes",org.jfree.chart.plot.XYPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.orientation",org.jfree.chart.plot.XYPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.quadrantOrigin",org.jfree.chart.plot.XYPlot.this.quadrantOrigin);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible",org.jfree.chart.plot.XYPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.XYPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible",org.jfree.chart.plot.XYPlot.this.rangeZeroBaselineVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke",org.jfree.chart.plot.XYPlot.this.domainZeroBaselineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke",org.jfree.chart.plot.XYPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
        }
        if (runtimeAngelicValue) if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.XYAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public java.util.List getAnnotations() {
        return new java.util.ArrayList(this.annotations);
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateDomainAxisSpace(g2, plotArea, space);
        space = calculateRangeAxisSpace(g2, plotArea, space);
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (axis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = axis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (info != null) {
            info.setPlotArea(area);
        }
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        if (info != null) {
            info.setDataArea(dataArea);
        }
        drawBackground(g2, dataArea);
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, info);
        org.jfree.chart.plot.PlotOrientation orient = getOrientation();
        if ((anchor != null) && (!dataArea.contains(anchor))) {
            anchor = null;
        }
        org.jfree.chart.plot.CrosshairState crosshairState = new org.jfree.chart.plot.CrosshairState();
        crosshairState.setCrosshairDistance(java.lang.Double.POSITIVE_INFINITY);
        crosshairState.setAnchor(anchor);
        crosshairState.setAnchorX(java.lang.Double.NaN);
        crosshairState.setAnchorY(java.lang.Double.NaN);
        if (anchor != null) {
            org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxis();
            if (domainAxis != null) {
                double x;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge());
                } else {
                    x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge());
                }
                crosshairState.setAnchorX(x);
            }
            org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxis();
            if (rangeAxis != null) {
                double y;
                if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge());
                } else {
                    y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge());
                }
                crosshairState.setAnchorY(y);
            }
        }
        crosshairState.setCrosshairX(getDomainCrosshairValue());
        crosshairState.setCrosshairY(getRangeCrosshairValue());
        java.awt.Shape originalClip = g2.getClip();
        java.awt.Composite originalComposite = g2.getComposite();
        g2.clip(dataArea);
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.axis.AxisState domainAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getDomainAxis())));
        if (domainAxisState == null) {
            if (parentState != null) {
                domainAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getDomainAxis())));
            }
        }
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (domainAxisState != null) {
            drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());
        }
        if (rangeAxisState != null) {
            drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());
        }
        if (domainAxisState != null) {
            drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());
            drawZeroDomainBaseline(g2, dataArea);
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
            drawZeroRangeBaseline(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int rendererCount = this.renderers.size();
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                }
            }
            for (int i = 0; i < getDatasetCount(); i++) {
                foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
            }
            for (int i = 0; i < rendererCount; i++) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                }
            }
        } else
            if (order == org.jfree.chart.plot.DatasetRenderingOrder.REVERSE) {
                int rendererCount = this.renderers.size();
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, info);
                    }
                }
                for (int i = getDatasetCount() - 1; i >= 0; i--) {
                    foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
                }
                for (int i = rendererCount - 1; i >= 0; i--) {
                    org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(i);
                    if (i >= getDatasetCount()) {
                        continue;
                    }
                    if (r != null) {
                        org.jfree.chart.axis.ValueAxis domainAxis = getDomainAxisForDataset(i);
                        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                        r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, info);
                    }
                }
            }

        int xAxisIndex = crosshairState.getDomainAxisIndex();
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis(xAxisIndex);
        org.jfree.chart.util.RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);
        if ((!this.domainCrosshairLockedOnData) && (anchor != null)) {
            double xx;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);
            } else {
                xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);
            }
            crosshairState.setCrosshairX(xx);
        }
        setDomainCrosshairValue(crosshairState.getCrosshairX(), false);
        if (isDomainCrosshairVisible()) {
            double x = getDomainCrosshairValue();
            java.awt.Paint paint = getDomainCrosshairPaint();
            java.awt.Stroke stroke = getDomainCrosshairStroke();
            drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);
        }
        int yAxisIndex = crosshairState.getRangeAxisIndex();
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(yAxisIndex);
        org.jfree.chart.util.RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);
        if ((!this.rangeCrosshairLockedOnData) && (anchor != null)) {
            double yy;
            if (orient == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);
            } else {
                yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);
            }
            crosshairState.setCrosshairY(yy);
        }
        setRangeCrosshairValue(crosshairState.getCrosshairY(), false);
        if (isRangeCrosshairVisible()) {
            double y = getRangeCrosshairValue();
            java.awt.Paint paint = getRangeCrosshairPaint();
            java.awt.Stroke stroke = getRangeCrosshairStroke();
            drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);
        }
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, info);
        g2.setClip(originalClip);
        g2.setComposite(originalComposite);
        drawOutline(g2, dataArea);
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawQuadrants(g2, area);
        drawBackgroundImage(g2, area);
    }

    protected void drawQuadrants(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        boolean somethingToDraw = false;
        org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
        double x = xAxis.getRange().constrain(this.quadrantOrigin.getX());
        double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge());
        org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
        double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());
        double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge());
        double xmin = xAxis.getLowerBound();
        double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());
        double xmax = xAxis.getUpperBound();
        double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge());
        double ymin = yAxis.getLowerBound();
        double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge());
        double ymax = yAxis.getUpperBound();
        double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge());
        java.awt.geom.Rectangle2D[] r = new java.awt.geom.Rectangle2D[]{ null, null, null, null };
        if (this.quadrantPaint[0] != null) {
            if ((x > xmin) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[0] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[1] != null) {
            if ((x < xmax) && (y < ymax)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymax, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymax), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[1] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymax, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymax));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[2] != null) {
            if ((x > xmin) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmin, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmin));
                } else {
                    r[2] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xxmin, xx), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmin), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (this.quadrantPaint[3] != null) {
            if ((x < xmax) && (y > ymin)) {
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(yymin, yy), java.lang.Math.min(xxmax, xx), java.lang.Math.abs(yy - yymin), java.lang.Math.abs(xx - xxmax));
                } else {
                    r[3] = new java.awt.geom.Rectangle2D.Double(java.lang.Math.min(xx, xxmax), java.lang.Math.min(yymin, yy), java.lang.Math.abs(xx - xxmax), java.lang.Math.abs(yy - yymin));
                }
                somethingToDraw = true;
            }
        }
        if (somethingToDraw) {
            java.awt.Composite originalComposite = g2.getComposite();
            g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getBackgroundAlpha()));
            for (int i = 0; i < 4; i++) {
                if ((this.quadrantPaint[i] != null) && (r[i] != null)) {
                    g2.setPaint(this.quadrantPaint[i]);
                    g2.fill(r[i]);
                }
            }
            g2.setComposite(originalComposite);
        }
    }

    public void drawDomainTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getDomainTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            double previous = xAxis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = xAxis.getUpperBound();
            if (fillBand) {
                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end);
            }
        }
    }

    public void drawRangeTickBands(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        java.awt.Paint bandPaint = getRangeTickBandPaint();
        if (bandPaint != null) {
            boolean fillBand = false;
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            double previous = axis.getLowerBound();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                double current = tick.getValue();
                if (fillBand) {
                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current);
                }
                previous = current;
                fillBand = !fillBand;
            } 
            double end = axis.getUpperBound();
            if (fillBand) {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end);
            }
        }
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(index)));
            if (axis != null) {
                axisCollection.add(axis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (iterator.next()));
            org.jfree.chart.axis.AxisState info = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
            cursor = info.getCursor();
            axisStateMap.put(axis, info);
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info, org.jfree.chart.plot.CrosshairState crosshairState) {
        boolean foundData = false;
        org.jfree.data.xy.XYDataset dataset = getDataset(index);
        if (!org.jfree.data.general.DatasetUtilities.isEmptyOrNull(dataset)) {
            foundData = true;
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxisForDataset(index);
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxisForDataset(index);
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(index);
            if (renderer == null) {
                renderer = getRenderer();
                if (renderer == null) {
                    return foundData;
                }
            }
            org.jfree.chart.renderer.xy.XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info);
            int passCount = renderer.getPassCount();
            org.jfree.chart.plot.SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder();
            if (seriesOrder == org.jfree.chart.plot.SeriesRenderingOrder.REVERSE) {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = seriesCount - 1; series >= 0; series--) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (lastItem == (-1)) {
                            continue;
                        }
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            } else {
                for (int pass = 0; pass < passCount; pass++) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int series = 0; series < seriesCount; series++) {
                        int firstItem = 0;
                        int lastItem = dataset.getItemCount(series) - 1;
                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = org.jfree.chart.renderer.RendererUtilities.findLiveItems(dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());
                            firstItem = itemBounds[0];
                            lastItem = itemBounds[1];
                        }
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass);
                        }
                    }
                }
            }
        }
        return foundData;
    }

    public org.jfree.chart.axis.ValueAxis getDomainAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getDomainAxis(axisIndex.intValue());
        } else {
            valueAxis = getDomainAxis(0);
        }
        return valueAxis;
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        if ((index < 0) || (index >= getDatasetCount())) {
            throw new java.lang.IllegalArgumentException(("Index " + index) + " out of bounds.");
        }
        org.jfree.chart.axis.ValueAxis valueAxis = null;
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(index))));
        if (axisIndex != null) {
            valueAxis = getRangeAxis(axisIndex.intValue());
        } else {
            valueAxis = getRangeAxis(0);
        }
        return valueAxis;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isDomainGridlinesVisible()) {
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            java.util.Iterator iterator = ticks.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke);
            } 
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.util.List ticks) {
        if (getRenderer() == null) {
            return;
        }
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
            if (axis != null) {
                java.util.Iterator iterator = ticks.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                    if ((tick.getValue() != 0.0) || (!isRangeZeroBaselineVisible())) {
                        getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke);
                    }
                } 
            }
        }
    }

    protected void drawZeroDomainBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isDomainZeroBaselineVisible()) {
            org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer();
            r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke);
        }
    }

    protected void drawZeroRangeBaseline(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        if (isRangeZeroBaselineVisible()) {
            getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke);
        }
    }

    public void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = this.annotations.iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.XYAnnotation annotation = ((org.jfree.chart.annotations.XYAnnotation) (iterator.next()));
            org.jfree.chart.axis.ValueAxis xAxis = getDomainAxis();
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis();
            annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.xy.XYItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        if (index >= getDatasetCount()) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    protected void drawHorizontalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getDomainAxis();
        }
        if (axis.getRange().contains(value)) {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawDomainCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawVerticalLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        org.jfree.chart.axis.ValueAxis axis = getDomainAxis();
        if (getOrientation() == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            axis = getRangeAxis();
        }
        if (axis.getRange().contains(value)) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            java.awt.geom.Line2D line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (axis.getRange().contains(value)) {
            java.awt.geom.Line2D line = null;
            if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
                line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
            } else {
                double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
            }
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(line);
        }
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            org.jfree.chart.axis.ValueAxis da = getDomainAxis();
            if (da != null) {
                double hvalue = da.java2DToValue(x, info.getDataArea(), getDomainAxisEdge());
                setDomainCrosshairValue(hvalue);
            }
            org.jfree.chart.axis.ValueAxis ra = getRangeAxis();
            if (ra != null) {
                double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge());
                setRangeCrosshairValue(vvalue);
            }
        }
    }

    private java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    private java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer axisIndex) {
        if (axisIndex == null) {
            throw new java.lang.IllegalArgumentException("Null 'axisIndex' argument.");
        }
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Integer mappedAxis = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(new java.lang.Integer(i))));
            if (mappedAxis == null) {
                if (axisIndex.equals(org.jfree.chart.plot.Plot.ZERO)) {
                    result.add(this.datasets.get(i));
                }
            } else {
                if (mappedAxis.equals(axisIndex)) {
                    result.add(this.datasets.get(i));
                }
            }
        }
        return result;
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.domainAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getDomainAxisIndex(axis);
            }
        }
        return result;
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.XYPlot) {
                org.jfree.chart.plot.XYPlot p = ((org.jfree.chart.plot.XYPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        boolean isDomainAxis = true;
        int domainIndex = getDomainAxisIndex(axis);
        if (domainIndex >= 0) {
            isDomainAxis = true;
            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new java.lang.Integer(domainIndex)));
        }
        int rangeIndex = getRangeAxisIndex(axis);
        if (rangeIndex >= 0) {
            isDomainAxis = false;
            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new java.lang.Integer(rangeIndex)));
        }
        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.xy.XYDataset d = ((org.jfree.data.xy.XYDataset) (iterator.next()));
            if (d != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer r = getRendererForDataset(d);
                if (isDomainAxis) {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findDomainBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findDomainBounds(d));
                    }
                } else {
                    if (r != null) {
                        result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
                    } else {
                        result = org.jfree.data.Range.combine(result, org.jfree.data.general.DatasetUtilities.findRangeBounds(d));
                    }
                }
            }
        } 
        return result;
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        configureDomainAxes();
        configureRangeAxes();
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        fireChangeEvent();
    }

    public boolean isDomainCrosshairVisible() {
        return this.domainCrosshairVisible;
    }

    public void setDomainCrosshairVisible(boolean flag) {
        if (this.domainCrosshairVisible != flag) {
            this.domainCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isDomainCrosshairLockedOnData() {
        return this.domainCrosshairLockedOnData;
    }

    public void setDomainCrosshairLockedOnData(boolean flag) {
        if (this.domainCrosshairLockedOnData != flag) {
            this.domainCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getDomainCrosshairValue() {
        return this.domainCrosshairValue;
    }

    public void setDomainCrosshairValue(double value) {
        setDomainCrosshairValue(value, true);
    }

    public void setDomainCrosshairValue(double value, boolean notify) {
        this.domainCrosshairValue = value;
        if (isDomainCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getDomainCrosshairStroke() {
        return this.domainCrosshairStroke;
    }

    public void setDomainCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.domainCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainCrosshairPaint() {
        return this.domainCrosshairPaint;
    }

    public void setDomainCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainCrosshairPaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomDomainAxes(factor, info, source, false);
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                if (useAnchor) {
                    double sourceX = source.getX();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceX = source.getY();
                    }
                    double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge());
                    domainAxis.resizeRange(factor, anchorX);
                } else {
                    domainAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis domainAxis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (domainAxis != null) {
                domainAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, info, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public boolean isDomainZoomable() {
        return true;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public int getSeriesCount() {
        int result = 0;
        org.jfree.data.xy.XYDataset dataset = getDataset();
        if (dataset != null) {
            result = dataset.getSeriesCount();
        }
        return result;
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        if (this.fixedLegendItems != null) {
            return this.fixedLegendItems;
        }
        org.jfree.chart.LegendItemCollection result = new org.jfree.chart.LegendItemCollection();
        int count = this.datasets.size();
        for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
            org.jfree.data.xy.XYDataset dataset = getDataset(datasetIndex);
            if (dataset != null) {
                org.jfree.chart.renderer.xy.XYItemRenderer renderer = getRenderer(datasetIndex);
                if (renderer == null) {
                    renderer = getRenderer(0);
                }
                if (renderer != null) {
                    int seriesCount = dataset.getSeriesCount();
                    for (int i = 0; i < seriesCount; i++) {
                        if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.XYPlot)) {
            return false;
        }
        org.jfree.chart.plot.XYPlot that = ((org.jfree.chart.plot.XYPlot) (obj));
        if (this.weight != that.weight) {
            return false;
        }
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
            return false;
        }
        if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
            return false;
        }
        if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
            return false;
        }
        if (this.domainCrosshairValue != that.domainCrosshairValue) {
            return false;
        }
        if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
            return false;
        }
        if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
            return false;
        }
        for (int i = 0; i < 4; i++) {
            if (!org.jfree.chart.util.PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
                return false;
            }
        }
        return super.equals(obj);
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.XYPlot clone = ((org.jfree.chart.plot.XYPlot) (super.clone()));
        clone.domainAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.domainAxes)));
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.domainAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxes)));
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (axis.clone()));
                clone.rangeAxes.set(i, clonedAxis);
                clonedAxis.setPlot(clone);
                clonedAxis.addChangeListener(clone);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.rangeAxisLocations)));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.datasets)));
        for (int i = 0; i < clone.datasets.size(); ++i) {
            org.jfree.data.xy.XYDataset d = getDataset(i);
            if (d != null) {
                d.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = new java.util.TreeMap();
        clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
        clone.datasetToRangeAxisMap = new java.util.TreeMap();
        clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
        clone.renderers = ((org.jfree.chart.util.ObjectList) (org.jfree.chart.util.ObjectUtilities.clone(this.renderers)));
        for (int i = 0; i < this.renderers.size(); i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer2 = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer2 instanceof org.jfree.chart.util.PublicCloneable) {
                org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (renderer2));
                clone.renderers.set(i, pc.clone());
            }
        }
        clone.foregroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundDomainMarkers)));
        clone.backgroundDomainMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundDomainMarkers)));
        clone.foregroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.foregroundRangeMarkers)));
        clone.backgroundRangeMarkers = ((java.util.Map) (org.jfree.chart.util.ObjectUtilities.clone(this.backgroundRangeMarkers)));
        clone.annotations = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.annotations)));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        clone.quadrantOrigin = ((java.awt.geom.Point2D) (org.jfree.chart.util.ObjectUtilities.clone(this.quadrantOrigin)));
        clone.quadrantPaint = ((java.awt.Paint[]) (this.quadrantPaint.clone()));
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeTickBandPaint, stream);
        org.jfree.chart.util.SerialUtilities.writePoint2D(this.quadrantOrigin, stream);
        for (int i = 0; i < 4; i++) {
            org.jfree.chart.util.SerialUtilities.writePaint(this.quadrantPaint[i], stream);
        }
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.domainTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeTickBandPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.quadrantOrigin = org.jfree.chart.util.SerialUtilities.readPoint2D(stream);
        this.quadrantPaint = new java.awt.Paint[4];
        for (int i = 0; i < 4; i++) {
            this.quadrantPaint[i] = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        }
        this.domainZeroBaselineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainZeroBaselinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        int domainAxisCount = this.domainAxes.size();
        for (int i = 0; i < domainAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int rangeAxisCount = this.rangeAxes.size();
        for (int i = 0; i < rangeAxisCount; i++) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.setPlot(this);
                axis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.xy.XYItemRenderer renderer = ((org.jfree.chart.renderer.xy.XYItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:35:45.149 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:35:45.150 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:35:55.587 [pool-16-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:35:55.588 [pool-16-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:35:55.589 [pool-16-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2521.
11:35:55.590 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
11:35:55.591 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2517 which is executed by 1 tests
-1690918013
11:36:01.353 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:36:11.793 [pool-22-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:36:11.797 [pool-22-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:36:11.798 [pool-22-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2517.
11:36:11.798 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:36:20.529 [pool-28-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:36:20.532 [pool-28-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): Null 'marker' argument.]
11:36:20.533 [pool-28-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:2517.
11:36:20.533 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
11:36:20.535 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2498 which is executed by 1 tests
-1690918013
11:36:26.619 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
11:36:26.623 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2481 which is executed by 1 tests
-1690918013
11:36:32.353 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
11:36:32.360 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:2465 which is executed by 1 tests
-1690918013
11:36:37.963 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
11:36:37.969 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2166 which is executed by 1 tests
590439200
11:36:43.801 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
11:36:43.802 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2159 which is executed by 1 tests
590439200
11:36:50.545 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:37:00.389 [pool-34-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CategoryPlot.java:991: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: CategoryPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:37:00.491 [pool-34-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CategoryPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -3537691700434728188L;

    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;

    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT = new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 10);

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private boolean drawSharedDomainAxis;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList datasetToDomainAxisMap;

    private org.jfree.chart.util.ObjectList datasetToRangeAxisMap;

    private org.jfree.chart.util.ObjectList renderers;

    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.util.SortOrder columnRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private org.jfree.chart.util.SortOrder rowRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private boolean domainGridlinesVisible;

    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private double anchorValue;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private int weight;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public CategoryPlot() {
        this(null, null, null, null);
    }

    public CategoryPlot(org.jfree.data.category.CategoryDataset dataset, org.jfree.chart.axis.CategoryAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new org.jfree.chart.util.ObjectList();
        this.datasetToRangeAxisMap = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        setDomainAxisLocation(org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT, false);
        setRangeAxisLocation(org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT, false);
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.drawSharedDomainAxis = false;
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
        this.domainGridlinePosition = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        this.domainGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE;
        this.rangeGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        org.jfree.chart.plot.Marker baseline = new org.jfree.chart.plot.ValueMarker(0.0, new java.awt.Color(0.8F, 0.8F, 0.8F, 0.5F), new java.awt.BasicStroke(1.0F), new java.awt.Color(0.85F, 0.85F, 0.95F, 0.5F), new java.awt.BasicStroke(1.0F), 0.6F);
        addRangeMarker(baseline, org.jfree.chart.util.Layer.BACKGROUND);
        this.anchorValue = 0.0;
        this.rangeCrosshairVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.CategoryPlot.localizationResources.getString("Category_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        this.orientation = orientation;
        fireChangeEvent();
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int index) {
        org.jfree.chart.axis.CategoryAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis, boolean notify) {
        org.jfree.chart.axis.CategoryAxis existing = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        return this.domainAxes.indexOf(axis);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return getDomainAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation(0));
        }
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return getDomainAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.util.RectangleEdge result = null;
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        if (location != null) {
            result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        } else {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge(0));
        }
        return result;
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(0, axis);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot p = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return getRangeAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation(0));
        }
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return getRangeAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge(0));
        }
        return result;
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.data.category.CategoryDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.category.CategoryDataset getDataset(int index) {
        org.jfree.data.category.CategoryDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.data.category.CategoryDataset existing = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int index) {
        org.jfree.chart.axis.CategoryAxis result = getDomainAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(index)));
        if (axisIndex != null) {
            result = getDomainAxis(axisIndex.intValue());
        }
        return result;
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        org.jfree.chart.axis.ValueAxis result = getRangeAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(index)));
        if (axisIndex != null) {
            result = getRangeAxis(axisIndex.intValue());
        }
        return result;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(0, renderer, true);
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        setRenderer(0, renderer, notify);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.category.CategoryItemRenderer existing = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
                break;
            }
        }
        return result;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.renderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.renderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder() {
        return this.columnRenderingOrder;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.columnRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder() {
        return this.rowRenderingOrder;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.rowRenderingOrder = order;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition() {
        return this.domainGridlinePosition;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor position) {
        if (position == null) {
            throw new java.lang.IllegalArgumentException("Null 'position' argument.");
        }
        this.domainGridlinePosition = position;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' not permitted.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        org.jfree.chart.LegendItemCollection result = this.fixedLegendItems;
        if (result == null) {
            result = new org.jfree.chart.LegendItemCollection();
            int count = this.datasets.size();
            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
                org.jfree.data.category.CategoryDataset dataset = getDataset(datasetIndex);
                if (dataset != null) {
                    org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(datasetIndex);
                    if (renderer != null) {
                        int seriesCount = dataset.getRowCount();
                        for (int i = 0; i < seriesCount; i++) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            double java2D = 0.0;
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                java2D = x;
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java2D = y;
                }

            org.jfree.chart.util.RectangleEdge edge = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
            double value = getRangeAxis().java2DToValue(java2D, info.getDataArea(), edge);
            setAnchorValue(value);
            setRangeCrosshairValue(value);
        }
    }

    public void zoom(double percent) {
        if (percent > 0.0) {
            double range = getRangeAxis().getRange().getLength();
            double scaledRange = range * percent;
            getRangeAxis().setRange(this.anchorValue - (scaledRange / 2.0), this.anchorValue + (scaledRange / 2.0));
        } else {
            getRangeAxis().setAutoRange(true);
        }
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        int count = this.rangeAxes.size();
        for (int axisIndex = 0; axisIndex < count; axisIndex++) {
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(axisIndex);
            if (yAxis != null) {
                yAxis.configure();
            }
        }
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        org.jfree.chart.plot.Plot parent = getParent();
        if (parent != null) {
            if (parent instanceof org.jfree.chart.event.RendererChangeListener) {
                org.jfree.chart.event.RendererChangeListener rcl = ((org.jfree.chart.event.RendererChangeListener) (parent));
                rcl.rendererChanged(event);
            } else {
                throw new java.lang.RuntimeException("The renderer has changed and I don't know what to do!");
            }
        } else {
            configureRangeAxes();
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            notifyListeners(e);
        }
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations",org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.anchorValue",org.jfree.chart.plot.CategoryPlot.this.anchorValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations",org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxes",org.jfree.chart.plot.CategoryPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.weight",org.jfree.chart.plot.CategoryPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderers",org.jfree.chart.plot.CategoryPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis",org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.annotations",org.jfree.chart.plot.CategoryPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.axisOffset",org.jfree.chart.plot.CategoryPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.orientation",org.jfree.chart.plot.CategoryPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems",org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderingOrder",org.jfree.chart.plot.CategoryPlot.this.renderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxes",org.jfree.chart.plot.CategoryPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasets",org.jfree.chart.plot.CategoryPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.localizationResources",org.jfree.chart.plot.CategoryPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
            }
            if (runtimeAngelicValue)
                markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));

        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public java.util.List getAnnotations() {
        return this.annotations;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            org.jfree.chart.util.RectangleEdge domainEdge = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
            if (this.drawSharedDomainAxis) {
                space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);
            }
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis xAxis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (xAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis yAxis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (yAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateRangeAxisSpace(g2, plotArea, space);
        space = calculateDomainAxisSpace(g2, plotArea, space);
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo state) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (state == null) {
            state = new org.jfree.chart.plot.PlotRenderingInfo(null);
        }
        state.setPlotArea(area);
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        state.setDataArea(dataArea);
        if (getRenderer() != null) {
            getRenderer().drawBackground(g2, this, dataArea);
        } else {
            drawBackground(g2, dataArea);
        }
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, state);
        java.awt.Shape savedClip = g2.getClip();
        g2.clip(dataArea);
        drawDomainGridlines(g2, dataArea);
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        java.awt.Composite originalComposite = g2.getComposite();
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int datasetCount = this.datasets.size();
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = 0; i < datasetCount; i++) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        } else {
            int datasetCount = this.datasets.size();
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = this.datasets.size() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, state);
        g2.setClip(savedClip);
        g2.setComposite(originalComposite);
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        if (isRangeCrosshairVisible()) {
            drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint());
        }
        if (getRenderer() != null) {
            getRenderer().drawOutline(g2, this, dataArea);
        } else {
            drawOutline(g2, dataArea);
        }
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawBackgroundImage(g2, area);
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
            if (xAxis != null) {
                axisCollection.add(xAxis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean foundData = false;
        org.jfree.data.category.CategoryDataset currentDataset = getDataset(index);
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(index);
        org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(index);
        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(index);
        boolean hasData = !org.jfree.data.general.DatasetUtilities.isEmptyOrNull(currentDataset);
        if (hasData && (renderer != null)) {
            foundData = true;
            org.jfree.chart.renderer.category.CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info);
            int columnCount = currentDataset.getColumnCount();
            int rowCount = currentDataset.getRowCount();
            int passCount = renderer.getPassCount();
            for (int pass = 0; pass < passCount; pass++) {
                if (this.columnRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                    for (int column = 0; column < columnCount; column++) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                } else {
                    for (int column = columnCount - 1; column >= 0; column--) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                }
            }
        }
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea) {
        if (isDomainGridlinesVisible()) {
            org.jfree.chart.axis.CategoryAnchor anchor = getDomainGridlinePosition();
            org.jfree.chart.util.RectangleEdge domainAxisEdge = getDomainAxisEdge();
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.data.category.CategoryDataset data = getDataset();
                if (data != null) {
                    org.jfree.chart.axis.CategoryAxis axis = getDomainAxis();
                    if (axis != null) {
                        int columnCount = data.getColumnCount();
                        for (int c = 0; c < columnCount; c++) {
                            double xx = axis.getCategoryJava2DCoordinate(anchor, c, columnCount, dataArea, domainAxisEdge);
                            org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                            if (renderer1 != null) {
                                renderer1.drawDomainGridline(g2, this, dataArea, xx);
                            }
                        }
                    }
                }
            }
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
                if (axis != null) {
                    java.util.Iterator iterator = ticks.iterator();
                    while (iterator.hasNext()) {
                        org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                        if (renderer1 != null) {
                            renderer1.drawRangeGridline(g2, this, getRangeAxis(), dataArea, tick.getValue());
                        }
                    } 
                }
            }
        }
    }

    protected void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = getAnnotations().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.CategoryAnnotation annotation = ((org.jfree.chart.annotations.CategoryAnnotation) (iterator.next()));
            annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.CategoryAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.CategoryMarker marker = ((org.jfree.chart.plot.CategoryMarker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge());
        java.awt.geom.Line2D line = null;
        if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY());
        } else
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), java2D, dataArea.getMaxX(), java2D);
            }

        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (!axis.getRange().contains(value)) {
            return;
        }
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        int rangeIndex = this.rangeAxes.indexOf(axis);
        if (rangeIndex >= 0) {
            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
        } else
            if (axis == getRangeAxis()) {
                mappedDatasets.addAll(datasetsMappedToRangeAxis(0));
            }

        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset d = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            org.jfree.chart.renderer.category.CategoryItemRenderer r = getRendererForDataset(d);
            if (r != null) {
                result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
            }
        } 
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int axisIndex) {
        java.util.List result = new java.util.ArrayList();
        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
            java.lang.Object dataset = this.datasets.get(datasetIndex);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(datasetIndex)));
                if (m == null) {
                    if (axisIndex == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == axisIndex) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    private java.util.List datasetsMappedToRangeAxis(int index) {
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Object dataset = this.datasets.get(i);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(i)));
                if (m == null) {
                    if (index == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == index) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public java.util.List getCategories() {
        java.util.List result = null;
        if (getDataset() != null) {
            result = java.util.Collections.unmodifiableList(getDataset().getColumnKeys());
        }
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis axis) {
        java.util.List result = new java.util.ArrayList();
        int axisIndex = this.domainAxes.indexOf(axis);
        java.util.List datasets = datasetsMappedToDomainAxis(axisIndex);
        java.util.Iterator iterator = datasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset dataset = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            for (int i = 0; i < dataset.getColumnCount(); i++) {
                java.lang.Comparable category = dataset.getColumnKey(i);
                if (!result.contains(category)) {
                    result.add(category);
                }
            }
        } 
        return result;
    }

    public boolean getDrawSharedDomainAxis() {
        return this.drawSharedDomainAxis;
    }

    public void setDrawSharedDomainAxis(boolean draw) {
        this.drawSharedDomainAxis = draw;
        fireChangeEvent();
    }

    public boolean isDomainZoomable() {
        return false;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, state, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public double getAnchorValue() {
        return this.anchorValue;
    }

    public void setAnchorValue(double value) {
        setAnchorValue(value, true);
    }

    public void setAnchorValue(double value, boolean notify) {
        this.anchorValue = value;
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.CategoryPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.plot.CategoryPlot that = ((org.jfree.chart.plot.CategoryPlot) (obj));
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {
            return false;
        }
        if (!this.rangeAxes.equals(that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (this.renderingOrder != that.renderingOrder) {
            return false;
        }
        if (this.columnRenderingOrder != that.columnRenderingOrder) {
            return false;
        }
        if (this.rowRenderingOrder != that.rowRenderingOrder) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.domainGridlinePosition != that.domainGridlinePosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (this.anchorValue != that.anchorValue) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (this.weight != that.weight) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.CategoryPlot clone = ((org.jfree.chart.plot.CategoryPlot) (super.clone()));
        clone.domainAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                org.jfree.chart.axis.CategoryAxis clonedAxis = ((org.jfree.chart.axis.CategoryAxis) (xAxis.clone()));
                clone.setDomainAxis(i, clonedAxis);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (yAxis.clone()));
                clone.setRangeAxis(i, clonedAxis);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (this.rangeAxisLocations.clone()));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (this.datasets.clone()));
        for (int i = 0; i < clone.datasets.size(); i++) {
            org.jfree.data.category.CategoryDataset dataset = clone.getDataset(i);
            if (dataset != null) {
                dataset.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToDomainAxisMap.clone()));
        clone.datasetToRangeAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToRangeAxisMap.clone()));
        clone.renderers = ((org.jfree.chart.util.ObjectList) (this.renderers.clone()));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                xAxis.setPlot(this);
                xAxis.addChangeListener(this);
            }
        }
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                yAxis.setPlot(this);
                yAxis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.category.CategoryItemRenderer renderer = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:37:00.493 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:37:00.495 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
11:37:00.495 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2158 which is executed by 1 tests
590439200
11:37:05.494 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:37:14.684 [pool-36-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CategoryPlot.java:990: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: CategoryPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:37:14.783 [pool-36-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CategoryPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -3537691700434728188L;

    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;

    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT = new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 10);

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private boolean drawSharedDomainAxis;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList datasetToDomainAxisMap;

    private org.jfree.chart.util.ObjectList datasetToRangeAxisMap;

    private org.jfree.chart.util.ObjectList renderers;

    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.util.SortOrder columnRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private org.jfree.chart.util.SortOrder rowRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private boolean domainGridlinesVisible;

    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private double anchorValue;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private int weight;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public CategoryPlot() {
        this(null, null, null, null);
    }

    public CategoryPlot(org.jfree.data.category.CategoryDataset dataset, org.jfree.chart.axis.CategoryAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new org.jfree.chart.util.ObjectList();
        this.datasetToRangeAxisMap = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        setDomainAxisLocation(org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT, false);
        setRangeAxisLocation(org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT, false);
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.drawSharedDomainAxis = false;
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
        this.domainGridlinePosition = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        this.domainGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE;
        this.rangeGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        org.jfree.chart.plot.Marker baseline = new org.jfree.chart.plot.ValueMarker(0.0, new java.awt.Color(0.8F, 0.8F, 0.8F, 0.5F), new java.awt.BasicStroke(1.0F), new java.awt.Color(0.85F, 0.85F, 0.95F, 0.5F), new java.awt.BasicStroke(1.0F), 0.6F);
        addRangeMarker(baseline, org.jfree.chart.util.Layer.BACKGROUND);
        this.anchorValue = 0.0;
        this.rangeCrosshairVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.CategoryPlot.localizationResources.getString("Category_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        this.orientation = orientation;
        fireChangeEvent();
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int index) {
        org.jfree.chart.axis.CategoryAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis, boolean notify) {
        org.jfree.chart.axis.CategoryAxis existing = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        return this.domainAxes.indexOf(axis);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return getDomainAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation(0));
        }
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return getDomainAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.util.RectangleEdge result = null;
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        if (location != null) {
            result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        } else {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge(0));
        }
        return result;
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(0, axis);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot p = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return getRangeAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation(0));
        }
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return getRangeAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge(0));
        }
        return result;
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.data.category.CategoryDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.category.CategoryDataset getDataset(int index) {
        org.jfree.data.category.CategoryDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.data.category.CategoryDataset existing = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int index) {
        org.jfree.chart.axis.CategoryAxis result = getDomainAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(index)));
        if (axisIndex != null) {
            result = getDomainAxis(axisIndex.intValue());
        }
        return result;
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        org.jfree.chart.axis.ValueAxis result = getRangeAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(index)));
        if (axisIndex != null) {
            result = getRangeAxis(axisIndex.intValue());
        }
        return result;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(0, renderer, true);
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        setRenderer(0, renderer, notify);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.category.CategoryItemRenderer existing = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
                break;
            }
        }
        return result;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.renderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.renderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder() {
        return this.columnRenderingOrder;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.columnRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder() {
        return this.rowRenderingOrder;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.rowRenderingOrder = order;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition() {
        return this.domainGridlinePosition;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor position) {
        if (position == null) {
            throw new java.lang.IllegalArgumentException("Null 'position' argument.");
        }
        this.domainGridlinePosition = position;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' not permitted.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        org.jfree.chart.LegendItemCollection result = this.fixedLegendItems;
        if (result == null) {
            result = new org.jfree.chart.LegendItemCollection();
            int count = this.datasets.size();
            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
                org.jfree.data.category.CategoryDataset dataset = getDataset(datasetIndex);
                if (dataset != null) {
                    org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(datasetIndex);
                    if (renderer != null) {
                        int seriesCount = dataset.getRowCount();
                        for (int i = 0; i < seriesCount; i++) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            double java2D = 0.0;
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                java2D = x;
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java2D = y;
                }

            org.jfree.chart.util.RectangleEdge edge = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
            double value = getRangeAxis().java2DToValue(java2D, info.getDataArea(), edge);
            setAnchorValue(value);
            setRangeCrosshairValue(value);
        }
    }

    public void zoom(double percent) {
        if (percent > 0.0) {
            double range = getRangeAxis().getRange().getLength();
            double scaledRange = range * percent;
            getRangeAxis().setRange(this.anchorValue - (scaledRange / 2.0), this.anchorValue + (scaledRange / 2.0));
        } else {
            getRangeAxis().setAutoRange(true);
        }
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        int count = this.rangeAxes.size();
        for (int axisIndex = 0; axisIndex < count; axisIndex++) {
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(axisIndex);
            if (yAxis != null) {
                yAxis.configure();
            }
        }
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        org.jfree.chart.plot.Plot parent = getParent();
        if (parent != null) {
            if (parent instanceof org.jfree.chart.event.RendererChangeListener) {
                org.jfree.chart.event.RendererChangeListener rcl = ((org.jfree.chart.event.RendererChangeListener) (parent));
                rcl.rendererChanged(event);
            } else {
                throw new java.lang.RuntimeException("The renderer has changed and I don't know what to do!");
            }
        } else {
            configureRangeAxes();
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            notifyListeners(e);
        }
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations",org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.anchorValue",org.jfree.chart.plot.CategoryPlot.this.anchorValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations",org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxes",org.jfree.chart.plot.CategoryPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.weight",org.jfree.chart.plot.CategoryPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderers",org.jfree.chart.plot.CategoryPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis",org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.annotations",org.jfree.chart.plot.CategoryPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.axisOffset",org.jfree.chart.plot.CategoryPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.orientation",org.jfree.chart.plot.CategoryPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems",org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderingOrder",org.jfree.chart.plot.CategoryPlot.this.renderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxes",org.jfree.chart.plot.CategoryPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("layer == org.jfree.chart.util.Layer.FOREGROUND",layer == org.jfree.chart.util.Layer.FOREGROUND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasets",org.jfree.chart.plot.CategoryPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.localizationResources",org.jfree.chart.plot.CategoryPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
        }
        if (runtimeAngelicValue) if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public java.util.List getAnnotations() {
        return this.annotations;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            org.jfree.chart.util.RectangleEdge domainEdge = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
            if (this.drawSharedDomainAxis) {
                space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);
            }
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis xAxis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (xAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis yAxis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (yAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateRangeAxisSpace(g2, plotArea, space);
        space = calculateDomainAxisSpace(g2, plotArea, space);
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo state) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (state == null) {
            state = new org.jfree.chart.plot.PlotRenderingInfo(null);
        }
        state.setPlotArea(area);
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        state.setDataArea(dataArea);
        if (getRenderer() != null) {
            getRenderer().drawBackground(g2, this, dataArea);
        } else {
            drawBackground(g2, dataArea);
        }
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, state);
        java.awt.Shape savedClip = g2.getClip();
        g2.clip(dataArea);
        drawDomainGridlines(g2, dataArea);
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        java.awt.Composite originalComposite = g2.getComposite();
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int datasetCount = this.datasets.size();
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = 0; i < datasetCount; i++) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        } else {
            int datasetCount = this.datasets.size();
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = this.datasets.size() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, state);
        g2.setClip(savedClip);
        g2.setComposite(originalComposite);
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        if (isRangeCrosshairVisible()) {
            drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint());
        }
        if (getRenderer() != null) {
            getRenderer().drawOutline(g2, this, dataArea);
        } else {
            drawOutline(g2, dataArea);
        }
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawBackgroundImage(g2, area);
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
            if (xAxis != null) {
                axisCollection.add(xAxis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean foundData = false;
        org.jfree.data.category.CategoryDataset currentDataset = getDataset(index);
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(index);
        org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(index);
        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(index);
        boolean hasData = !org.jfree.data.general.DatasetUtilities.isEmptyOrNull(currentDataset);
        if (hasData && (renderer != null)) {
            foundData = true;
            org.jfree.chart.renderer.category.CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info);
            int columnCount = currentDataset.getColumnCount();
            int rowCount = currentDataset.getRowCount();
            int passCount = renderer.getPassCount();
            for (int pass = 0; pass < passCount; pass++) {
                if (this.columnRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                    for (int column = 0; column < columnCount; column++) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                } else {
                    for (int column = columnCount - 1; column >= 0; column--) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                }
            }
        }
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea) {
        if (isDomainGridlinesVisible()) {
            org.jfree.chart.axis.CategoryAnchor anchor = getDomainGridlinePosition();
            org.jfree.chart.util.RectangleEdge domainAxisEdge = getDomainAxisEdge();
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.data.category.CategoryDataset data = getDataset();
                if (data != null) {
                    org.jfree.chart.axis.CategoryAxis axis = getDomainAxis();
                    if (axis != null) {
                        int columnCount = data.getColumnCount();
                        for (int c = 0; c < columnCount; c++) {
                            double xx = axis.getCategoryJava2DCoordinate(anchor, c, columnCount, dataArea, domainAxisEdge);
                            org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                            if (renderer1 != null) {
                                renderer1.drawDomainGridline(g2, this, dataArea, xx);
                            }
                        }
                    }
                }
            }
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
                if (axis != null) {
                    java.util.Iterator iterator = ticks.iterator();
                    while (iterator.hasNext()) {
                        org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                        if (renderer1 != null) {
                            renderer1.drawRangeGridline(g2, this, getRangeAxis(), dataArea, tick.getValue());
                        }
                    } 
                }
            }
        }
    }

    protected void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = getAnnotations().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.CategoryAnnotation annotation = ((org.jfree.chart.annotations.CategoryAnnotation) (iterator.next()));
            annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.CategoryAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.CategoryMarker marker = ((org.jfree.chart.plot.CategoryMarker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge());
        java.awt.geom.Line2D line = null;
        if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY());
        } else
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), java2D, dataArea.getMaxX(), java2D);
            }

        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (!axis.getRange().contains(value)) {
            return;
        }
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        int rangeIndex = this.rangeAxes.indexOf(axis);
        if (rangeIndex >= 0) {
            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
        } else
            if (axis == getRangeAxis()) {
                mappedDatasets.addAll(datasetsMappedToRangeAxis(0));
            }

        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset d = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            org.jfree.chart.renderer.category.CategoryItemRenderer r = getRendererForDataset(d);
            if (r != null) {
                result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
            }
        } 
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int axisIndex) {
        java.util.List result = new java.util.ArrayList();
        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
            java.lang.Object dataset = this.datasets.get(datasetIndex);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(datasetIndex)));
                if (m == null) {
                    if (axisIndex == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == axisIndex) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    private java.util.List datasetsMappedToRangeAxis(int index) {
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Object dataset = this.datasets.get(i);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(i)));
                if (m == null) {
                    if (index == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == index) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public java.util.List getCategories() {
        java.util.List result = null;
        if (getDataset() != null) {
            result = java.util.Collections.unmodifiableList(getDataset().getColumnKeys());
        }
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis axis) {
        java.util.List result = new java.util.ArrayList();
        int axisIndex = this.domainAxes.indexOf(axis);
        java.util.List datasets = datasetsMappedToDomainAxis(axisIndex);
        java.util.Iterator iterator = datasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset dataset = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            for (int i = 0; i < dataset.getColumnCount(); i++) {
                java.lang.Comparable category = dataset.getColumnKey(i);
                if (!result.contains(category)) {
                    result.add(category);
                }
            }
        } 
        return result;
    }

    public boolean getDrawSharedDomainAxis() {
        return this.drawSharedDomainAxis;
    }

    public void setDrawSharedDomainAxis(boolean draw) {
        this.drawSharedDomainAxis = draw;
        fireChangeEvent();
    }

    public boolean isDomainZoomable() {
        return false;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, state, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public double getAnchorValue() {
        return this.anchorValue;
    }

    public void setAnchorValue(double value) {
        setAnchorValue(value, true);
    }

    public void setAnchorValue(double value, boolean notify) {
        this.anchorValue = value;
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.CategoryPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.plot.CategoryPlot that = ((org.jfree.chart.plot.CategoryPlot) (obj));
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {
            return false;
        }
        if (!this.rangeAxes.equals(that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (this.renderingOrder != that.renderingOrder) {
            return false;
        }
        if (this.columnRenderingOrder != that.columnRenderingOrder) {
            return false;
        }
        if (this.rowRenderingOrder != that.rowRenderingOrder) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.domainGridlinePosition != that.domainGridlinePosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (this.anchorValue != that.anchorValue) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (this.weight != that.weight) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.CategoryPlot clone = ((org.jfree.chart.plot.CategoryPlot) (super.clone()));
        clone.domainAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                org.jfree.chart.axis.CategoryAxis clonedAxis = ((org.jfree.chart.axis.CategoryAxis) (xAxis.clone()));
                clone.setDomainAxis(i, clonedAxis);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (yAxis.clone()));
                clone.setRangeAxis(i, clonedAxis);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (this.rangeAxisLocations.clone()));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (this.datasets.clone()));
        for (int i = 0; i < clone.datasets.size(); i++) {
            org.jfree.data.category.CategoryDataset dataset = clone.getDataset(i);
            if (dataset != null) {
                dataset.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToDomainAxisMap.clone()));
        clone.datasetToRangeAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToRangeAxisMap.clone()));
        clone.renderers = ((org.jfree.chart.util.ObjectList) (this.renderers.clone()));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                xAxis.setPlot(this);
                xAxis.addChangeListener(this);
            }
        }
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                yAxis.setPlot(this);
                yAxis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.category.CategoryItemRenderer renderer = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:37:14.793 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:37:14.795 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:37:23.456 [pool-38-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:37:23.457 [pool-38-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:37:23.458 [pool-38-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2158.
11:37:23.459 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
11:37:23.464 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2139 which is executed by 1 tests
590439200
11:37:29.665 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
11:37:29.671 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2122 which is executed by 1 tests
590439200
11:37:35.680 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
11:37:35.689 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2106 which is executed by 1 tests
590439200
11:37:43.225 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
11:37:43.226 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2448 which is executed by 1 tests
590439200
11:37:50.166 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
11:37:50.167 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2441 which is executed by 1 tests
590439200
11:37:56.506 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:38:05.103 [pool-44-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CategoryPlot.java:1126: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: CategoryPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:38:05.205 [pool-44-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CategoryPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -3537691700434728188L;

    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;

    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT = new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 10);

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private boolean drawSharedDomainAxis;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList datasetToDomainAxisMap;

    private org.jfree.chart.util.ObjectList datasetToRangeAxisMap;

    private org.jfree.chart.util.ObjectList renderers;

    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.util.SortOrder columnRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private org.jfree.chart.util.SortOrder rowRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private boolean domainGridlinesVisible;

    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private double anchorValue;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private int weight;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public CategoryPlot() {
        this(null, null, null, null);
    }

    public CategoryPlot(org.jfree.data.category.CategoryDataset dataset, org.jfree.chart.axis.CategoryAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new org.jfree.chart.util.ObjectList();
        this.datasetToRangeAxisMap = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        setDomainAxisLocation(org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT, false);
        setRangeAxisLocation(org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT, false);
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.drawSharedDomainAxis = false;
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
        this.domainGridlinePosition = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        this.domainGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE;
        this.rangeGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        org.jfree.chart.plot.Marker baseline = new org.jfree.chart.plot.ValueMarker(0.0, new java.awt.Color(0.8F, 0.8F, 0.8F, 0.5F), new java.awt.BasicStroke(1.0F), new java.awt.Color(0.85F, 0.85F, 0.95F, 0.5F), new java.awt.BasicStroke(1.0F), 0.6F);
        addRangeMarker(baseline, org.jfree.chart.util.Layer.BACKGROUND);
        this.anchorValue = 0.0;
        this.rangeCrosshairVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.CategoryPlot.localizationResources.getString("Category_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        this.orientation = orientation;
        fireChangeEvent();
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int index) {
        org.jfree.chart.axis.CategoryAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis, boolean notify) {
        org.jfree.chart.axis.CategoryAxis existing = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        return this.domainAxes.indexOf(axis);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return getDomainAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation(0));
        }
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return getDomainAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.util.RectangleEdge result = null;
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        if (location != null) {
            result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        } else {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge(0));
        }
        return result;
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(0, axis);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot p = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return getRangeAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation(0));
        }
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return getRangeAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge(0));
        }
        return result;
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.data.category.CategoryDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.category.CategoryDataset getDataset(int index) {
        org.jfree.data.category.CategoryDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.data.category.CategoryDataset existing = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int index) {
        org.jfree.chart.axis.CategoryAxis result = getDomainAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(index)));
        if (axisIndex != null) {
            result = getDomainAxis(axisIndex.intValue());
        }
        return result;
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        org.jfree.chart.axis.ValueAxis result = getRangeAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(index)));
        if (axisIndex != null) {
            result = getRangeAxis(axisIndex.intValue());
        }
        return result;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(0, renderer, true);
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        setRenderer(0, renderer, notify);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.category.CategoryItemRenderer existing = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
                break;
            }
        }
        return result;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.renderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.renderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder() {
        return this.columnRenderingOrder;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.columnRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder() {
        return this.rowRenderingOrder;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.rowRenderingOrder = order;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition() {
        return this.domainGridlinePosition;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor position) {
        if (position == null) {
            throw new java.lang.IllegalArgumentException("Null 'position' argument.");
        }
        this.domainGridlinePosition = position;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' not permitted.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        org.jfree.chart.LegendItemCollection result = this.fixedLegendItems;
        if (result == null) {
            result = new org.jfree.chart.LegendItemCollection();
            int count = this.datasets.size();
            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
                org.jfree.data.category.CategoryDataset dataset = getDataset(datasetIndex);
                if (dataset != null) {
                    org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(datasetIndex);
                    if (renderer != null) {
                        int seriesCount = dataset.getRowCount();
                        for (int i = 0; i < seriesCount; i++) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            double java2D = 0.0;
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                java2D = x;
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java2D = y;
                }

            org.jfree.chart.util.RectangleEdge edge = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
            double value = getRangeAxis().java2DToValue(java2D, info.getDataArea(), edge);
            setAnchorValue(value);
            setRangeCrosshairValue(value);
        }
    }

    public void zoom(double percent) {
        if (percent > 0.0) {
            double range = getRangeAxis().getRange().getLength();
            double scaledRange = range * percent;
            getRangeAxis().setRange(this.anchorValue - (scaledRange / 2.0), this.anchorValue + (scaledRange / 2.0));
        } else {
            getRangeAxis().setAutoRange(true);
        }
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        int count = this.rangeAxes.size();
        for (int axisIndex = 0; axisIndex < count; axisIndex++) {
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(axisIndex);
            if (yAxis != null) {
                yAxis.configure();
            }
        }
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        org.jfree.chart.plot.Plot parent = getParent();
        if (parent != null) {
            if (parent instanceof org.jfree.chart.event.RendererChangeListener) {
                org.jfree.chart.event.RendererChangeListener rcl = ((org.jfree.chart.event.RendererChangeListener) (parent));
                rcl.rendererChanged(event);
            } else {
                throw new java.lang.RuntimeException("The renderer has changed and I don't know what to do!");
            }
        } else {
            configureRangeAxes();
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            notifyListeners(e);
        }
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations",org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.anchorValue",org.jfree.chart.plot.CategoryPlot.this.anchorValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations",org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxes",org.jfree.chart.plot.CategoryPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.weight",org.jfree.chart.plot.CategoryPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderers",org.jfree.chart.plot.CategoryPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis",org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.annotations",org.jfree.chart.plot.CategoryPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.axisOffset",org.jfree.chart.plot.CategoryPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.orientation",org.jfree.chart.plot.CategoryPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems",org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderingOrder",org.jfree.chart.plot.CategoryPlot.this.renderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxes",org.jfree.chart.plot.CategoryPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasets",org.jfree.chart.plot.CategoryPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.localizationResources",org.jfree.chart.plot.CategoryPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
            }
            if (runtimeAngelicValue)
                markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));

        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public java.util.List getAnnotations() {
        return this.annotations;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            org.jfree.chart.util.RectangleEdge domainEdge = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
            if (this.drawSharedDomainAxis) {
                space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);
            }
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis xAxis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (xAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis yAxis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (yAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateRangeAxisSpace(g2, plotArea, space);
        space = calculateDomainAxisSpace(g2, plotArea, space);
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo state) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (state == null) {
            state = new org.jfree.chart.plot.PlotRenderingInfo(null);
        }
        state.setPlotArea(area);
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        state.setDataArea(dataArea);
        if (getRenderer() != null) {
            getRenderer().drawBackground(g2, this, dataArea);
        } else {
            drawBackground(g2, dataArea);
        }
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, state);
        java.awt.Shape savedClip = g2.getClip();
        g2.clip(dataArea);
        drawDomainGridlines(g2, dataArea);
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        java.awt.Composite originalComposite = g2.getComposite();
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int datasetCount = this.datasets.size();
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = 0; i < datasetCount; i++) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        } else {
            int datasetCount = this.datasets.size();
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = this.datasets.size() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, state);
        g2.setClip(savedClip);
        g2.setComposite(originalComposite);
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        if (isRangeCrosshairVisible()) {
            drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint());
        }
        if (getRenderer() != null) {
            getRenderer().drawOutline(g2, this, dataArea);
        } else {
            drawOutline(g2, dataArea);
        }
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawBackgroundImage(g2, area);
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
            if (xAxis != null) {
                axisCollection.add(xAxis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean foundData = false;
        org.jfree.data.category.CategoryDataset currentDataset = getDataset(index);
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(index);
        org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(index);
        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(index);
        boolean hasData = !org.jfree.data.general.DatasetUtilities.isEmptyOrNull(currentDataset);
        if (hasData && (renderer != null)) {
            foundData = true;
            org.jfree.chart.renderer.category.CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info);
            int columnCount = currentDataset.getColumnCount();
            int rowCount = currentDataset.getRowCount();
            int passCount = renderer.getPassCount();
            for (int pass = 0; pass < passCount; pass++) {
                if (this.columnRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                    for (int column = 0; column < columnCount; column++) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                } else {
                    for (int column = columnCount - 1; column >= 0; column--) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                }
            }
        }
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea) {
        if (isDomainGridlinesVisible()) {
            org.jfree.chart.axis.CategoryAnchor anchor = getDomainGridlinePosition();
            org.jfree.chart.util.RectangleEdge domainAxisEdge = getDomainAxisEdge();
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.data.category.CategoryDataset data = getDataset();
                if (data != null) {
                    org.jfree.chart.axis.CategoryAxis axis = getDomainAxis();
                    if (axis != null) {
                        int columnCount = data.getColumnCount();
                        for (int c = 0; c < columnCount; c++) {
                            double xx = axis.getCategoryJava2DCoordinate(anchor, c, columnCount, dataArea, domainAxisEdge);
                            org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                            if (renderer1 != null) {
                                renderer1.drawDomainGridline(g2, this, dataArea, xx);
                            }
                        }
                    }
                }
            }
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
                if (axis != null) {
                    java.util.Iterator iterator = ticks.iterator();
                    while (iterator.hasNext()) {
                        org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                        if (renderer1 != null) {
                            renderer1.drawRangeGridline(g2, this, getRangeAxis(), dataArea, tick.getValue());
                        }
                    } 
                }
            }
        }
    }

    protected void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = getAnnotations().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.CategoryAnnotation annotation = ((org.jfree.chart.annotations.CategoryAnnotation) (iterator.next()));
            annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.CategoryAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.CategoryMarker marker = ((org.jfree.chart.plot.CategoryMarker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge());
        java.awt.geom.Line2D line = null;
        if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY());
        } else
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), java2D, dataArea.getMaxX(), java2D);
            }

        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (!axis.getRange().contains(value)) {
            return;
        }
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        int rangeIndex = this.rangeAxes.indexOf(axis);
        if (rangeIndex >= 0) {
            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
        } else
            if (axis == getRangeAxis()) {
                mappedDatasets.addAll(datasetsMappedToRangeAxis(0));
            }

        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset d = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            org.jfree.chart.renderer.category.CategoryItemRenderer r = getRendererForDataset(d);
            if (r != null) {
                result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
            }
        } 
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int axisIndex) {
        java.util.List result = new java.util.ArrayList();
        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
            java.lang.Object dataset = this.datasets.get(datasetIndex);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(datasetIndex)));
                if (m == null) {
                    if (axisIndex == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == axisIndex) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    private java.util.List datasetsMappedToRangeAxis(int index) {
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Object dataset = this.datasets.get(i);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(i)));
                if (m == null) {
                    if (index == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == index) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public java.util.List getCategories() {
        java.util.List result = null;
        if (getDataset() != null) {
            result = java.util.Collections.unmodifiableList(getDataset().getColumnKeys());
        }
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis axis) {
        java.util.List result = new java.util.ArrayList();
        int axisIndex = this.domainAxes.indexOf(axis);
        java.util.List datasets = datasetsMappedToDomainAxis(axisIndex);
        java.util.Iterator iterator = datasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset dataset = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            for (int i = 0; i < dataset.getColumnCount(); i++) {
                java.lang.Comparable category = dataset.getColumnKey(i);
                if (!result.contains(category)) {
                    result.add(category);
                }
            }
        } 
        return result;
    }

    public boolean getDrawSharedDomainAxis() {
        return this.drawSharedDomainAxis;
    }

    public void setDrawSharedDomainAxis(boolean draw) {
        this.drawSharedDomainAxis = draw;
        fireChangeEvent();
    }

    public boolean isDomainZoomable() {
        return false;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, state, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public double getAnchorValue() {
        return this.anchorValue;
    }

    public void setAnchorValue(double value) {
        setAnchorValue(value, true);
    }

    public void setAnchorValue(double value, boolean notify) {
        this.anchorValue = value;
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.CategoryPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.plot.CategoryPlot that = ((org.jfree.chart.plot.CategoryPlot) (obj));
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {
            return false;
        }
        if (!this.rangeAxes.equals(that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (this.renderingOrder != that.renderingOrder) {
            return false;
        }
        if (this.columnRenderingOrder != that.columnRenderingOrder) {
            return false;
        }
        if (this.rowRenderingOrder != that.rowRenderingOrder) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.domainGridlinePosition != that.domainGridlinePosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (this.anchorValue != that.anchorValue) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (this.weight != that.weight) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.CategoryPlot clone = ((org.jfree.chart.plot.CategoryPlot) (super.clone()));
        clone.domainAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                org.jfree.chart.axis.CategoryAxis clonedAxis = ((org.jfree.chart.axis.CategoryAxis) (xAxis.clone()));
                clone.setDomainAxis(i, clonedAxis);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (yAxis.clone()));
                clone.setRangeAxis(i, clonedAxis);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (this.rangeAxisLocations.clone()));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (this.datasets.clone()));
        for (int i = 0; i < clone.datasets.size(); i++) {
            org.jfree.data.category.CategoryDataset dataset = clone.getDataset(i);
            if (dataset != null) {
                dataset.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToDomainAxisMap.clone()));
        clone.datasetToRangeAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToRangeAxisMap.clone()));
        clone.renderers = ((org.jfree.chart.util.ObjectList) (this.renderers.clone()));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                xAxis.setPlot(this);
                xAxis.addChangeListener(this);
            }
        }
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                yAxis.setPlot(this);
                yAxis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.category.CategoryItemRenderer renderer = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:38:05.214 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:38:05.214 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
11:38:05.215 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2440 which is executed by 1 tests
590439200
11:38:11.943 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:38:21.956 [pool-46-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CategoryPlot.java:1125: error: variable markers might not have been initialized
        boolean removed = markers.remove(marker);
                          ^
Note: CategoryPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:38:22.068 [pool-46-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CategoryPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -3537691700434728188L;

    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;

    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT = new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 10);

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private boolean drawSharedDomainAxis;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList datasetToDomainAxisMap;

    private org.jfree.chart.util.ObjectList datasetToRangeAxisMap;

    private org.jfree.chart.util.ObjectList renderers;

    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.util.SortOrder columnRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private org.jfree.chart.util.SortOrder rowRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private boolean domainGridlinesVisible;

    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private double anchorValue;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private int weight;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public CategoryPlot() {
        this(null, null, null, null);
    }

    public CategoryPlot(org.jfree.data.category.CategoryDataset dataset, org.jfree.chart.axis.CategoryAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new org.jfree.chart.util.ObjectList();
        this.datasetToRangeAxisMap = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        setDomainAxisLocation(org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT, false);
        setRangeAxisLocation(org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT, false);
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.drawSharedDomainAxis = false;
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
        this.domainGridlinePosition = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        this.domainGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE;
        this.rangeGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        org.jfree.chart.plot.Marker baseline = new org.jfree.chart.plot.ValueMarker(0.0, new java.awt.Color(0.8F, 0.8F, 0.8F, 0.5F), new java.awt.BasicStroke(1.0F), new java.awt.Color(0.85F, 0.85F, 0.95F, 0.5F), new java.awt.BasicStroke(1.0F), 0.6F);
        addRangeMarker(baseline, org.jfree.chart.util.Layer.BACKGROUND);
        this.anchorValue = 0.0;
        this.rangeCrosshairVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.CategoryPlot.localizationResources.getString("Category_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        this.orientation = orientation;
        fireChangeEvent();
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int index) {
        org.jfree.chart.axis.CategoryAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis, boolean notify) {
        org.jfree.chart.axis.CategoryAxis existing = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        return this.domainAxes.indexOf(axis);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return getDomainAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation(0));
        }
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return getDomainAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.util.RectangleEdge result = null;
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        if (location != null) {
            result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        } else {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge(0));
        }
        return result;
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(0, axis);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot p = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return getRangeAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation(0));
        }
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return getRangeAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge(0));
        }
        return result;
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.data.category.CategoryDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.category.CategoryDataset getDataset(int index) {
        org.jfree.data.category.CategoryDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.data.category.CategoryDataset existing = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int index) {
        org.jfree.chart.axis.CategoryAxis result = getDomainAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(index)));
        if (axisIndex != null) {
            result = getDomainAxis(axisIndex.intValue());
        }
        return result;
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        org.jfree.chart.axis.ValueAxis result = getRangeAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(index)));
        if (axisIndex != null) {
            result = getRangeAxis(axisIndex.intValue());
        }
        return result;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(0, renderer, true);
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        setRenderer(0, renderer, notify);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.category.CategoryItemRenderer existing = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
                break;
            }
        }
        return result;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.renderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.renderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder() {
        return this.columnRenderingOrder;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.columnRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder() {
        return this.rowRenderingOrder;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.rowRenderingOrder = order;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition() {
        return this.domainGridlinePosition;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor position) {
        if (position == null) {
            throw new java.lang.IllegalArgumentException("Null 'position' argument.");
        }
        this.domainGridlinePosition = position;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' not permitted.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        org.jfree.chart.LegendItemCollection result = this.fixedLegendItems;
        if (result == null) {
            result = new org.jfree.chart.LegendItemCollection();
            int count = this.datasets.size();
            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
                org.jfree.data.category.CategoryDataset dataset = getDataset(datasetIndex);
                if (dataset != null) {
                    org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(datasetIndex);
                    if (renderer != null) {
                        int seriesCount = dataset.getRowCount();
                        for (int i = 0; i < seriesCount; i++) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            double java2D = 0.0;
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                java2D = x;
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java2D = y;
                }

            org.jfree.chart.util.RectangleEdge edge = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
            double value = getRangeAxis().java2DToValue(java2D, info.getDataArea(), edge);
            setAnchorValue(value);
            setRangeCrosshairValue(value);
        }
    }

    public void zoom(double percent) {
        if (percent > 0.0) {
            double range = getRangeAxis().getRange().getLength();
            double scaledRange = range * percent;
            getRangeAxis().setRange(this.anchorValue - (scaledRange / 2.0), this.anchorValue + (scaledRange / 2.0));
        } else {
            getRangeAxis().setAutoRange(true);
        }
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        int count = this.rangeAxes.size();
        for (int axisIndex = 0; axisIndex < count; axisIndex++) {
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(axisIndex);
            if (yAxis != null) {
                yAxis.configure();
            }
        }
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        org.jfree.chart.plot.Plot parent = getParent();
        if (parent != null) {
            if (parent instanceof org.jfree.chart.event.RendererChangeListener) {
                org.jfree.chart.event.RendererChangeListener rcl = ((org.jfree.chart.event.RendererChangeListener) (parent));
                rcl.rendererChanged(event);
            } else {
                throw new java.lang.RuntimeException("The renderer has changed and I don't know what to do!");
            }
        } else {
            configureRangeAxes();
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            notifyListeners(e);
        }
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations",org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.anchorValue",org.jfree.chart.plot.CategoryPlot.this.anchorValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations",org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxes",org.jfree.chart.plot.CategoryPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.weight",org.jfree.chart.plot.CategoryPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderers",org.jfree.chart.plot.CategoryPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis",org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.annotations",org.jfree.chart.plot.CategoryPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.axisOffset",org.jfree.chart.plot.CategoryPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.orientation",org.jfree.chart.plot.CategoryPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems",org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderingOrder",org.jfree.chart.plot.CategoryPlot.this.renderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxes",org.jfree.chart.plot.CategoryPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("layer == org.jfree.chart.util.Layer.FOREGROUND",layer == org.jfree.chart.util.Layer.FOREGROUND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasets",org.jfree.chart.plot.CategoryPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.localizationResources",org.jfree.chart.plot.CategoryPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
        }
        if (runtimeAngelicValue) if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public java.util.List getAnnotations() {
        return this.annotations;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            org.jfree.chart.util.RectangleEdge domainEdge = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
            if (this.drawSharedDomainAxis) {
                space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);
            }
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis xAxis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (xAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis yAxis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (yAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateRangeAxisSpace(g2, plotArea, space);
        space = calculateDomainAxisSpace(g2, plotArea, space);
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo state) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (state == null) {
            state = new org.jfree.chart.plot.PlotRenderingInfo(null);
        }
        state.setPlotArea(area);
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        state.setDataArea(dataArea);
        if (getRenderer() != null) {
            getRenderer().drawBackground(g2, this, dataArea);
        } else {
            drawBackground(g2, dataArea);
        }
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, state);
        java.awt.Shape savedClip = g2.getClip();
        g2.clip(dataArea);
        drawDomainGridlines(g2, dataArea);
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        java.awt.Composite originalComposite = g2.getComposite();
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int datasetCount = this.datasets.size();
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = 0; i < datasetCount; i++) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        } else {
            int datasetCount = this.datasets.size();
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = this.datasets.size() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, state);
        g2.setClip(savedClip);
        g2.setComposite(originalComposite);
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        if (isRangeCrosshairVisible()) {
            drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint());
        }
        if (getRenderer() != null) {
            getRenderer().drawOutline(g2, this, dataArea);
        } else {
            drawOutline(g2, dataArea);
        }
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawBackgroundImage(g2, area);
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
            if (xAxis != null) {
                axisCollection.add(xAxis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean foundData = false;
        org.jfree.data.category.CategoryDataset currentDataset = getDataset(index);
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(index);
        org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(index);
        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(index);
        boolean hasData = !org.jfree.data.general.DatasetUtilities.isEmptyOrNull(currentDataset);
        if (hasData && (renderer != null)) {
            foundData = true;
            org.jfree.chart.renderer.category.CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info);
            int columnCount = currentDataset.getColumnCount();
            int rowCount = currentDataset.getRowCount();
            int passCount = renderer.getPassCount();
            for (int pass = 0; pass < passCount; pass++) {
                if (this.columnRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                    for (int column = 0; column < columnCount; column++) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                } else {
                    for (int column = columnCount - 1; column >= 0; column--) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                }
            }
        }
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea) {
        if (isDomainGridlinesVisible()) {
            org.jfree.chart.axis.CategoryAnchor anchor = getDomainGridlinePosition();
            org.jfree.chart.util.RectangleEdge domainAxisEdge = getDomainAxisEdge();
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.data.category.CategoryDataset data = getDataset();
                if (data != null) {
                    org.jfree.chart.axis.CategoryAxis axis = getDomainAxis();
                    if (axis != null) {
                        int columnCount = data.getColumnCount();
                        for (int c = 0; c < columnCount; c++) {
                            double xx = axis.getCategoryJava2DCoordinate(anchor, c, columnCount, dataArea, domainAxisEdge);
                            org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                            if (renderer1 != null) {
                                renderer1.drawDomainGridline(g2, this, dataArea, xx);
                            }
                        }
                    }
                }
            }
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
                if (axis != null) {
                    java.util.Iterator iterator = ticks.iterator();
                    while (iterator.hasNext()) {
                        org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                        if (renderer1 != null) {
                            renderer1.drawRangeGridline(g2, this, getRangeAxis(), dataArea, tick.getValue());
                        }
                    } 
                }
            }
        }
    }

    protected void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = getAnnotations().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.CategoryAnnotation annotation = ((org.jfree.chart.annotations.CategoryAnnotation) (iterator.next()));
            annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.CategoryAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.CategoryMarker marker = ((org.jfree.chart.plot.CategoryMarker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge());
        java.awt.geom.Line2D line = null;
        if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY());
        } else
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), java2D, dataArea.getMaxX(), java2D);
            }

        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (!axis.getRange().contains(value)) {
            return;
        }
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        int rangeIndex = this.rangeAxes.indexOf(axis);
        if (rangeIndex >= 0) {
            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
        } else
            if (axis == getRangeAxis()) {
                mappedDatasets.addAll(datasetsMappedToRangeAxis(0));
            }

        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset d = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            org.jfree.chart.renderer.category.CategoryItemRenderer r = getRendererForDataset(d);
            if (r != null) {
                result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
            }
        } 
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int axisIndex) {
        java.util.List result = new java.util.ArrayList();
        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
            java.lang.Object dataset = this.datasets.get(datasetIndex);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(datasetIndex)));
                if (m == null) {
                    if (axisIndex == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == axisIndex) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    private java.util.List datasetsMappedToRangeAxis(int index) {
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Object dataset = this.datasets.get(i);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(i)));
                if (m == null) {
                    if (index == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == index) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public java.util.List getCategories() {
        java.util.List result = null;
        if (getDataset() != null) {
            result = java.util.Collections.unmodifiableList(getDataset().getColumnKeys());
        }
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis axis) {
        java.util.List result = new java.util.ArrayList();
        int axisIndex = this.domainAxes.indexOf(axis);
        java.util.List datasets = datasetsMappedToDomainAxis(axisIndex);
        java.util.Iterator iterator = datasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset dataset = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            for (int i = 0; i < dataset.getColumnCount(); i++) {
                java.lang.Comparable category = dataset.getColumnKey(i);
                if (!result.contains(category)) {
                    result.add(category);
                }
            }
        } 
        return result;
    }

    public boolean getDrawSharedDomainAxis() {
        return this.drawSharedDomainAxis;
    }

    public void setDrawSharedDomainAxis(boolean draw) {
        this.drawSharedDomainAxis = draw;
        fireChangeEvent();
    }

    public boolean isDomainZoomable() {
        return false;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, state, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public double getAnchorValue() {
        return this.anchorValue;
    }

    public void setAnchorValue(double value) {
        setAnchorValue(value, true);
    }

    public void setAnchorValue(double value, boolean notify) {
        this.anchorValue = value;
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.CategoryPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.plot.CategoryPlot that = ((org.jfree.chart.plot.CategoryPlot) (obj));
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {
            return false;
        }
        if (!this.rangeAxes.equals(that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (this.renderingOrder != that.renderingOrder) {
            return false;
        }
        if (this.columnRenderingOrder != that.columnRenderingOrder) {
            return false;
        }
        if (this.rowRenderingOrder != that.rowRenderingOrder) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.domainGridlinePosition != that.domainGridlinePosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (this.anchorValue != that.anchorValue) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (this.weight != that.weight) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.CategoryPlot clone = ((org.jfree.chart.plot.CategoryPlot) (super.clone()));
        clone.domainAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                org.jfree.chart.axis.CategoryAxis clonedAxis = ((org.jfree.chart.axis.CategoryAxis) (xAxis.clone()));
                clone.setDomainAxis(i, clonedAxis);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (yAxis.clone()));
                clone.setRangeAxis(i, clonedAxis);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (this.rangeAxisLocations.clone()));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (this.datasets.clone()));
        for (int i = 0; i < clone.datasets.size(); i++) {
            org.jfree.data.category.CategoryDataset dataset = clone.getDataset(i);
            if (dataset != null) {
                dataset.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToDomainAxisMap.clone()));
        clone.datasetToRangeAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToRangeAxisMap.clone()));
        clone.renderers = ((org.jfree.chart.util.ObjectList) (this.renderers.clone()));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                xAxis.setPlot(this);
                xAxis.addChangeListener(this);
            }
        }
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                yAxis.setPlot(this);
                yAxis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.category.CategoryItemRenderer renderer = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:38:22.075 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:38:22.076 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:38:31.227 [pool-48-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:38:31.228 [pool-48-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:38:31.228 [pool-48-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2440.
11:38:31.229 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
11:38:31.230 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2436 which is executed by 1 tests
590439200
11:38:37.604 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:38:45.341 [pool-54-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:38:45.342 [pool-54-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:38:45.343 [pool-54-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2436.
11:38:45.343 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:38:53.032 [pool-60-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:38:53.033 [pool-60-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'marker' argument.]
11:38:53.033 [pool-60-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2436.
11:38:53.034 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
11:38:53.035 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2415 which is executed by 1 tests
590439200
11:38:58.479 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
11:38:58.479 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2396 which is executed by 1 tests
590439200
11:39:04.776 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
11:39:04.784 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2378 which is executed by 1 tests
590439200
11:39:10.798 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
11:39:10.799 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:900 which is executed by 9 tests
590439200
11:39:18.404 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:39:27.076 [pool-66-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:39:27.079 [pool-66-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:39:27.079 [pool-66-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:900.
11:39:27.080 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:39:35.423 [pool-72-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:39:35.424 [pool-72-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:39:35.424 [pool-72-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:900.
11:39:35.426 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
11:39:35.427 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:899 which is executed by 9 tests
590439200
11:39:42.106 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
11:39:42.113 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.event.ChartChangeEvent:132 which is executed by 41 tests
-779068883
11:39:48.545 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
11:39:48.547 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.event.ChartChangeEvent:131 which is executed by 41 tests
-779068883
11:39:55.350 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:40:03.083 [pool-78-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:03.084 [pool-78-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:03.085 [pool-78-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.event.ChartChangeEvent:131.
11:40:03.087 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
11:40:03.088 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:149 which is executed by 41 tests
-232368544
11:40:09.401 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
11:40:09.403 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:133 which is executed by 41 tests
-232368544
11:40:15.114 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
11:40:15.116 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:132 which is executed by 41 tests
-232368544
11:40:20.543 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:40:28.690 [pool-88-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:28.691 [pool-88-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:28.691 [pool-88-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:132.
11:40:28.692 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
11:40:28.693 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:131 which is executed by 41 tests
-232368544
11:40:33.893 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:40:41.131 [pool-98-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:41.132 [pool-98-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:41.133 [pool-98-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:131.
11:40:41.136 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
11:40:41.138 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:126 which is executed by 41 tests
-232368544
11:40:46.499 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:40:53.975 [pool-108-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:53.976 [pool-108-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:40:53.977 [pool-108-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:126.
11:40:53.977 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:41:01.296 [pool-118-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:01.297 [pool-118-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:01.298 [pool-118-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:126.
11:41:01.299 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
11:41:01.299 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:123 which is executed by 41 tests
-232368544
11:41:06.388 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:41:13.722 [pool-128-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:13.725 [pool-128-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:13.726 [pool-128-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:123.
11:41:13.726 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:41:21.740 [pool-138-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:21.745 [pool-138-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Requires index >= 0., testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): Requires index >= 0., testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): Requires index >= 0., testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Requires index >= 0.]
11:41:21.746 [pool-138-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:123.
11:41:21.748 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
11:41:21.749 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:113 which is executed by 41 tests
-232368544
11:41:27.276 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
11:41:27.276 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:111 which is executed by 41 tests
-232368544
11:41:32.487 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:41:40.858 [pool-148-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:40.860 [pool-148-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:40.864 [pool-148-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:111.
11:41:40.865 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
11:41:40.865 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:110 which is executed by 41 tests
-232368544
11:41:46.110 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:41:53.889 [pool-158-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:53.889 [pool-158-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:41:53.891 [pool-158-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:110.
11:41:53.892 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:42:01.132 [pool-168-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:42:01.133 [pool-168-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:42:01.134 [pool-168-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.AbstractObjectList:110.
11:42:01.135 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
11:42:01.136 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.AbstractObjectList:109 which is executed by 41 tests
-232368544
11:42:07.474 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
11:42:07.475 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:894 which is executed by 41 tests
2490626
11:42:14.988 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
11:42:14.989 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:889 which is executed by 41 tests
2490626
11:42:22.422 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:42:31.197 [pool-178-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:42:31.200 [pool-178-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:42:31.206 [pool-178-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:889.
11:42:31.207 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
11:42:31.208 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:888 which is executed by 41 tests
2490626
11:42:36.887 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
11:42:36.889 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:433 which is executed by 41 tests
2490626
11:42:42.404 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
11:42:42.405 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.ObjectList:96 which is executed by 41 tests
-1234899810
11:42:48.390 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
11:42:48.392 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.ObjectList:95 which is executed by 41 tests
-1234899810
11:42:54.759 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:43:03.564 [pool-188-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:03.569 [pool-188-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:03.570 [pool-188-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.util.ObjectList:95.
11:43:03.571 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
11:43:03.572 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.util.ObjectList:85 which is executed by 41 tests
-1234899810
11:43:09.743 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
11:43:09.744 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:566 which is executed by 4 tests
-1997438885
11:43:16.944 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
11:43:16.945 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:560 which is executed by 4 tests
-1997438885
11:43:22.550 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:43:29.940 [pool-198-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:29.941 [pool-198-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:29.941 [pool-198-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:560.
11:43:29.942 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
11:43:29.943 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:559 which is executed by 4 tests
-1997438885
11:43:35.983 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
11:43:35.984 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:495 which is executed by 4 tests
-1997438885
11:43:41.701 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
11:43:41.707 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:494 which is executed by 4 tests
-1997438885
11:43:47.034 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:43:53.784 [pool-204-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:53.787 [pool-204-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:43:53.787 [pool-204-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:494.
11:43:53.788 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
11:43:53.788 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:493 which is executed by 4 tests
-1997438885
11:43:59.458 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:44:06.399 [pool-210-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:06.401 [pool-210-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:06.402 [pool-210-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:493.
11:44:06.402 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
11:44:06.404 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:490 which is executed by 4 tests
-1997438885
11:44:12.119 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:44:19.463 [pool-216-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:19.464 [pool-216-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:19.465 [pool-216-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:490.
11:44:19.465 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:44:26.847 [pool-222-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:26.847 [pool-222-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'adj' argument., testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:26.848 [pool-222-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:490.
11:44:26.849 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
11:44:26.852 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2261 which is executed by 18 tests
590439200
11:44:33.703 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
11:44:33.706 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2259 which is executed by 18 tests
590439200
11:44:41.551 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:44:49.953 [pool-228-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:49.954 [pool-228-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:44:49.954 [pool-228-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2259.
11:44:49.955 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
11:44:49.956 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2258 which is executed by 18 tests
590439200
11:44:57.099 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:45:06.713 [pool-234-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:06.714 [pool-234-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:06.715 [pool-234-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2258.
11:45:06.715 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:45:16.283 [pool-240-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:16.284 [pool-240-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:16.284 [pool-240-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2258.
11:45:16.285 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
11:45:16.286 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2257 which is executed by 18 tests
590439200
11:45:23.532 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:45:33.176 [pool-246-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:33.182 [pool-246-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:33.183 [pool-246-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2257.
11:45:33.183 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
11:45:33.184 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2255 which is executed by 18 tests
590439200
11:45:40.247 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:45:51.779 [pool-252-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:51.780 [pool-252-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:45:51.781 [pool-252-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2255.
11:45:51.781 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
11:45:51.782 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2253 which is executed by 18 tests
590439200
11:45:59.220 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:46:08.625 [pool-258-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:08.626 [pool-258-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:08.626 [pool-258-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2253.
11:46:08.627 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
11:46:08.627 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2252 which is executed by 18 tests
590439200
11:46:16.471 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:46:24.895 [pool-264-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:24.897 [pool-264-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:24.899 [pool-264-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2252.
11:46:24.900 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
11:46:24.900 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2251 which is executed by 18 tests
590439200
11:46:30.773 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:46:39.450 [pool-270-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:39.452 [pool-270-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:39.452 [pool-270-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2251.
11:46:39.453 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:46:48.761 [pool-276-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:48.762 [pool-276-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:46:48.762 [pool-276-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2251.
11:46:48.763 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
11:46:48.764 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2249 which is executed by 18 tests
590439200
11:46:56.425 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:47:05.872 [pool-282-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CategoryPlot.java:1022: error: variable markers might not have been initialized
                if (markers == null) {
                    ^
Note: CategoryPlot.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
11:47:05.972 [pool-282-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CategoryPlot extends org.jfree.chart.plot.Plot implements java.io.Serializable , java.lang.Cloneable , org.jfree.chart.event.RendererChangeListener , org.jfree.chart.plot.ValueAxisPlot , org.jfree.chart.plot.Zoomable , org.jfree.chart.util.PublicCloneable {
    private static final long serialVersionUID = -3537691700434728188L;

    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;

    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;

    public static final java.awt.Stroke DEFAULT_GRIDLINE_STROKE = new java.awt.BasicStroke(0.5F, java.awt.BasicStroke.CAP_BUTT, java.awt.BasicStroke.JOIN_BEVEL, 0.0F, new float[]{ 2.0F, 2.0F }, 0.0F);

    public static final java.awt.Paint DEFAULT_GRIDLINE_PAINT = java.awt.Color.WHITE;

    public static final java.awt.Font DEFAULT_VALUE_LABEL_FONT = new java.awt.Font("SansSerif", java.awt.Font.PLAIN, 10);

    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;

    public static final java.awt.Stroke DEFAULT_CROSSHAIR_STROKE = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;

    public static final java.awt.Paint DEFAULT_CROSSHAIR_PAINT = java.awt.Color.blue;

    protected static java.util.ResourceBundle localizationResources = java.util.ResourceBundle.getBundle("org.jfree.chart.plot.LocalizationBundle");

    private org.jfree.chart.plot.PlotOrientation orientation;

    private org.jfree.chart.util.RectangleInsets axisOffset;

    private org.jfree.chart.util.ObjectList domainAxes;

    private org.jfree.chart.util.ObjectList domainAxisLocations;

    private boolean drawSharedDomainAxis;

    private org.jfree.chart.util.ObjectList rangeAxes;

    private org.jfree.chart.util.ObjectList rangeAxisLocations;

    private org.jfree.chart.util.ObjectList datasets;

    private org.jfree.chart.util.ObjectList datasetToDomainAxisMap;

    private org.jfree.chart.util.ObjectList datasetToRangeAxisMap;

    private org.jfree.chart.util.ObjectList renderers;

    private org.jfree.chart.plot.DatasetRenderingOrder renderingOrder = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;

    private org.jfree.chart.util.SortOrder columnRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private org.jfree.chart.util.SortOrder rowRenderingOrder = org.jfree.chart.util.SortOrder.ASCENDING;

    private boolean domainGridlinesVisible;

    private org.jfree.chart.axis.CategoryAnchor domainGridlinePosition;

    private transient java.awt.Stroke domainGridlineStroke;

    private transient java.awt.Paint domainGridlinePaint;

    private boolean rangeGridlinesVisible;

    private transient java.awt.Stroke rangeGridlineStroke;

    private transient java.awt.Paint rangeGridlinePaint;

    private double anchorValue;

    private boolean rangeCrosshairVisible;

    private double rangeCrosshairValue;

    private transient java.awt.Stroke rangeCrosshairStroke;

    private transient java.awt.Paint rangeCrosshairPaint;

    private boolean rangeCrosshairLockedOnData = true;

    private java.util.Map foregroundDomainMarkers;

    private java.util.Map backgroundDomainMarkers;

    private java.util.Map foregroundRangeMarkers;

    private java.util.Map backgroundRangeMarkers;

    private java.util.List annotations;

    private int weight;

    private org.jfree.chart.axis.AxisSpace fixedDomainAxisSpace;

    private org.jfree.chart.axis.AxisSpace fixedRangeAxisSpace;

    private org.jfree.chart.LegendItemCollection fixedLegendItems;

    public CategoryPlot() {
        this(null, null, null, null);
    }

    public CategoryPlot(org.jfree.data.category.CategoryDataset dataset, org.jfree.chart.axis.CategoryAxis domainAxis, org.jfree.chart.axis.ValueAxis rangeAxis, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        super();
        this.orientation = org.jfree.chart.plot.PlotOrientation.VERTICAL;
        this.domainAxes = new org.jfree.chart.util.ObjectList();
        this.domainAxisLocations = new org.jfree.chart.util.ObjectList();
        this.rangeAxes = new org.jfree.chart.util.ObjectList();
        this.rangeAxisLocations = new org.jfree.chart.util.ObjectList();
        this.datasetToDomainAxisMap = new org.jfree.chart.util.ObjectList();
        this.datasetToRangeAxisMap = new org.jfree.chart.util.ObjectList();
        this.renderers = new org.jfree.chart.util.ObjectList();
        this.datasets = new org.jfree.chart.util.ObjectList();
        this.datasets.set(0, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        this.axisOffset = new org.jfree.chart.util.RectangleInsets(4.0, 4.0, 4.0, 4.0);
        setDomainAxisLocation(org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT, false);
        setRangeAxisLocation(org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT, false);
        this.renderers.set(0, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        this.domainAxes.set(0, domainAxis);
        this.mapDatasetToDomainAxis(0, 0);
        if (domainAxis != null) {
            domainAxis.setPlot(this);
            domainAxis.addChangeListener(this);
        }
        this.drawSharedDomainAxis = false;
        this.rangeAxes.set(0, rangeAxis);
        this.mapDatasetToRangeAxis(0, 0);
        if (rangeAxis != null) {
            rangeAxis.setPlot(this);
            rangeAxis.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        this.domainGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
        this.domainGridlinePosition = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        this.domainGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.domainGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.rangeGridlinesVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE;
        this.rangeGridlineStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        this.rangeGridlinePaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        this.foregroundDomainMarkers = new java.util.HashMap();
        this.backgroundDomainMarkers = new java.util.HashMap();
        this.foregroundRangeMarkers = new java.util.HashMap();
        this.backgroundRangeMarkers = new java.util.HashMap();
        org.jfree.chart.plot.Marker baseline = new org.jfree.chart.plot.ValueMarker(0.0, new java.awt.Color(0.8F, 0.8F, 0.8F, 0.5F), new java.awt.BasicStroke(1.0F), new java.awt.Color(0.85F, 0.85F, 0.95F, 0.5F), new java.awt.BasicStroke(1.0F), 0.6F);
        addRangeMarker(baseline, org.jfree.chart.util.Layer.BACKGROUND);
        this.anchorValue = 0.0;
        this.rangeCrosshairVisible = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        this.rangeCrosshairValue = 0.0;
        this.rangeCrosshairStroke = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        this.rangeCrosshairPaint = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
        this.annotations = new java.util.ArrayList();
    }

    public java.lang.String getPlotType() {
        return org.jfree.chart.plot.CategoryPlot.localizationResources.getString("Category_Plot");
    }

    public org.jfree.chart.plot.PlotOrientation getOrientation() {
        return this.orientation;
    }

    public void setOrientation(org.jfree.chart.plot.PlotOrientation orientation) {
        if (orientation == null) {
            throw new java.lang.IllegalArgumentException("Null 'orientation' argument.");
        }
        this.orientation = orientation;
        fireChangeEvent();
    }

    public org.jfree.chart.util.RectangleInsets getAxisOffset() {
        return this.axisOffset;
    }

    public void setAxisOffset(org.jfree.chart.util.RectangleInsets offset) {
        if (offset == null) {
            throw new java.lang.IllegalArgumentException("Null 'offset' argument.");
        }
        this.axisOffset = offset;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis() {
        return getDomainAxis(0);
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxis(int index) {
        org.jfree.chart.axis.CategoryAxis result = null;
        if (index < this.domainAxes.size()) {
            result = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getDomainAxis(index);
            }
        }
        return result;
    }

    public void setDomainAxis(org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(0, axis);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis) {
        setDomainAxis(index, axis, true);
    }

    public void setDomainAxis(int index, org.jfree.chart.axis.CategoryAxis axis, boolean notify) {
        org.jfree.chart.axis.CategoryAxis existing = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.domainAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setDomainAxes(org.jfree.chart.axis.CategoryAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setDomainAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getDomainAxisIndex(org.jfree.chart.axis.CategoryAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        return this.domainAxes.indexOf(axis);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation() {
        return getDomainAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.domainAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.domainAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getDomainAxisLocation(0));
        }
        return result;
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(0, location, true);
    }

    public void setDomainAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setDomainAxisLocation(0, location, notify);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setDomainAxisLocation(index, location, true);
    }

    public void setDomainAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.domainAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge() {
        return getDomainAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int index) {
        org.jfree.chart.util.RectangleEdge result = null;
        org.jfree.chart.axis.AxisLocation location = getDomainAxisLocation(index);
        if (location != null) {
            result = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(location, this.orientation);
        } else {
            result = org.jfree.chart.util.RectangleEdge.opposite(getDomainAxisEdge(0));
        }
        return result;
    }

    public int getDomainAxisCount() {
        return this.domainAxes.size();
    }

    public void clearDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.domainAxes.clear();
        fireChangeEvent();
    }

    public void configureDomainAxes() {
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis axis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis() {
        return getRangeAxis(0);
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxis(int index) {
        org.jfree.chart.axis.ValueAxis result = null;
        if (index < this.rangeAxes.size()) {
            result = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        }
        if (result == null) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot cp = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = cp.getRangeAxis(index);
            }
        }
        return result;
    }

    public void setRangeAxis(org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(0, axis);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis) {
        setRangeAxis(index, axis, true);
    }

    public void setRangeAxis(int index, org.jfree.chart.axis.ValueAxis axis, boolean notify) {
        org.jfree.chart.axis.ValueAxis existing = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.set(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRangeAxes(org.jfree.chart.axis.ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    public int getRangeAxisIndex(org.jfree.chart.axis.ValueAxis axis) {
        if (axis == null) {
            throw new java.lang.IllegalArgumentException("Null 'axis' argument.");
        }
        int result = this.rangeAxes.indexOf(axis);
        if (result < 0) {
            org.jfree.chart.plot.Plot parent = getParent();
            if (parent instanceof org.jfree.chart.plot.CategoryPlot) {
                org.jfree.chart.plot.CategoryPlot p = ((org.jfree.chart.plot.CategoryPlot) (parent));
                result = p.getRangeAxisIndex(axis);
            }
        }
        return result;
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation() {
        return getRangeAxisLocation(0);
    }

    public org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int index) {
        org.jfree.chart.axis.AxisLocation result = null;
        if (index < this.rangeAxisLocations.size()) {
            result = ((org.jfree.chart.axis.AxisLocation) (this.rangeAxisLocations.get(index)));
        }
        if (result == null) {
            result = org.jfree.chart.axis.AxisLocation.getOpposite(getRangeAxisLocation(0));
        }
        return result;
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(location, true);
    }

    public void setRangeAxisLocation(org.jfree.chart.axis.AxisLocation location, boolean notify) {
        setRangeAxisLocation(0, location, notify);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location) {
        setRangeAxisLocation(index, location, true);
    }

    public void setRangeAxisLocation(int index, org.jfree.chart.axis.AxisLocation location, boolean notify) {
        if ((index == 0) && (location == null)) {
            throw new java.lang.IllegalArgumentException("Null 'location' for index 0 not permitted.");
        }
        this.rangeAxisLocations.set(index, location);
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge() {
        return getRangeAxisEdge(0);
    }

    public org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int index) {
        org.jfree.chart.axis.AxisLocation location = getRangeAxisLocation(index);
        org.jfree.chart.util.RectangleEdge result = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(location, this.orientation);
        if (result == null) {
            result = org.jfree.chart.util.RectangleEdge.opposite(getRangeAxisEdge(0));
        }
        return result;
    }

    public int getRangeAxisCount() {
        return this.rangeAxes.size();
    }

    public void clearRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.removeChangeListener(this);
            }
        }
        this.rangeAxes.clear();
        fireChangeEvent();
    }

    public void configureRangeAxes() {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis axis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (axis != null) {
                axis.configure();
            }
        }
    }

    public org.jfree.data.category.CategoryDataset getDataset() {
        return getDataset(0);
    }

    public org.jfree.data.category.CategoryDataset getDataset(int index) {
        org.jfree.data.category.CategoryDataset result = null;
        if (this.datasets.size() > index) {
            result = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        }
        return result;
    }

    public void setDataset(org.jfree.data.category.CategoryDataset dataset) {
        setDataset(0, dataset);
    }

    public void setDataset(int index, org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.data.category.CategoryDataset existing = ((org.jfree.data.category.CategoryDataset) (this.datasets.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.datasets.set(index, dataset);
        if (dataset != null) {
            dataset.addChangeListener(this);
        }
        org.jfree.data.general.DatasetChangeEvent event = new org.jfree.data.general.DatasetChangeEvent(this, dataset);
        datasetChanged(event);
    }

    public int getDatasetCount() {
        return this.datasets.size();
    }

    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        this.datasetToDomainAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.CategoryAxis getDomainAxisForDataset(int index) {
        org.jfree.chart.axis.CategoryAxis result = getDomainAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(index)));
        if (axisIndex != null) {
            result = getDomainAxis(axisIndex.intValue());
        }
        return result;
    }

    public void mapDatasetToRangeAxis(int index, int axisIndex) {
        this.datasetToRangeAxisMap.set(index, new java.lang.Integer(axisIndex));
        datasetChanged(new org.jfree.data.general.DatasetChangeEvent(this, getDataset(index)));
    }

    public org.jfree.chart.axis.ValueAxis getRangeAxisForDataset(int index) {
        org.jfree.chart.axis.ValueAxis result = getRangeAxis();
        java.lang.Integer axisIndex = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(index)));
        if (axisIndex != null) {
            result = getRangeAxis(axisIndex.intValue());
        }
        return result;
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer() {
        return getRenderer(0);
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRenderer(int index) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        if (this.renderers.size() > index) {
            result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        }
        return result;
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(0, renderer, true);
    }

    public void setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        setRenderer(0, renderer, notify);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        setRenderer(index, renderer, true);
    }

    public void setRenderer(int index, org.jfree.chart.renderer.category.CategoryItemRenderer renderer, boolean notify) {
        org.jfree.chart.renderer.category.CategoryItemRenderer existing = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(index)));
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        this.renderers.set(index, renderer);
        if (renderer != null) {
            renderer.setPlot(this);
            renderer.addChangeListener(this);
        }
        configureDomainAxes();
        configureRangeAxes();
        if (notify) {
            fireChangeEvent();
        }
    }

    public void setRenderers(org.jfree.chart.renderer.category.CategoryItemRenderer[] renderers) {
        for (int i = 0; i < renderers.length; i++) {
            setRenderer(i, renderers[i], false);
        }
        fireChangeEvent();
    }

    public org.jfree.chart.renderer.category.CategoryItemRenderer getRendererForDataset(org.jfree.data.category.CategoryDataset dataset) {
        org.jfree.chart.renderer.category.CategoryItemRenderer result = null;
        for (int i = 0; i < this.datasets.size(); i++) {
            if (this.datasets.get(i) == dataset) {
                result = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
                break;
            }
        }
        return result;
    }

    public int getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer renderer) {
        return this.renderers.indexOf(renderer);
    }

    public org.jfree.chart.plot.DatasetRenderingOrder getDatasetRenderingOrder() {
        return this.renderingOrder;
    }

    public void setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.renderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getColumnRenderingOrder() {
        return this.columnRenderingOrder;
    }

    public void setColumnRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.columnRenderingOrder = order;
        fireChangeEvent();
    }

    public org.jfree.chart.util.SortOrder getRowRenderingOrder() {
        return this.rowRenderingOrder;
    }

    public void setRowRenderingOrder(org.jfree.chart.util.SortOrder order) {
        if (order == null) {
            throw new java.lang.IllegalArgumentException("Null 'order' argument.");
        }
        this.rowRenderingOrder = order;
        fireChangeEvent();
    }

    public boolean isDomainGridlinesVisible() {
        return this.domainGridlinesVisible;
    }

    public void setDomainGridlinesVisible(boolean visible) {
        if (this.domainGridlinesVisible != visible) {
            this.domainGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.CategoryAnchor getDomainGridlinePosition() {
        return this.domainGridlinePosition;
    }

    public void setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor position) {
        if (position == null) {
            throw new java.lang.IllegalArgumentException("Null 'position' argument.");
        }
        this.domainGridlinePosition = position;
        fireChangeEvent();
    }

    public java.awt.Stroke getDomainGridlineStroke() {
        return this.domainGridlineStroke;
    }

    public void setDomainGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' not permitted.");
        }
        this.domainGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getDomainGridlinePaint() {
        return this.domainGridlinePaint;
    }

    public void setDomainGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    public void setRangeGridlineStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    public void setRangeGridlinePaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getFixedLegendItems() {
        return this.fixedLegendItems;
    }

    public void setFixedLegendItems(org.jfree.chart.LegendItemCollection items) {
        this.fixedLegendItems = items;
        fireChangeEvent();
    }

    public org.jfree.chart.LegendItemCollection getLegendItems() {
        org.jfree.chart.LegendItemCollection result = this.fixedLegendItems;
        if (result == null) {
            result = new org.jfree.chart.LegendItemCollection();
            int count = this.datasets.size();
            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
                org.jfree.data.category.CategoryDataset dataset = getDataset(datasetIndex);
                if (dataset != null) {
                    org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(datasetIndex);
                    if (renderer != null) {
                        int seriesCount = dataset.getRowCount();
                        for (int i = 0; i < seriesCount; i++) {
                            org.jfree.chart.LegendItem item = renderer.getLegendItem(datasetIndex, i);
                            if (item != null) {
                                result.add(item);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

    public void handleClick(int x, int y, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.awt.geom.Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            double java2D = 0.0;
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                java2D = x;
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    java2D = y;
                }

            org.jfree.chart.util.RectangleEdge edge = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation);
            double value = getRangeAxis().java2DToValue(java2D, info.getDataArea(), edge);
            setAnchorValue(value);
            setRangeCrosshairValue(value);
        }
    }

    public void zoom(double percent) {
        if (percent > 0.0) {
            double range = getRangeAxis().getRange().getLength();
            double scaledRange = range * percent;
            getRangeAxis().setRange(this.anchorValue - (scaledRange / 2.0), this.anchorValue + (scaledRange / 2.0));
        } else {
            getRangeAxis().setAutoRange(true);
        }
    }

    public void datasetChanged(org.jfree.data.general.DatasetChangeEvent event) {
        int count = this.rangeAxes.size();
        for (int axisIndex = 0; axisIndex < count; axisIndex++) {
            org.jfree.chart.axis.ValueAxis yAxis = getRangeAxis(axisIndex);
            if (yAxis != null) {
                yAxis.configure();
            }
        }
        if (getParent() != null) {
            getParent().datasetChanged(event);
        } else {
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            e.setType(org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED);
            notifyListeners(e);
        }
    }

    public void rendererChanged(org.jfree.chart.event.RendererChangeEvent event) {
        org.jfree.chart.plot.Plot parent = getParent();
        if (parent != null) {
            if (parent instanceof org.jfree.chart.event.RendererChangeListener) {
                org.jfree.chart.event.RendererChangeListener rcl = ((org.jfree.chart.event.RendererChangeListener) (parent));
                rcl.rendererChanged(event);
            } else {
                throw new java.lang.RuntimeException("The renderer has changed and I don't know what to do!");
            }
        } else {
            configureRangeAxes();
            org.jfree.chart.event.PlotChangeEvent e = new org.jfree.chart.event.PlotChangeEvent(this);
            notifyListeners(e);
        }
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker) {
        addDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addDomainMarker(org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(0, marker, layer);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer) {
        addDomainMarker(index, marker, layer, true);
    }

    public void addDomainMarker(int index, org.jfree.chart.plot.CategoryMarker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' not permitted.");
        }
        if (layer == null) {
            throw new java.lang.IllegalArgumentException("Null 'layer' not permitted.");
        }
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundDomainMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundDomainMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearDomainMarkers() {
        if (this.backgroundDomainMarkers != null) {
            java.util.Set keys = this.backgroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.backgroundDomainMarkers.clear();
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Set keys = this.foregroundDomainMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearDomainMarkers(key.intValue());
            } 
            this.foregroundDomainMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getDomainMarkers(org.jfree.chart.util.Layer layer) {
        return getDomainMarkers(0, layer);
    }

    public java.util.Collection getDomainMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearDomainMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundDomainMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundDomainMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker) {
        return removeDomainMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeDomainMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(0, marker, layer);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeDomainMarker(index, marker, layer, true);
    }

    public boolean removeDomainMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundDomainMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundDomainMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker) {
        addRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public void addRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        addRangeMarker(index, marker, layer, true);
    }

    public void addRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        java.util.Collection markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
            if (markers == null) {
                markers = new java.util.ArrayList();
                this.foregroundRangeMarkers.put(new java.lang.Integer(index), markers);
            }
            markers.add(marker);
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(44).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedDomainAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.rowRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToDomainAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations",org.jfree.chart.plot.CategoryPlot.this.domainAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.anchorValue",org.jfree.chart.plot.CategoryPlot.this.anchorValue);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations",org.jfree.chart.plot.CategoryPlot.this.rangeAxisLocations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible",org.jfree.chart.plot.CategoryPlot.this.domainGridlinesVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairPaint);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers",org.jfree.chart.plot.CategoryPlot.this.backgroundRangeMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("index",index);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairValue);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeAxes",org.jfree.chart.plot.CategoryPlot.this.rangeAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.weight",org.jfree.chart.plot.CategoryPlot.this.weight);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.rangeGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderers",org.jfree.chart.plot.CategoryPlot.this.renderers);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis",org.jfree.chart.plot.CategoryPlot.this.drawSharedDomainAxis);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("marker",marker);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.annotations",org.jfree.chart.plot.CategoryPlot.this.annotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.axisOffset",org.jfree.chart.plot.CategoryPlot.this.axisOffset);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers",org.jfree.chart.plot.CategoryPlot.this.foregroundDomainMarkers);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap",org.jfree.chart.plot.CategoryPlot.this.datasetToRangeAxisMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("layer",layer);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("notify",notify);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.orientation",org.jfree.chart.plot.CategoryPlot.this.orientation);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems",org.jfree.chart.plot.CategoryPlot.this.fixedLegendItems);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition",org.jfree.chart.plot.CategoryPlot.this.domainGridlinePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.renderingOrder",org.jfree.chart.plot.CategoryPlot.this.renderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainAxes",org.jfree.chart.plot.CategoryPlot.this.domainAxes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairVisible);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace",org.jfree.chart.plot.CategoryPlot.this.fixedRangeAxisSpace);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairLockedOnData);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke",org.jfree.chart.plot.CategoryPlot.this.rangeCrosshairStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder",org.jfree.chart.plot.CategoryPlot.this.columnRenderingOrder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke",org.jfree.chart.plot.CategoryPlot.this.domainGridlineStroke);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.datasets",org.jfree.chart.plot.CategoryPlot.this.datasets);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.localizationResources",org.jfree.chart.plot.CategoryPlot.localizationResources);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectInput("org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint",org.jfree.chart.plot.CategoryPlot.this.rangeGridlinePaint);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionEnds();
                }
                if (runtimeAngelicValue)
                    markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));

                if (markers == null) {
                    markers = new java.util.ArrayList();
                    this.backgroundRangeMarkers.put(new java.lang.Integer(index), markers);
                }
                markers.add(marker);
            }

        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    public void clearRangeMarkers() {
        if (this.backgroundRangeMarkers != null) {
            java.util.Set keys = this.backgroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.backgroundRangeMarkers.clear();
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Set keys = this.foregroundRangeMarkers.keySet();
            java.util.Iterator iterator = keys.iterator();
            while (iterator.hasNext()) {
                java.lang.Integer key = ((java.lang.Integer) (iterator.next()));
                clearRangeMarkers(key.intValue());
            } 
            this.foregroundRangeMarkers.clear();
        }
        fireChangeEvent();
    }

    public java.util.Collection getRangeMarkers(org.jfree.chart.util.Layer layer) {
        return getRangeMarkers(0, layer);
    }

    public java.util.Collection getRangeMarkers(int index, org.jfree.chart.util.Layer layer) {
        java.util.Collection result = null;
        java.lang.Integer key = new java.lang.Integer(index);
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            result = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
        } else
            if (layer == org.jfree.chart.util.Layer.BACKGROUND) {
                result = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            }

        if (result != null) {
            result = java.util.Collections.unmodifiableCollection(result);
        }
        return result;
    }

    public void clearRangeMarkers(int index) {
        java.lang.Integer key = new java.lang.Integer(index);
        if (this.backgroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.backgroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        if (this.foregroundRangeMarkers != null) {
            java.util.Collection markers = ((java.util.Collection) (this.foregroundRangeMarkers.get(key)));
            if (markers != null) {
                java.util.Iterator iterator = markers.iterator();
                while (iterator.hasNext()) {
                    org.jfree.chart.plot.Marker m = ((org.jfree.chart.plot.Marker) (iterator.next()));
                    m.removeChangeListener(this);
                } 
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker) {
        return removeRangeMarker(marker, org.jfree.chart.util.Layer.FOREGROUND);
    }

    public boolean removeRangeMarker(org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    public boolean removeRangeMarker(int index, org.jfree.chart.plot.Marker marker, org.jfree.chart.util.Layer layer, boolean notify) {
        if (marker == null) {
            throw new java.lang.IllegalArgumentException("Null 'marker' argument.");
        }
        java.util.ArrayList markers;
        if (layer == org.jfree.chart.util.Layer.FOREGROUND) {
            markers = ((java.util.ArrayList) (this.foregroundRangeMarkers.get(new java.lang.Integer(index))));
        } else {
            markers = ((java.util.ArrayList) (this.backgroundRangeMarkers.get(new java.lang.Integer(index))));
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    public java.awt.Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    public void setRangeCrosshairStroke(java.awt.Stroke stroke) {
        if (stroke == null) {
            throw new java.lang.IllegalArgumentException("Null 'stroke' argument.");
        }
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    public java.awt.Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    public void setRangeCrosshairPaint(java.awt.Paint paint) {
        if (paint == null) {
            throw new java.lang.IllegalArgumentException("Null 'paint' argument.");
        }
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    public java.util.List getAnnotations() {
        return this.annotations;
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        addAnnotation(annotation, true);
    }

    public void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        this.annotations.add(annotation);
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation) {
        return removeAnnotation(annotation, true);
    }

    public boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation annotation, boolean notify) {
        if (annotation == null) {
            throw new java.lang.IllegalArgumentException("Null 'annotation' argument.");
        }
        boolean removed = this.annotations.remove(annotation);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    public void clearAnnotations() {
        this.annotations.clear();
        fireChangeEvent();
    }

    protected org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedDomainAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                    space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
                }

        } else {
            org.jfree.chart.util.RectangleEdge domainEdge = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation);
            if (this.drawSharedDomainAxis) {
                space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);
            }
            for (int i = 0; i < this.domainAxes.size(); i++) {
                org.jfree.chart.axis.Axis xAxis = ((org.jfree.chart.axis.Axis) (this.domainAxes.get(i)));
                if (xAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getDomainAxisEdge(i);
                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, org.jfree.chart.axis.AxisSpace space) {
        if (space == null) {
            space = new org.jfree.chart.axis.AxisSpace();
        }
        if (this.fixedRangeAxisSpace != null) {
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), org.jfree.chart.util.RectangleEdge.TOP);
                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), org.jfree.chart.util.RectangleEdge.BOTTOM);
            } else
                if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), org.jfree.chart.util.RectangleEdge.LEFT);
                    space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), org.jfree.chart.util.RectangleEdge.RIGHT);
                }

        } else {
            for (int i = 0; i < this.rangeAxes.size(); i++) {
                org.jfree.chart.axis.Axis yAxis = ((org.jfree.chart.axis.Axis) (this.rangeAxes.get(i)));
                if (yAxis != null) {
                    org.jfree.chart.util.RectangleEdge edge = getRangeAxisEdge(i);
                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;
    }

    protected org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea) {
        org.jfree.chart.axis.AxisSpace space = new org.jfree.chart.axis.AxisSpace();
        space = calculateRangeAxisSpace(g2, plotArea, space);
        space = calculateDomainAxisSpace(g2, plotArea, space);
        return space;
    }

    public void draw(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area, java.awt.geom.Point2D anchor, org.jfree.chart.plot.PlotState parentState, org.jfree.chart.plot.PlotRenderingInfo state) {
        boolean b1 = area.getWidth() <= org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW;
        boolean b2 = area.getHeight() <= org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW;
        if (b1 || b2) {
            return;
        }
        if (state == null) {
            state = new org.jfree.chart.plot.PlotRenderingInfo(null);
        }
        state.setPlotArea(area);
        org.jfree.chart.util.RectangleInsets insets = getInsets();
        insets.trim(area);
        org.jfree.chart.axis.AxisSpace space = calculateAxisSpace(g2, area);
        java.awt.geom.Rectangle2D dataArea = space.shrink(area, null);
        this.axisOffset.trim(dataArea);
        state.setDataArea(dataArea);
        if (getRenderer() != null) {
            getRenderer().drawBackground(g2, this, dataArea);
        } else {
            drawBackground(g2, dataArea);
        }
        java.util.Map axisStateMap = drawAxes(g2, area, dataArea, state);
        java.awt.Shape savedClip = g2.getClip();
        g2.clip(dataArea);
        drawDomainGridlines(g2, dataArea);
        org.jfree.chart.axis.AxisState rangeAxisState = ((org.jfree.chart.axis.AxisState) (axisStateMap.get(getRangeAxis())));
        if (rangeAxisState == null) {
            if (parentState != null) {
                rangeAxisState = ((org.jfree.chart.axis.AxisState) (parentState.getSharedAxisStates().get(getRangeAxis())));
            }
        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.BACKGROUND);
        }
        boolean foundData = false;
        java.awt.Composite originalComposite = g2.getComposite();
        g2.setComposite(java.awt.AlphaComposite.getInstance(java.awt.AlphaComposite.SRC_OVER, getForegroundAlpha()));
        org.jfree.chart.plot.DatasetRenderingOrder order = getDatasetRenderingOrder();
        if (order == org.jfree.chart.plot.DatasetRenderingOrder.FORWARD) {
            int datasetCount = this.datasets.size();
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = 0; i < datasetCount; i++) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = 0; i < datasetCount; i++) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        } else {
            int datasetCount = this.datasets.size();
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.BACKGROUND, state);
                }
            }
            for (int i = this.datasets.size() - 1; i >= 0; i--) {
                foundData = render(g2, dataArea, i, state) || foundData;
            }
            for (int i = datasetCount - 1; i >= 0; i--) {
                org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(i);
                if (r != null) {
                    org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(i);
                    org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(i);
                    r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, org.jfree.chart.util.Layer.FOREGROUND, state);
                }
            }
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawDomainMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        for (int i = 0; i < this.renderers.size(); i++) {
            drawRangeMarkers(g2, dataArea, i, org.jfree.chart.util.Layer.FOREGROUND);
        }
        drawAnnotations(g2, dataArea, state);
        g2.setClip(savedClip);
        g2.setComposite(originalComposite);
        if (!foundData) {
            drawNoDataMessage(g2, dataArea);
        }
        if (isRangeCrosshairVisible()) {
            drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint());
        }
        if (getRenderer() != null) {
            getRenderer().drawOutline(g2, this, dataArea);
        } else {
            drawOutline(g2, dataArea);
        }
    }

    public void drawBackground(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D area) {
        fillBackground(g2, area, this.orientation);
        drawBackgroundImage(g2, area);
    }

    protected java.util.Map drawAxes(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D plotArea, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo plotState) {
        org.jfree.chart.axis.AxisCollection axisCollection = new org.jfree.chart.axis.AxisCollection();
        for (int index = 0; index < this.domainAxes.size(); index++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(index)));
            if (xAxis != null) {
                axisCollection.add(xAxis, getDomainAxisEdge(index));
            }
        }
        for (int index = 0; index < this.rangeAxes.size(); index++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(index)));
            if (yAxis != null) {
                axisCollection.add(yAxis, getRangeAxisEdge(index));
            }
        }
        java.util.Map axisStateMap = new java.util.HashMap();
        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());
        java.util.Iterator iterator = axisCollection.getAxesAtTop().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.TOP, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());
        iterator = axisCollection.getAxesAtBottom().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtLeft().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.LEFT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());
        iterator = axisCollection.getAxesAtRight().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.axis.Axis axis = ((org.jfree.chart.axis.Axis) (iterator.next()));
            if (axis != null) {
                org.jfree.chart.axis.AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, org.jfree.chart.util.RectangleEdge.RIGHT, plotState);
                cursor = axisState.getCursor();
                axisStateMap.put(axis, axisState);
            }
        } 
        return axisStateMap;
    }

    public boolean render(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.plot.PlotRenderingInfo info) {
        boolean foundData = false;
        org.jfree.data.category.CategoryDataset currentDataset = getDataset(index);
        org.jfree.chart.renderer.category.CategoryItemRenderer renderer = getRenderer(index);
        org.jfree.chart.axis.CategoryAxis domainAxis = getDomainAxisForDataset(index);
        org.jfree.chart.axis.ValueAxis rangeAxis = getRangeAxisForDataset(index);
        boolean hasData = !org.jfree.data.general.DatasetUtilities.isEmptyOrNull(currentDataset);
        if (hasData && (renderer != null)) {
            foundData = true;
            org.jfree.chart.renderer.category.CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info);
            int columnCount = currentDataset.getColumnCount();
            int rowCount = currentDataset.getRowCount();
            int passCount = renderer.getPassCount();
            for (int pass = 0; pass < passCount; pass++) {
                if (this.columnRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                    for (int column = 0; column < columnCount; column++) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                } else {
                    for (int column = columnCount - 1; column >= 0; column--) {
                        if (this.rowRenderingOrder == org.jfree.chart.util.SortOrder.ASCENDING) {
                            for (int row = 0; row < rowCount; row++) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        } else {
                            for (int row = rowCount - 1; row >= 0; row--) {
                                renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass);
                            }
                        }
                    }
                }
            }
        }
        return foundData;
    }

    protected void drawDomainGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea) {
        if (isDomainGridlinesVisible()) {
            org.jfree.chart.axis.CategoryAnchor anchor = getDomainGridlinePosition();
            org.jfree.chart.util.RectangleEdge domainAxisEdge = getDomainAxisEdge();
            java.awt.Stroke gridStroke = getDomainGridlineStroke();
            java.awt.Paint gridPaint = getDomainGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.data.category.CategoryDataset data = getDataset();
                if (data != null) {
                    org.jfree.chart.axis.CategoryAxis axis = getDomainAxis();
                    if (axis != null) {
                        int columnCount = data.getColumnCount();
                        for (int c = 0; c < columnCount; c++) {
                            double xx = axis.getCategoryJava2DCoordinate(anchor, c, columnCount, dataArea, domainAxisEdge);
                            org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                            if (renderer1 != null) {
                                renderer1.drawDomainGridline(g2, this, dataArea, xx);
                            }
                        }
                    }
                }
            }
        }
    }

    protected void drawRangeGridlines(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, java.util.List ticks) {
        if (isRangeGridlinesVisible()) {
            java.awt.Stroke gridStroke = getRangeGridlineStroke();
            java.awt.Paint gridPaint = getRangeGridlinePaint();
            if ((gridStroke != null) && (gridPaint != null)) {
                org.jfree.chart.axis.ValueAxis axis = getRangeAxis();
                if (axis != null) {
                    java.util.Iterator iterator = ticks.iterator();
                    while (iterator.hasNext()) {
                        org.jfree.chart.axis.ValueTick tick = ((org.jfree.chart.axis.ValueTick) (iterator.next()));
                        org.jfree.chart.renderer.category.CategoryItemRenderer renderer1 = getRenderer();
                        if (renderer1 != null) {
                            renderer1.drawRangeGridline(g2, this, getRangeAxis(), dataArea, tick.getValue());
                        }
                    } 
                }
            }
        }
    }

    protected void drawAnnotations(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotRenderingInfo info) {
        java.util.Iterator iterator = getAnnotations().iterator();
        while (iterator.hasNext()) {
            org.jfree.chart.annotations.CategoryAnnotation annotation = ((org.jfree.chart.annotations.CategoryAnnotation) (iterator.next()));
            annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info);
        } 
    }

    protected void drawDomainMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getDomainMarkers(index, layer);
        org.jfree.chart.axis.CategoryAxis axis = getDomainAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.CategoryMarker marker = ((org.jfree.chart.plot.CategoryMarker) (iterator.next()));
                r.drawDomainMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeMarkers(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, int index, org.jfree.chart.util.Layer layer) {
        org.jfree.chart.renderer.category.CategoryItemRenderer r = getRenderer(index);
        if (r == null) {
            return;
        }
        java.util.Collection markers = getRangeMarkers(index, layer);
        org.jfree.chart.axis.ValueAxis axis = getRangeAxisForDataset(index);
        if ((markers != null) && (axis != null)) {
            java.util.Iterator iterator = markers.iterator();
            while (iterator.hasNext()) {
                org.jfree.chart.plot.Marker marker = ((org.jfree.chart.plot.Marker) (iterator.next()));
                r.drawRangeMarker(g2, this, axis, marker, dataArea);
            } 
        }
    }

    protected void drawRangeLine(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, double value, java.awt.Stroke stroke, java.awt.Paint paint) {
        double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge());
        java.awt.geom.Line2D line = null;
        if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            line = new java.awt.geom.Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY());
        } else
            if (this.orientation == org.jfree.chart.plot.PlotOrientation.VERTICAL) {
                line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), java2D, dataArea.getMaxX(), java2D);
            }

        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    protected void drawRangeCrosshair(java.awt.Graphics2D g2, java.awt.geom.Rectangle2D dataArea, org.jfree.chart.plot.PlotOrientation orientation, double value, org.jfree.chart.axis.ValueAxis axis, java.awt.Stroke stroke, java.awt.Paint paint) {
        if (!axis.getRange().contains(value)) {
            return;
        }
        java.awt.geom.Line2D line = null;
        if (orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.BOTTOM);
            line = new java.awt.geom.Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, org.jfree.chart.util.RectangleEdge.LEFT);
            line = new java.awt.geom.Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

    public org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis axis) {
        org.jfree.data.Range result = null;
        java.util.List mappedDatasets = new java.util.ArrayList();
        int rangeIndex = this.rangeAxes.indexOf(axis);
        if (rangeIndex >= 0) {
            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
        } else
            if (axis == getRangeAxis()) {
                mappedDatasets.addAll(datasetsMappedToRangeAxis(0));
            }

        java.util.Iterator iterator = mappedDatasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset d = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            org.jfree.chart.renderer.category.CategoryItemRenderer r = getRendererForDataset(d);
            if (r != null) {
                result = org.jfree.data.Range.combine(result, r.findRangeBounds(d));
            }
        } 
        return result;
    }

    private java.util.List datasetsMappedToDomainAxis(int axisIndex) {
        java.util.List result = new java.util.ArrayList();
        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
            java.lang.Object dataset = this.datasets.get(datasetIndex);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToDomainAxisMap.get(datasetIndex)));
                if (m == null) {
                    if (axisIndex == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == axisIndex) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    private java.util.List datasetsMappedToRangeAxis(int index) {
        java.util.List result = new java.util.ArrayList();
        for (int i = 0; i < this.datasets.size(); i++) {
            java.lang.Object dataset = this.datasets.get(i);
            if (dataset != null) {
                java.lang.Integer m = ((java.lang.Integer) (this.datasetToRangeAxisMap.get(i)));
                if (m == null) {
                    if (index == 0) {
                        result.add(dataset);
                    }
                } else {
                    if (m.intValue() == index) {
                        result.add(dataset);
                    }
                }
            }
        }
        return result;
    }

    public int getWeight() {
        return this.weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
        fireChangeEvent();
    }

    public org.jfree.chart.axis.AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    public void setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public org.jfree.chart.axis.AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    public void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    public java.util.List getCategories() {
        java.util.List result = null;
        if (getDataset() != null) {
            result = java.util.Collections.unmodifiableList(getDataset().getColumnKeys());
        }
        return result;
    }

    public java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis axis) {
        java.util.List result = new java.util.ArrayList();
        int axisIndex = this.domainAxes.indexOf(axis);
        java.util.List datasets = datasetsMappedToDomainAxis(axisIndex);
        java.util.Iterator iterator = datasets.iterator();
        while (iterator.hasNext()) {
            org.jfree.data.category.CategoryDataset dataset = ((org.jfree.data.category.CategoryDataset) (iterator.next()));
            for (int i = 0; i < dataset.getColumnCount(); i++) {
                java.lang.Comparable category = dataset.getColumnKey(i);
                if (!result.contains(category)) {
                    result.add(category);
                }
            }
        } 
        return result;
    }

    public boolean getDrawSharedDomainAxis() {
        return this.drawSharedDomainAxis;
    }

    public void setDrawSharedDomainAxis(boolean draw) {
        this.drawSharedDomainAxis = draw;
        fireChangeEvent();
    }

    public boolean isDomainZoomable() {
        return false;
    }

    public boolean isRangeZoomable() {
        return true;
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
    }

    public void zoomDomainAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        zoomRangeAxes(factor, state, source, false);
    }

    public void zoomRangeAxes(double factor, org.jfree.chart.plot.PlotRenderingInfo info, java.awt.geom.Point2D source, boolean useAnchor) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                if (useAnchor) {
                    double sourceY = source.getY();
                    if (this.orientation == org.jfree.chart.plot.PlotOrientation.HORIZONTAL) {
                        sourceY = source.getX();
                    }
                    double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                    rangeAxis.resizeRange(factor, anchorY);
                } else {
                    rangeAxis.resizeRange(factor);
                }
            }
        }
    }

    public void zoomRangeAxes(double lowerPercent, double upperPercent, org.jfree.chart.plot.PlotRenderingInfo state, java.awt.geom.Point2D source) {
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis rangeAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (rangeAxis != null) {
                rangeAxis.zoomRange(lowerPercent, upperPercent);
            }
        }
    }

    public double getAnchorValue() {
        return this.anchorValue;
    }

    public void setAnchorValue(double value) {
        setAnchorValue(value, true);
    }

    public void setAnchorValue(double value, boolean notify) {
        this.anchorValue = value;
        if (notify) {
            fireChangeEvent();
        }
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.chart.plot.CategoryPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }
        org.jfree.chart.plot.CategoryPlot that = ((org.jfree.chart.plot.CategoryPlot) (obj));
        if (this.orientation != that.orientation) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
            return false;
        }
        if (!this.domainAxes.equals(that.domainAxes)) {
            return false;
        }
        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
            return false;
        }
        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {
            return false;
        }
        if (!this.rangeAxes.equals(that.rangeAxes)) {
            return false;
        }
        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.renderers, that.renderers)) {
            return false;
        }
        if (this.renderingOrder != that.renderingOrder) {
            return false;
        }
        if (this.columnRenderingOrder != that.columnRenderingOrder) {
            return false;
        }
        if (this.rowRenderingOrder != that.rowRenderingOrder) {
            return false;
        }
        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
            return false;
        }
        if (this.domainGridlinePosition != that.domainGridlinePosition) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
            return false;
        }
        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
            return false;
        }
        if (this.anchorValue != that.anchorValue) {
            return false;
        }
        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
            return false;
        }
        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
            return false;
        }
        if (!org.jfree.chart.util.PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
            return false;
        }
        if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.annotations, that.annotations)) {
            return false;
        }
        if (this.weight != that.weight) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {
            return false;
        }
        return true;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.chart.plot.CategoryPlot clone = ((org.jfree.chart.plot.CategoryPlot) (super.clone()));
        clone.domainAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                org.jfree.chart.axis.CategoryAxis clonedAxis = ((org.jfree.chart.axis.CategoryAxis) (xAxis.clone()));
                clone.setDomainAxis(i, clonedAxis);
            }
        }
        clone.domainAxisLocations = ((org.jfree.chart.util.ObjectList) (this.domainAxisLocations.clone()));
        clone.rangeAxes = new org.jfree.chart.util.ObjectList();
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                org.jfree.chart.axis.ValueAxis clonedAxis = ((org.jfree.chart.axis.ValueAxis) (yAxis.clone()));
                clone.setRangeAxis(i, clonedAxis);
            }
        }
        clone.rangeAxisLocations = ((org.jfree.chart.util.ObjectList) (this.rangeAxisLocations.clone()));
        clone.datasets = ((org.jfree.chart.util.ObjectList) (this.datasets.clone()));
        for (int i = 0; i < clone.datasets.size(); i++) {
            org.jfree.data.category.CategoryDataset dataset = clone.getDataset(i);
            if (dataset != null) {
                dataset.addChangeListener(clone);
            }
        }
        clone.datasetToDomainAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToDomainAxisMap.clone()));
        clone.datasetToRangeAxisMap = ((org.jfree.chart.util.ObjectList) (this.datasetToRangeAxisMap.clone()));
        clone.renderers = ((org.jfree.chart.util.ObjectList) (this.renderers.clone()));
        if (this.fixedDomainAxisSpace != null) {
            clone.fixedDomainAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedDomainAxisSpace)));
        }
        if (this.fixedRangeAxisSpace != null) {
            clone.fixedRangeAxisSpace = ((org.jfree.chart.axis.AxisSpace) (org.jfree.chart.util.ObjectUtilities.clone(this.fixedRangeAxisSpace)));
        }
        return clone;
    }

    private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException {
        stream.defaultWriteObject();
        org.jfree.chart.util.SerialUtilities.writeStroke(this.domainGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.domainGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeGridlinePaint, stream);
        org.jfree.chart.util.SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);
        org.jfree.chart.util.SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);
    }

    private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException {
        stream.defaultReadObject();
        this.domainGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.domainGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeGridlineStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeGridlinePaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        this.rangeCrosshairStroke = org.jfree.chart.util.SerialUtilities.readStroke(stream);
        this.rangeCrosshairPaint = org.jfree.chart.util.SerialUtilities.readPaint(stream);
        for (int i = 0; i < this.domainAxes.size(); i++) {
            org.jfree.chart.axis.CategoryAxis xAxis = ((org.jfree.chart.axis.CategoryAxis) (this.domainAxes.get(i)));
            if (xAxis != null) {
                xAxis.setPlot(this);
                xAxis.addChangeListener(this);
            }
        }
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            org.jfree.chart.axis.ValueAxis yAxis = ((org.jfree.chart.axis.ValueAxis) (this.rangeAxes.get(i)));
            if (yAxis != null) {
                yAxis.setPlot(this);
                yAxis.addChangeListener(this);
            }
        }
        int datasetCount = this.datasets.size();
        for (int i = 0; i < datasetCount; i++) {
            org.jfree.data.general.Dataset dataset = ((org.jfree.data.general.Dataset) (this.datasets.get(i)));
            if (dataset != null) {
                dataset.addChangeListener(this);
            }
        }
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            org.jfree.chart.renderer.category.CategoryItemRenderer renderer = ((org.jfree.chart.renderer.category.CategoryItemRenderer) (this.renderers.get(i)));
            if (renderer != null) {
                renderer.addChangeListener(this);
            }
        }
    }
}
11:47:05.977 [pool-1-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
11:47:05.981 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
11:47:05.982 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2248 which is executed by 18 tests
590439200
11:47:12.338 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:47:20.919 [pool-284-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:20.922 [pool-284-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:20.923 [pool-284-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2248.
11:47:20.924 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:47:30.240 [pool-290-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:30.240 [pool-290-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:30.241 [pool-290-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2248.
11:47:30.242 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
11:47:30.244 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2239 which is executed by 18 tests
590439200
11:47:37.489 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:47:45.668 [pool-296-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:45.669 [pool-296-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:45.670 [pool-296-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2239.
11:47:45.670 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:47:53.660 [pool-302-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:53.662 [pool-302-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:47:53.663 [pool-302-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2239.
11:47:53.663 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
11:47:53.664 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2218 which is executed by 18 tests
590439200
11:47:59.740 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
11:47:59.745 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2217 which is executed by 18 tests
590439200
11:48:05.248 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:48:14.530 [pool-308-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:14.532 [pool-308-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:14.533 [pool-308-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2217.
11:48:14.534 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
11:48:14.535 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2201 which is executed by 18 tests
590439200
11:48:21.145 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
11:48:21.146 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:2200 which is executed by 18 tests
590439200
11:48:26.968 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:48:35.851 [pool-314-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:35.853 [pool-314-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:35.854 [pool-314-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:2200.
11:48:35.855 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
11:48:35.855 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1871 which is executed by 18 tests
590439200
11:48:42.134 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
11:48:42.135 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1868 which is executed by 18 tests
590439200
11:48:47.803 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:48:55.068 [pool-320-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:55.071 [pool-320-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:48:55.071 [pool-320-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1868.
11:48:55.072 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
11:48:55.072 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1867 which is executed by 18 tests
590439200
11:49:01.915 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:49:09.390 [pool-326-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:09.393 [pool-326-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:09.394 [pool-326-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1867.
11:49:09.395 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
11:49:09.395 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1866 which is executed by 18 tests
590439200
11:49:16.427 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
11:49:16.432 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1862 which is executed by 18 tests
590439200
11:49:22.201 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:49:30.366 [pool-332-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:30.367 [pool-332-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:30.368 [pool-332-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1862.
11:49:30.369 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:49:38.719 [pool-338-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:38.720 [pool-338-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:38.720 [pool-338-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1862.
11:49:38.721 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
11:49:38.722 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1858 which is executed by 18 tests
590439200
11:49:45.389 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:49:52.942 [pool-344-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:52.945 [pool-344-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:49:52.945 [pool-344-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1858.
11:49:52.946 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:50:00.876 [pool-350-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:00.877 [pool-350-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:00.877 [pool-350-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1858.
11:50:00.878 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
11:50:00.879 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1857 which is executed by 18 tests
590439200
11:50:06.763 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
11:50:06.765 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1856 which is executed by 18 tests
590439200
11:50:12.327 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:50:20.519 [pool-356-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:20.520 [pool-356-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:20.521 [pool-356-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1856.
11:50:20.522 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
11:50:20.522 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1855 which is executed by 18 tests
590439200
11:50:26.182 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
11:50:26.184 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1277 which is executed by 18 tests
590439200
11:50:32.597 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
11:50:32.601 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1276 which is executed by 18 tests
590439200
11:50:39.753 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:50:48.578 [pool-362-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:48.583 [pool-362-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:50:48.584 [pool-362-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1276.
11:50:48.584 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
11:50:48.585 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1274 which is executed by 18 tests
590439200
11:50:54.327 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:51:03.102 [pool-368-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:03.105 [pool-368-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:03.106 [pool-368-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1274.
11:51:03.106 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
11:51:03.107 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1244 which is executed by 18 tests
590439200
11:51:08.373 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
11:51:08.374 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1243 which is executed by 18 tests
590439200
11:51:15.407 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:51:23.498 [pool-374-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:23.501 [pool-374-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:23.502 [pool-374-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1243.
11:51:23.502 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
11:51:23.505 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1241 which is executed by 18 tests
590439200
11:51:29.313 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:51:38.127 [pool-380-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:38.128 [pool-380-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:38.129 [pool-380-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1241.
11:51:38.130 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
11:51:38.131 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1178 which is executed by 18 tests
590439200
11:51:43.736 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
11:51:43.742 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1176 which is executed by 18 tests
590439200
11:51:49.383 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:51:56.920 [pool-386-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:56.922 [pool-386-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:51:56.923 [pool-386-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1176.
11:51:56.924 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
11:51:56.925 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1175 which is executed by 18 tests
590439200
11:52:02.639 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:52:11.110 [pool-392-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:11.112 [pool-392-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:11.113 [pool-392-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1175.
11:52:11.114 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:52:18.981 [pool-398-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:18.983 [pool-398-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:18.984 [pool-398-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1175.
11:52:18.985 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
11:52:18.985 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1174 which is executed by 18 tests
590439200
11:52:24.805 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
11:52:24.810 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1151 which is executed by 18 tests
590439200
11:52:31.475 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
11:52:31.476 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1147 which is executed by 18 tests
590439200
11:52:36.905 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:52:45.955 [pool-404-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:45.957 [pool-404-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:45.960 [pool-404-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1147.
11:52:45.965 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:52:54.049 [pool-410-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:54.050 [pool-410-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:52:54.050 [pool-410-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1147.
11:52:54.051 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
11:52:54.052 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1146 which is executed by 18 tests
590439200
11:52:59.568 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
11:52:59.574 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1145 which is executed by 18 tests
590439200
11:53:05.098 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:53:12.682 [pool-416-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:12.683 [pool-416-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:12.683 [pool-416-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1145.
11:53:12.686 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
11:53:12.687 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1089 which is executed by 18 tests
590439200
11:53:18.396 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
11:53:18.397 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1086 which is executed by 18 tests
590439200
11:53:23.766 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:53:31.742 [pool-422-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:31.743 [pool-422-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:31.746 [pool-422-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1086.
11:53:31.746 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:53:40.454 [pool-428-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:40.455 [pool-428-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:40.455 [pool-428-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1086.
11:53:40.456 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
11:53:40.457 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1085 which is executed by 18 tests
590439200
11:53:46.692 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:53:56.249 [pool-434-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:56.250 [pool-434-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:53:56.251 [pool-434-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1085.
11:53:56.251 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
11:53:56.252 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1081 which is executed by 18 tests
590439200
11:54:01.920 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:54:09.137 [pool-440-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:09.143 [pool-440-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:09.143 [pool-440-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1081.
11:54:09.144 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:54:17.802 [pool-446-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:17.802 [pool-446-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'location' for index 0 not permitted., testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'location' for index 0 not permitted.]
11:54:17.803 [pool-446-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1081.
11:54:17.804 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
11:54:17.804 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1052 which is executed by 18 tests
590439200
11:54:23.805 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
11:54:23.817 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:1051 which is executed by 18 tests
590439200
11:54:29.149 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:54:36.783 [pool-452-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:36.786 [pool-452-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:36.787 [pool-452-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:1051.
11:54:36.787 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
11:54:36.788 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:905 which is executed by 18 tests
590439200
11:54:42.015 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
11:54:42.020 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:898 which is executed by 18 tests
590439200
11:54:47.427 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:54:55.486 [pool-458-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:55.489 [pool-458-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:54:55.489 [pool-458-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:898.
11:54:55.491 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:55:03.195 [pool-464-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:03.196 [pool-464-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:03.197 [pool-464-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:898.
11:55:03.197 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
11:55:03.198 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:896 which is executed by 18 tests
590439200
11:55:09.232 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:55:17.167 [pool-470-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:17.169 [pool-470-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:17.170 [pool-470-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:896.
11:55:17.170 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
11:55:17.171 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:895 which is executed by 18 tests
590439200
11:55:22.600 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:55:30.842 [pool-476-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:30.845 [pool-476-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:30.846 [pool-476-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:895.
11:55:30.847 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:55:38.632 [pool-482-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:38.633 [pool-482-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:55:38.633 [pool-482-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:895.
11:55:38.634 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
11:55:38.634 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:894 which is executed by 18 tests
590439200
11:55:44.962 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
11:55:44.967 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:873 which is executed by 18 tests
590439200
11:55:50.534 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
11:55:50.535 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:869 which is executed by 18 tests
590439200
11:55:57.209 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:56:05.634 [pool-488-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:05.635 [pool-488-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:05.636 [pool-488-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:869.
11:56:05.637 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:56:14.665 [pool-494-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:14.667 [pool-494-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:14.667 [pool-494-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:869.
11:56:14.668 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
11:56:14.668 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:868 which is executed by 18 tests
590439200
11:56:21.208 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
11:56:21.208 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:867 which is executed by 18 tests
590439200
11:56:27.651 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:56:36.317 [pool-500-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:36.318 [pool-500-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:36.318 [pool-500-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:867.
11:56:36.319 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
11:56:36.320 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:808 which is executed by 18 tests
590439200
11:56:42.431 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
11:56:42.435 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:805 which is executed by 18 tests
590439200
11:56:48.856 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:56:56.647 [pool-506-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:56.650 [pool-506-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:56:56.650 [pool-506-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:805.
11:56:56.652 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:57:05.343 [pool-512-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:05.346 [pool-512-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:05.347 [pool-512-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:805.
11:57:05.347 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
11:57:05.348 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:804 which is executed by 18 tests
590439200
11:57:11.228 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:57:19.094 [pool-518-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:19.095 [pool-518-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:19.096 [pool-518-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:804.
11:57:19.096 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
11:57:19.097 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:800 which is executed by 18 tests
590439200
11:57:26.250 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:57:35.148 [pool-524-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:35.149 [pool-524-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:35.150 [pool-524-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:800.
11:57:35.150 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:57:44.416 [pool-530-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:57:44.416 [pool-530-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'location' for index 0 not permitted., testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): Null 'location' for index 0 not permitted.]
11:57:44.417 [pool-530-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:800.
11:57:44.417 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
11:57:44.418 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:768 which is executed by 18 tests
590439200
11:57:49.937 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
11:57:49.938 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.CategoryPlot:767 which is executed by 18 tests
590439200
11:57:56.991 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:58:04.130 [pool-536-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:58:04.131 [pool-536-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:58:04.132 [pool-536-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.CategoryPlot:767.
11:58:04.137 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
11:58:04.138 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:535 which is executed by 22 tests
-1997438885
11:58:10.618 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
11:58:10.624 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Marker:534 which is executed by 23 tests
-1997438885
11:58:16.971 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:58:25.353 [pool-542-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:58:25.353 [pool-542-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
11:58:25.354 [pool-542-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Marker:534.
11:58:25.354 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
11:58:25.355 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4043 which is executed by 23 tests
-1690918013
11:58:30.965 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
11:58:30.966 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4041 which is executed by 23 tests
-1690918013
11:58:36.612 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:58:44.729 [pool-548-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:58:44.730 [pool-548-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:58:44.730 [pool-548-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4041.
11:58:44.731 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
11:58:44.732 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4040 which is executed by 23 tests
-1690918013
11:58:51.425 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:58:59.100 [pool-554-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:58:59.101 [pool-554-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:58:59.101 [pool-554-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4040.
11:58:59.102 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
11:58:59.102 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4039 which is executed by 23 tests
-1690918013
11:59:05.995 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
11:59:05.996 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4035 which is executed by 23 tests
-1690918013
11:59:11.532 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:59:19.255 [pool-560-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:19.259 [pool-560-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:19.259 [pool-560-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4035.
11:59:19.260 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
11:59:27.538 [pool-566-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:27.540 [pool-566-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:27.541 [pool-566-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4035.
11:59:27.541 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
11:59:27.542 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4034 which is executed by 23 tests
-1690918013
11:59:33.330 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:59:42.647 [pool-572-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:42.649 [pool-572-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:42.650 [pool-572-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4034.
11:59:42.650 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
11:59:42.651 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:4033 which is executed by 23 tests
-1690918013
11:59:49.345 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
11:59:58.261 [pool-578-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:58.261 [pool-578-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
11:59:58.262 [pool-578-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:4033.
11:59:58.262 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
11:59:58.263 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1374 which is executed by 23 tests
-1690918013
12:00:04.853 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
12:00:04.856 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1373 which is executed by 23 tests
-1690918013
12:00:11.962 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:00:20.125 [pool-584-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:20.126 [pool-584-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:20.126 [pool-584-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1373.
12:00:20.127 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
12:00:20.128 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1370 which is executed by 23 tests
-1690918013
12:00:25.996 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:00:35.537 [pool-590-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:35.540 [pool-590-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:35.541 [pool-590-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1370.
12:00:35.545 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
12:00:35.546 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1358 which is executed by 23 tests
-1690918013
12:00:42.215 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
12:00:42.216 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1357 which is executed by 23 tests
-1690918013
12:00:48.988 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:00:57.773 [pool-596-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:57.774 [pool-596-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:00:57.774 [pool-596-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1357.
12:00:57.775 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
12:00:57.776 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1354 which is executed by 23 tests
-1690918013
12:01:03.876 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:01:13.479 [pool-602-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:13.480 [pool-602-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:13.481 [pool-602-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1354.
12:01:13.481 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
12:01:13.482 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1277 which is executed by 23 tests
-1690918013
12:01:19.744 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
12:01:19.745 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1275 which is executed by 23 tests
-1690918013
12:01:26.193 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:01:35.053 [pool-608-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:35.054 [pool-608-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:35.054 [pool-608-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1275.
12:01:35.055 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
12:01:35.056 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1274 which is executed by 23 tests
-1690918013
12:01:41.327 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:01:49.944 [pool-614-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:49.947 [pool-614-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:49.947 [pool-614-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1274.
12:01:49.948 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
12:01:57.562 [pool-620-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:57.563 [pool-620-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:01:57.564 [pool-620-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1274.
12:01:57.565 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
12:01:57.566 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1273 which is executed by 23 tests
-1690918013
12:02:05.016 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
12:02:05.021 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1166 which is executed by 23 tests
-1690918013
12:02:12.572 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
12:02:12.576 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1162 which is executed by 23 tests
-1690918013
12:02:19.852 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:02:29.638 [pool-626-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:29.639 [pool-626-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:29.639 [pool-626-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1162.
12:02:29.640 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
12:02:39.570 [pool-632-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:39.571 [pool-632-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:39.571 [pool-632-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1162.
12:02:39.572 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
12:02:39.573 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1161 which is executed by 23 tests
-1690918013
12:02:45.131 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
12:02:45.137 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:1160 which is executed by 23 tests
-1690918013
12:02:50.996 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:02:59.272 [pool-638-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:59.274 [pool-638-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:02:59.275 [pool-638-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:1160.
12:02:59.275 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
12:02:59.276 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:866 which is executed by 23 tests
-1690918013
12:03:04.967 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
12:03:04.968 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:862 which is executed by 23 tests
-1690918013
12:03:10.397 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:03:18.920 [pool-644-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:18.921 [pool-644-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:18.921 [pool-644-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:862.
12:03:18.922 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
12:03:28.207 [pool-650-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:28.210 [pool-650-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:28.210 [pool-650-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:862.
12:03:28.211 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
12:03:28.212 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:861 which is executed by 23 tests
-1690918013
12:03:34.128 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
12:03:34.129 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.XYPlot:860 which is executed by 23 tests
-1690918013
12:03:40.805 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:03:50.966 [pool-656-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:50.969 [pool-656-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.XYPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.XYPlotTests): null]
12:03:50.969 [pool-656-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.XYPlot:860.
12:03:50.970 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
12:03:50.971 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:903 which is executed by 35 tests
2490626
12:03:56.690 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
12:03:56.692 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.jfree.chart.plot.Plot:902 which is executed by 35 tests
2490626
12:04:02.118 [pool-1-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
12:04:10.259 [pool-662-thread-1] DEBUG tests.output - Failing tests with false: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
12:04:10.261 [pool-662-thread-1] DEBUG tests.output - Failing tests with true: 
[testRemoveDomainMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null, testRemoveRangeMarker(org.jfree.chart.plot.junit.CategoryPlotTests): null]
12:04:10.261 [pool-662-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.chart.plot.Plot:902.
12:04:10.266 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
12:04:10.796 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 933
12:04:10.803 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 8586
12:04:10.804 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 109
12:04:10.805 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
12:04:10.805 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
12:04:10.808 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
12:04:10.812 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
12:04:10.813 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 1910920ms
12:04:10.813 [pool-1-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
