TernarySplitter  in 253ms
Preconditions.checkArgument(child.parent == null, "new child has existing parent")
Preconditions.checkArgument(child.next == null, "new child has existing sibling")
Preconditions.checkArgument(left.parent == null, "first new child has existing parent")
Preconditions.checkArgument(left.next == null, "first new child has existing sibling")
Preconditions.checkArgument(right.parent == null, "second new child has existing parent")
Preconditions.checkArgument(right.next == null, "second new child has existing sibling")
Preconditions.checkArgument(left.parent == null)
Preconditions.checkArgument(left.next == null)
Preconditions.checkArgument(mid.parent == null)
Preconditions.checkArgument(mid.next == null)
Preconditions.checkArgument(right.parent == null)
Preconditions.checkArgument(right.next == null)
Preconditions.checkArgument(left.parent == null)
Preconditions.checkArgument(left.next == null)
Preconditions.checkArgument(mid.parent == null)
Preconditions.checkArgument(mid.next == null)
Preconditions.checkArgument(mid2.parent == null)
Preconditions.checkArgument(mid2.next == null)
Preconditions.checkArgument(right.parent == null)
Preconditions.checkArgument(right.next == null)
Preconditions.checkArgument(children[i - 1].parent == null)
Preconditions.checkArgument(children[children.length - 1].parent == null)
return first != null
Preconditions.checkArgument(child.parent == null)
Preconditions.checkArgument(child.next == null)
Preconditions.checkArgument(child.parent == null)
Preconditions.checkArgument(child.next == null)
Preconditions.checkArgument(child.parent == null)
Preconditions.checkArgument(child.parent == null)
Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.")
Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.")
Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.")
Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.")
Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.")
Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.")
Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.")
Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.")
Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.")
return current != null
return cur != null
return (first != null) && (first == last)
return (first != null) && (first != last)
return checkTreeEqualsImpl(node2) == null
return checkTreeTypeAwareEqualsImpl(node2) == null
Preconditions.checkState(parent != null)
Preconditions.checkArgument(prev.next != null, "no next sibling.")
boolean initialized = name.declaration != null
return new PassConfig.State(cssNames == null ? null : Maps.newHashMap(cssNames), exportedNames == null ? null : Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, functionNames)
return new PassConfig.State(cssNames == null ? null : Maps.newHashMap(cssNames), exportedNames == null ? null : Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, functionNames)
Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.")
return ObjectType.cast(type == null ? null : type.dereference())
return (((parent == null) || (parent.getType() != Token.FUNCTION)) || (n == parent.getFirstChild())) || (parent == scope.getRootNode())
Preconditions.checkState(sourceName != null)
boolean isFnLiteral = (rValue != null) && (rValue.getType() == Token.FUNCTION)
defineSlot(name, parent, type, type == null)
Preconditions.checkArgument(inferred || (type != null))
scope.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName), (superClassCtor == null) || superClassCtor.getInstanceType().equals(typeRegistry.getNativeType(JSTypeNative.OBJECT_TYPE)))
Preconditions.checkArgument((qName != null) && (ownerName != null))
Preconditions.checkArgument((qName != null) && (ownerName != null))
inferred = !(((rhsValue != null) && (rhsValue.getType() == Token.FUNCTION)) && (!scope.isDeclared(qName, false)))
return ObjectType.cast(ownerVarType == null ? null : ownerVarType.restrictByNotNullOrUndefined())
Preconditions.checkArgument(((module == null) || (this.module == null)) || (this.module == module))
Preconditions.checkArgument(((module == null) || (this.module == null)) || (this.module == module))
Preconditions.checkState(parent.getFirstChild() == null)
boolean checkModules = isRemovable && (fnModule != null)
Preconditions.checkState(var != null, "Type tightener could not find variable with name %s", lhs.getString())
Preconditions.checkState(scope.getParent() == null)
allowDupe = (info != null) && info.getSuppressions().contains("duplicate")
compiler.report(JSError.make(sourceName, nodeWithLineNumber, SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR, name, origVar.input != null ? origVar.input.getName() : "??"))
Preconditions.checkArgument((node == null) || NodeUtil.isExpressionNode(node))
Preconditions.checkState(explicitNode == null)
return explicitNode != null
return ((value != null) && (value.getType() == Token.OBJECTLIT)) && (!value.hasChildren())
return ((name.parent != null) && (name.parent.aliasingGets == 0)) && (name.parent.type == GlobalNamespace.Name.Type.OBJECTLIT)
return waiting == null
return isDeclaration() && ((parent.getType() != Token.VAR) || (nameNode.getFirstChild() != null))
return (((((parentType == Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == Token.INC)) || (parentType == Token.DEC)) || (NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode)
boolean hasObjectValues = values != null
return n.getFirstChild() != null
return (gramps == null) || (gramps.getType() != Token.SCRIPT)
Preconditions.checkArgument((source == null) || (Token.FUNCTION == source.getType()))
this.call = new ArrowType(registry, parameters, returnType == null ? getReturnType() : returnType)
Preconditions.checkArgument((source == null) || (Token.FUNCTION == source.getType()))
Preconditions.checkArgument(name != null)
return (prototype != null) || super.hasCachedValues()
this(sourceName, node != null ? node.getLineno() : -1, node != null ? node.getCharno() : -1, type, null, arguments)
this(sourceName, node != null ? node.getLineno() : -1, node != null ? node.getCharno() : -1, type, null, arguments)
return (((((type.key + ". ") + description) + " at ") + ((sourceName != null) && (sourceName.length() > 0) ? sourceName : "(unknown source)")) + " line ") + (lineNumber != (-1) ? String.valueOf(lineNumber) : "(unknown line)")
return classes != null
return (activationNames != null) && activationNames.containsKey(name)
boolean aliasable = (!unaliasableGlobals.contains(dest.getString())) && ((docInfo == null) || (!docInfo.isNoAlias()))
return !((functionName == null) || (!ExportTestFunctions.TEST_FUNCTIONS_NAME_PATTERN.matcher(functionName).matches()))
return that.parameters == null
Preconditions.checkState(this.newName == null)
boolean local = (var != null) && var.isLocal()
return (qname != null) && isIdName(qname)
return (((((objType == null) || invalidatingTypes.contains(objType)) || (!objType.hasReferenceName())) || (objType.isNamedType() && objType.isUnknownType())) || objType.isEnumType()) || (objType.autoboxesTo() != null)
return (((((objType == null) || invalidatingTypes.contains(objType)) || (!objType.hasReferenceName())) || (objType.isNamedType() && objType.isUnknownType())) || objType.isEnumType()) || (objType.autoboxesTo() != null)
Node marker = Node.newString(interfaceType == null ? "instance_of__" + className : "implements__" + interfaceType.getReferenceName())
return NodeUtil.isExprCall(next) && (compiler.getCodingConvention().getClassesDefinedByCall(next.getFirstChild()) != null)
boilerplateCode = boilerplateCode.replace("%%LOG%%", logFunction == null ? "function(warning, expr) {}" : logFunction)
Preconditions.checkArgument(compiler != null)
Preconditions.checkArgument(safeNameIdSupplier != null)
return (((inlineLocalFunctions || inlineAnonymousFunctionExpressions) || (parent == null)) || NodeUtil.isControlStructure(parent)) || NodeUtil.isStatementBlock(parent)
Preconditions.checkArgument(changed != null)
Preconditions.checkState(fn != null)
return fn != null
Preconditions.checkState(this.fn == null)
return (references != null) && (!references.isEmpty())
Preconditions.checkArgument(paths != null)
Preconditions.checkArgument(showType != null)
Preconditions.checkState(jsRoot == null)
Preconditions.checkState(jsRoot == null)
Preconditions.checkState(currentTracer == null)
Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.")
Preconditions.checkState(getInput(sourceName) == null, "Duplicate input of name " + sourceName)
Preconditions.checkState(sourceName != null)
return (lastChild != null) && (lastChild.isOptionalArg() || lastChild.isVarArgs())
return (lastChild != null) && lastChild.isVarArgs()
return ((deprecatedDepth > 0) || (CheckAccessControls.getTypeDeprecationInfo(t.getScope().getTypeOfThis()) != null)) || (((scopeRootParent != null) && (scopeRootParent.getType() == Token.ASSIGN)) && (CheckAccessControls.getTypeDeprecationInfo(getClassOfMethod(scopeRoot, scopeRootParent)) != null))
return ((deprecatedDepth > 0) || (CheckAccessControls.getTypeDeprecationInfo(t.getScope().getTypeOfThis()) != null)) || (((scopeRootParent != null) && (scopeRootParent.getType() == Token.ASSIGN)) && (CheckAccessControls.getTypeDeprecationInfo(getClassOfMethod(scopeRoot, scopeRootParent)) != null))
return ((deprecatedDepth > 0) || (CheckAccessControls.getTypeDeprecationInfo(t.getScope().getTypeOfThis()) != null)) || (((scopeRootParent != null) && (scopeRootParent.getType() == Token.ASSIGN)) && (CheckAccessControls.getTypeDeprecationInfo(getClassOfMethod(scopeRoot, scopeRootParent)) != null))
return CheckAccessControls.getTypeDeprecationInfo(type) != null
Preconditions.checkArgument(declaration.getJSType() != null)
return (input == null) || input.isExtern()
Preconditions.checkState((name != null) && (name.length() > 0))
Preconditions.checkState(vars.get(name) == null)
var.isDefine = (info != null) && info.isDefine()
return parent == null
Preconditions.checkState(expressionRoot != null)
Preconditions.checkArgument(lastLink.nextLink == null)
boolean allowWith = (info != null) && info.getSuppressions().contains("with")
return (warningsGuard != null) && warningsGuard.enables(type)
return (warningsGuard != null) && warningsGuard.disables(type)
Preconditions.checkArgument(unsafe != null)
return ((!skipRenaming) && (types != null)) && (types.allEquivalenceClasses().size() > 1)
compiler.report(JSError.make(t.getSourceName(), n, DisambiguateProperties.INVALIDATION, name, type == null ? "null" : type.toString(), n.toString()))
compiler.report(JSError.make(t.getSourceName(), child, DisambiguateProperties.INVALIDATION, name, type == null ? "null" : type.toString(), n.toString()))
return (objType != null) && (!objType.hasReferenceName())
return type.isEnumType() || (type.autoboxesTo() != null)
return (((type == null) || type.isAll()) || type.isFunction()) || (type.isInstance() && invalidatingTypes.contains(type.toInstance().instanceType))
Preconditions.checkState(externsAndJs != null)
Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot))
Preconditions.checkState(scopeCreator == null)
Preconditions.checkState(topScope == null)
Preconditions.checkState(jsRoot.getParent() != null)
boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName)
boolean declaredOverride = (info != null) && info.isOverride()
return ((parent == null) || (parent.getType() != Token.SCRIPT)) || (!t.getInput().isExtern())
Preconditions.checkState((gramps != null) && (gramps.getType() == Token.VAR))
return ObjectType.cast(autobox == null ? restricted : autobox)
return (v != null) && (!v.isLocal())
return s.getParent() == null
return (info != null) && ((info.isConstructor() && (valueNodeType == Token.FUNCTION)) || (info.hasEnumParameterType() && (valueNodeType == Token.OBJECTLIT)))
return (!inExterns) && (isClassOrEnum || (((parent == null) || parent.canCollapseUnannotatedChildNames()) && ((globalSets > 0) || (localSets > 0))))
return ((type == GlobalNamespace.Name.Type.FUNCTION) || (aliasingGets == 0)) && ((parent == null) || parent.canCollapseUnannotatedChildNames())
return parent == null
Preconditions.checkState((body.getNext() == null) && (body.getType() == Token.BLOCK))
return getNode(n) != null
return (((n != null) && (n.getType() == Token.CALL)) && n.hasChildren()) && (qualifiedNameBeginsWithStripType(n.getFirstChild()) || nameEndsWithFieldNameToStrip(n.getFirstChild()))
return ((propNode != null) && (propNode.getType() == Token.STRING)) && isStripName(propNode.getString())
return (((name != null) && NodeUtil.isName(name)) && var.getName().equals(name.getString())) && NodeUtil.isAssignmentOp(n)
return (((name != null) && NodeUtil.isName(name)) && var.getName().equals(name.getString())) && (!NodeUtil.isLhs(name, name.getParent()))
return (gramp.hasOneChild() && (docInfo != null)) && docInfo.isNoSideEffects()
return (docInfo != null) && docInfo.isNoSideEffects()
return currentInfo.getDescription() != null
assert record != null
Preconditions.checkState(externsAndJs != null)
Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot))
allowDupe = (info != null) && info.getSuppressions().contains("duplicate")
return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg()
return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs()
return properties.get(propertyName) != null
return className != null
return (input != null) && (input.getType() == Token.RETURN)
boolean aIsNull = (slotA == null) || (slotA.getType() == null)
boolean aIsNull = (slotA == null) || (slotA.getType() == null)
boolean bIsNull = (slotB == null) || (slotB.getType() == null)
boolean bIsNull = (slotB == null) || (slotB.getType() == null)
Preconditions.checkState(externsAndJs != null)
return (var != null) && var.isConst()
return (string == null) || string.isEmpty()
Preconditions.checkState(nameNode != null)
Preconditions.checkState(value != null)
Preconditions.checkState(value != null)
return initialization.getNameNode().getFirstChild() != null
return !((ancestors.size() == 1) && (ancestors.peek().getNext() == null))
this.valueHasSideEffects = (valueNode != null) && NodeUtil.mayHaveSideEffects(valueNode)
return lookAhead != null
CheckNotNull  in 3215ms
