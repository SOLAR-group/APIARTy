  [Restored contents truncated]
23:15:17.056 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:19.402 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:19.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:22.053 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:22.055 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:24.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:24.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:26.908 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:26.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:29.485 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:29.487 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:31.838 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:15:31.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:15:34.558 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:15:34.559 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:16:22.327 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:16:22.329 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:16:24.743 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:16:24.746 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:16:27.405 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:16:27.405 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:17:14.733 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:17:14.735 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:17:17.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:17:17.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:18:04.203 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:18:04.207 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:18:06.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:18:06.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:18:54.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:18:54.113 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:18:56.888 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:18:56.888 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:19:45.198 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:19:45.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:19:47.606 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:19:47.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:19:50.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:19:50.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:20:37.449 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:20:37.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:20:39.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:20:39.912 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:20:42.504 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:20:42.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: upper = Math.max(upper, maxX);
23:20:42.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
23:20:42.514 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:20:45.015 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:20:45.015 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:21:32.270 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:21:32.277 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:21:34.935 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:21:34.935 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:22:22.660 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
23:22:22.666 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:22.667 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:25.005 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:25.006 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:25.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:27.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:27.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:29.408 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:29.410 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:29.412 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:31.461 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:31.463 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:31.465 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:33.835 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:33.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:36.139 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:36.141 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:36.144 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:38.443 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:38.446 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:38.447 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:40.593 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:40.595 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:42.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:42.945 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:42.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:45.196 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:45.198 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:45.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:47.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:47.673 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:49.797 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:49.799 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:22:49.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:51.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:51.955 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===590
23:22:52.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double maxX = series.getMaxX();
23:22:52.039 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = maxX.getMaxX();
23:22:52.039 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = minX.getMaxX();
23:22:52.043 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = s.getMaxX();
23:22:52.051 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = seriesCount.getMaxX();
23:22:52.052 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = upper.getMaxX();
23:22:52.052 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = lower.getMaxX();
23:22:52.053 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = includeInterval.getMaxX();
23:22:52.054 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = serialVersionUID.getMaxX();
23:22:52.055 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = this.data.getMaxX();
23:22:52.055 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double maxX = this.intervalDelegate.getMaxX();
23:22:52.057 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:54.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:54.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:57.412 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:57.414 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:22:59.656 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:22:59.659 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:01.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:01.913 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:04.179 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:04.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:06.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:06.469 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:08.700 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:08.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:11.088 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:11.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:13.411 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:13.413 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:15.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:15.696 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series != null) {
	

}

23:23:15.701 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series == null) {
    throw new IllegalArgumentException("Null 'series' argument.");
}

23:23:15.705 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series == null) {
    return null;
}

23:23:15.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:18.209 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:23:18.211 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:23:20.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:23:20.742 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:24:08.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:24:08.472 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:24:11.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:24:11.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:24:58.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:24:58.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:24:58.383 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:25:01.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:25:01.053 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double maxX = series.getMaxX();
23:25:01.055 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:25:03.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:25:03.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:25:50.792 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:25:50.796 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:25:50.798 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:25:53.231 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:25:53.233 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:25:53.237 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:25:55.840 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:25:55.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:25:58.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:25:58.313 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:25:58.316 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:00.766 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:00.769 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:00.771 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:03.167 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:03.169 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:05.486 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:05.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:05.489 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:07.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:07.535 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:07.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:09.984 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:09.986 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:12.181 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:12.184 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:12.190 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:14.487 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:14.490 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:14.495 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:16.765 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:16.769 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:19.014 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:19.016 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:26:19.019 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:21.316 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:21.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===588
23:26:21.374 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
lower = Math.min(lower, minX);
23:26:21.375 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = minX.min(lower, minX);
23:26:21.375 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = series.min(lower, minX);
23:26:21.375 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = s.min(lower, minX);
23:26:21.376 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = seriesCount.min(lower, minX);
23:26:21.377 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = upper.min(lower, minX);
23:26:21.378 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = lower.min(lower, minX);
23:26:21.380 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = includeInterval.min(lower, minX);
23:26:21.380 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = serialVersionUID.min(lower, minX);
23:26:21.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = this.data.min(lower, minX);
23:26:21.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = this.intervalDelegate.min(lower, minX);
23:26:21.382 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(minX, minX);
23:26:21.383 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(series, minX);
23:26:21.383 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(s, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(seriesCount, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(upper, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(includeInterval, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(serialVersionUID, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(this.data, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(this.intervalDelegate, minX);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, series);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, s);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, seriesCount);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, upper);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, lower);
23:26:21.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, includeInterval);
23:26:21.385 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, serialVersionUID);
23:26:21.385 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, this.data);
23:26:21.385 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, this.intervalDelegate);
23:26:21.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:23.807 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:23.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:26.243 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:26.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:28.570 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:28.573 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:31.324 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:31.327 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:33.726 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:33.728 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:36.103 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:36.105 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:38.928 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:38.931 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:41.350 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:41.352 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:43.628 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:43.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:46.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:26:46.225 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:26:48.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:26:48.996 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:27:38.498 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:27:38.500 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:27:40.748 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:27:40.750 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:27:43.458 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:27:43.458 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:28:30.710 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:28:30.712 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:28:33.246 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:28:33.246 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:29:19.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:29:19.820 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:29:22.407 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:29:22.408 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:30:09.430 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:30:09.431 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:30:11.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:30:11.786 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:30:14.327 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:30:14.328 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:31:01.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:31:01.540 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:31:03.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:31:03.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:31:06.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:31:06.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:31:08.575 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:31:08.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:31:11.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:31:11.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:31:58.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:31:58.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:32:01.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:32:01.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:32:48.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:32:48.489 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:32:51.139 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:32:51.141 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:33:37.428 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:33:37.435 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:33:40.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:33:40.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:34:27.545 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
23:34:27.552 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:34:29.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:34:29.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:34:32.222 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:34:32.222 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:35:19.238 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:35:19.241 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:21.552 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:21.554 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:23.835 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:23.838 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:23.840 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:26.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:26.365 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:26.366 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:28.807 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:28.813 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:31.070 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:31.081 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:31.084 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:33.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:33.486 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:33.489 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:35.788 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:35.789 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:38.287 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:38.289 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:38.294 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:40.675 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:40.676 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:40.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:42.942 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:42.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:45.431 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:45.433 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:45.435 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:48.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:48.073 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:48.076 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:50.365 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:50.369 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:52.861 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:52.863 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:35:52.868 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:55.294 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:55.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===587
23:35:55.365 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (!Double.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.376 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!minX.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!series.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.384 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!s.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.387 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!seriesCount.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.390 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!upper.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.393 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!lower.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.393 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!includeInterval.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.394 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!serialVersionUID.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.395 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!this.data.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.395 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!this.intervalDelegate.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.396 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(series)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.396 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(s)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.397 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(seriesCount)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.398 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(upper)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.399 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(lower)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.399 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(includeInterval)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.400 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(serialVersionUID)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.401 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(this.data)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.402 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isNaN(this.intervalDelegate)) {
                    lower = Math.min(lower, minX);
                }
23:35:55.405 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:57.624 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:57.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:35:59.960 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:35:59.962 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:02.376 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:02.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:04.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:04.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:07.023 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:07.026 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:09.449 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:09.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:11.666 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:11.668 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:13.642 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:13.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:15.993 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:15.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:18.344 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:18.347 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:20.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:36:20.803 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:36:23.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:36:23.421 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:37:10.744 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:37:10.753 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:37:13.604 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:37:13.604 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:38:01.279 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:38:01.281 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:38:04.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:38:04.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:38:50.834 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:38:50.837 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:38:53.368 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:38:53.369 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:39:42.615 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:39:42.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:39:45.006 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:39:45.008 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:39:47.604 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:39:47.604 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:40:35.105 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:40:35.107 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:40:37.524 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:40:37.527 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:40:39.870 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:40:39.872 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: lower = Math.min(lower, minX);
23:40:39.872 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
23:40:39.873 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:40:42.496 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:40:42.498 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:41:29.903 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
23:41:29.905 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:41:32.509 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:41:32.509 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:42:20.875 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
23:42:20.877 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:20.879 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:23.157 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:23.159 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:23.161 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:25.440 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:25.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:27.926 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:27.929 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:27.932 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:30.502 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:30.504 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:30.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:32.902 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:32.904 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:35.498 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:35.500 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:35.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:37.917 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:37.919 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:37.923 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:40.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:40.252 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:42.510 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:42.512 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:42.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:44.820 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:44.823 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:44.826 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:47.114 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:47.116 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:49.465 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:49.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:42:49.469 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:51.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:51.593 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===586
23:42:51.665 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double minX = series.getMinX();
23:42:51.672 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = minX.getMinX();
23:42:51.676 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = s.getMinX();
23:42:51.676 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = seriesCount.getMinX();
23:42:51.677 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = upper.getMinX();
23:42:51.678 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = lower.getMinX();
23:42:51.678 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = includeInterval.getMinX();
23:42:51.679 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = serialVersionUID.getMinX();
23:42:51.680 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = this.data.getMinX();
23:42:51.680 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double minX = this.intervalDelegate.getMinX();
23:42:51.682 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:54.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:54.074 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:56.489 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:56.490 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:42:58.903 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:42:58.904 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:01.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:01.203 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:03.775 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:03.776 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:06.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:06.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:08.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:08.638 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:10.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:10.998 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:13.864 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:13.866 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series != null) {
	

}

23:43:13.867 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series == null) {
    throw new IllegalArgumentException("Null 'series' argument.");
}

23:43:13.868 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (series == null) {
    return null;
}

23:43:13.870 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:16.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:43:16.251 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:43:18.853 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:43:18.853 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:44:05.660 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:44:05.662 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:44:08.205 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:44:08.206 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:44:54.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:44:54.813 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:44:54.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:44:57.191 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:44:57.193 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double minX = series.getMinX();
23:44:57.194 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:44:59.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:44:59.785 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:45:47.187 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:45:47.190 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:45:47.192 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:45:49.578 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:45:49.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:45:49.583 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:45:51.942 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:45:51.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:45:54.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:45:54.102 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:45:54.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:45:56.521 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:45:56.523 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:45:56.526 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:45:58.767 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:45:58.769 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:01.155 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:01.158 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:46:01.161 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:03.652 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:03.655 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:46:03.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:06.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:06.008 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:08.435 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:08.438 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:46:08.443 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:11.063 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:11.065 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:46:11.067 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:13.550 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:13.552 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:16.012 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:16.014 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:46:16.018 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:18.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:18.388 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===585
23:46:18.445 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
XYSeries series = getSeries(s);
23:46:18.448 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(series);
23:46:18.449 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(seriesCount);
23:46:18.449 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(upper);
23:46:18.450 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(lower);
23:46:18.450 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(includeInterval);
23:46:18.451 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(serialVersionUID);
23:46:18.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(this.data);
23:46:18.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYSeries series = getSeries(this.intervalDelegate);
23:46:18.459 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:20.885 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:46:20.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:46:23.385 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:46:23.387 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:47:12.265 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 28 Chart_4
23:47:12.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:47:14.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:47:14.842 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:48:02.458 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 28 Chart_4
23:48:02.459 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:48:05.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:48:05.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:48:52.578 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 28 Chart_4
23:48:52.585 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:48:55.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:48:55.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:49:42.855 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 28 Chart_4
23:49:42.861 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:49:45.337 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:49:45.337 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:50:32.731 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 28 Chart_4
23:50:32.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:50:35.389 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:50:35.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:50:37.786 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:50:37.788 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:50:37.794 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:50:39.969 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:50:39.970 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final XYSeries series = getSeries(s);
23:50:39.971 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:50:42.908 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:50:42.909 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:51:29.581 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:51:29.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:29.585 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:31.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:31.991 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:31.993 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:34.468 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:34.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:36.822 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:36.828 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:36.830 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:39.027 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:39.037 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:39.041 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:41.396 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:41.399 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:43.662 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:43.664 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:43.667 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:45.929 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:45.931 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:45.935 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:48.154 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:48.156 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:50.573 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:50.574 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:50.576 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:52.882 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:52.884 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:52.886 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:55.283 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:55.286 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:57.461 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:57.464 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:51:57.465 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:51:59.997 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:51:59.998 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===584
23:52:00.034 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
for (int s = 0; s < seriesCount; s++) {
                XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!Double.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!Double.isNaN(maxX)) {
                    upper = Math.max(upper, maxX);
                }
            }
23:52:00.042 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:00.045 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:02.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:02.636 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:02.638 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:05.035 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:05.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:07.349 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:07.358 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:07.366 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:09.657 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:09.666 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:09.669 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:12.355 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:12.358 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:14.766 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:14.768 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:14.771 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:17.120 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:17.124 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:17.127 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:19.394 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:19.398 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:21.628 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:21.630 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:21.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:23.890 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:23.892 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:23.896 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:26.239 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:26.241 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:28.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:28.641 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:28.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:30.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:30.871 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:30.874 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:33.279 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:33.281 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:35.728 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:35.730 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:35.734 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:37.946 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:37.948 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:37.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:40.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:40.201 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:42.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:42.422 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:42.425 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:44.967 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:44.969 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:44.971 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:47.419 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:47.421 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:49.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:49.674 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:49.676 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:52.215 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:52.221 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:52.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:54.901 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:54.904 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:57.213 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:57.214 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:57.216 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:52:59.551 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:52:59.555 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===583
23:52:59.617 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
int seriesCount = getSeriesCount();
23:52:59.620 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:52:59.624 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:53:01.980 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:53:01.982 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final int seriesCount = getSeriesCount();
23:53:01.985 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:53:04.649 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:53:04.650 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:53:51.718 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:53:51.721 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:53:51.724 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:53:54.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:53:54.088 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:53:54.091 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:53:56.444 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:53:56.446 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:53:58.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:53:58.682 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:53:58.683 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:01.060 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:01.062 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:01.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:03.373 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:03.375 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:05.615 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:05.616 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:05.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:07.885 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:07.888 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:07.891 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:10.181 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:10.183 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:12.648 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:12.653 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:12.655 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:15.079 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:15.081 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:15.082 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:17.388 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:17.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:19.908 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:19.913 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:19.916 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:22.462 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:22.464 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===582
23:54:22.574 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double upper = Double.NEGATIVE_INFINITY;
23:54:22.576 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:22.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:25.038 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:25.043 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double upper = Double.NEGATIVE_INFINITY;
23:54:25.046 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:27.411 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:27.414 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:27.418 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:29.892 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:29.895 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:29.897 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:32.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:32.187 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:34.416 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:34.419 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:34.424 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:36.792 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:36.794 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:36.798 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:38.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:38.990 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:41.205 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:41.208 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:41.211 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:43.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:43.586 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:43.589 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:45.933 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:45.936 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:48.197 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:48.198 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:48.202 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:50.423 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:50.428 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:50.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:52.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:52.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:55.211 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:55.213 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:55.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:54:57.906 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:54:57.913 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===581
23:54:57.966 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double lower = Double.POSITIVE_INFINITY;
23:54:57.968 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:54:57.972 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:00.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:00.380 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double lower = Double.POSITIVE_INFINITY;
23:55:00.381 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:02.772 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:02.774 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:02.778 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:05.402 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:05.403 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:05.405 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:07.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:07.823 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:10.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:10.011 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:10.015 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:12.317 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:12.319 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:12.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:14.709 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:14.712 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:17.017 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:17.023 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:17.026 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:19.492 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:19.501 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:19.504 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:21.747 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:21.753 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:24.141 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:24.148 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:24.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:26.214 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:26.216 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:26.222 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:28.621 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:28.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:30.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:30.947 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:30.949 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:33.176 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:33.178 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeriesCollection ===577
23:55:33.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (includeInterval) {
            return this.intervalDelegate.getDomainBounds(includeInterval);
        }
        else {
            double lower = Double.POSITIVE_INFINITY;
            double upper = Double.NEGATIVE_INFINITY;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!Double.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!Double.isNaN(maxX)) {
                    upper = Math.max(upper, maxX);
                }
            }
            if (lower > upper) {
                return null;
            }
            else {
                return new Range(lower, upper);
            }
        }
23:55:33.242 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.intervalDelegate.getDomainBounds(includeInterval);
        }
        else {
            double lower = Double.POSITIVE_INFINITY;
            double upper = Double.NEGATIVE_INFINITY;
            int seriesCount = getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                XYSeries series = getSeries(s);
                double minX = series.getMinX();
                if (!Double.isNaN(minX)) {
                    lower = Math.min(lower, minX);
                }
                double maxX = series.getMaxX();
                if (!Double.isNaN(maxX)) {
                    upper = Math.max(upper, maxX);
                }
            }
            if (lower > upper) {
                return null;
            }
            else {
                return new Range(lower, upper);
            }
23:55:33.242 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
23:55:33.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:34.586 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:34.592 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:37.114 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:37.121 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:37.123 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:39.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:39.812 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:39.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:42.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:42.268 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:44.550 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:44.550 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:55:44.553 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:46.998 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:47.001 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===672
23:55:47.218 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed to identify the buggy statement in: org.jfree.data.general.DatasetUtilities --- 672
23:55:47.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===671
23:55:47.387 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
result = info.getDomainBounds(includeInterval);
23:55:47.396 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = result.getDomainBounds(includeInterval);
23:55:47.396 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = dataset.getDomainBounds(includeInterval);
23:55:47.398 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = includeInterval.getDomainBounds(includeInterval);
23:55:47.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:50.203 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:50.205 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:52.833 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:52.835 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:55.719 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:55:55.726 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (info != null) {
	

}

23:55:55.727 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (info == null) {
    throw new IllegalArgumentException("Null 'info' argument.");
}

23:55:55.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (info == null) {
    return null;
}

23:55:55.732 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:55:58.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:55:58.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:56:44.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
23:56:44.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:56:47.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:56:47.742 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:57:34.906 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:57:34.915 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:57:37.899 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:57:37.901 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
23:58:25.241 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
23:58:25.244 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:25.253 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:28.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:28.221 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:28.228 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:31.218 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:31.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:34.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:34.632 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:34.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:37.879 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:37.881 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:37.890 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:41.462 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:41.466 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:44.843 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:44.845 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:44.847 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:48.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:48.069 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:48.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:51.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:51.548 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:55.326 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:55.329 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:55.335 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:58:58.889 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:58:58.892 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:58:58.894 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:59:02.376 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:59:02.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:59:05.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:59:05.807 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
23:59:05.809 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:59:09.360 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:59:09.362 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===670
23:59:09.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
DomainInfo info = (DomainInfo) dataset;
23:59:09.549 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: DomainInfo info = (DomainInfo) info;
23:59:09.549 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: DomainInfo info = (DomainInfo) result;
23:59:09.549 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: DomainInfo info = (DomainInfo) includeInterval;
23:59:09.551 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:59:13.251 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
23:59:13.254 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
23:59:17.240 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
23:59:17.242 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:00:18.339 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
00:00:18.344 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:00:21.165 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:00:21.169 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset != null) {
	

}

00:00:21.175 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    throw new IllegalArgumentException("Null 'dataset' argument.");
}

00:00:21.180 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    return null;
}

00:00:21.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:00:25.190 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:00:25.192 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:01:15.033 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 26 Chart_4
00:01:15.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:01:17.988 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:01:17.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:02:05.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:02:05.391 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:02:08.270 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:02:08.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:02:55.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:02:55.477 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset instanceof DomainInfo) {
	

} else {
	throw new IllegalArgumentException("Illegal argument: dataset");
}

00:02:55.479 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:02:56.872 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:02:56.874 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:02:56.882 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:03:00.018 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:03:00.020 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:03:46.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:03:46.537 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final DomainInfo info = (DomainInfo) dataset;
00:03:46.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:03:49.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:03:49.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:04:37.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:04:37.254 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:37.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:39.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:39.913 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:39.915 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:42.561 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:42.563 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:45.229 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:45.233 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:45.242 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:47.982 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:47.985 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:47.990 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:50.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:50.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:52.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:52.954 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:52.958 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:55.720 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:55.722 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:04:55.725 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:04:58.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:04:58.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:01.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:01.013 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:01.016 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:03.687 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:03.690 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:03.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:06.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:06.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:09.032 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:09.035 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:09.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:11.513 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:11.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1749
00:05:11.759 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
result = getRenderer();
00:05:11.780 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:11.783 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:15.434 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:15.438 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:15.440 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:18.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:18.809 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:22.131 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:22.133 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:22.135 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:25.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:25.373 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:25.376 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:28.786 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:28.788 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:32.258 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:32.261 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:32.273 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:35.877 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:35.879 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:35.883 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:39.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:39.165 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:42.796 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:42.800 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:42.804 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:46.326 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:46.328 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:46.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:49.624 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:49.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:53.114 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:53.118 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:05:53.124 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:56.677 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:56.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===374
00:05:56.715 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return range;
00:05:56.716 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return includeInterval;
00:05:56.716 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
00:05:56.724 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.dataset;
00:05:56.725 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoWidth;
00:05:56.727 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.intervalPositionFactor;
00:05:56.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.fixedIntervalWidth;
00:05:56.729 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoIntervalWidth;
00:05:56.731 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:05:58.879 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:05:58.881 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:00.865 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:00.868 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:03.058 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:03.060 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:05.203 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:05.212 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:07.317 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:07.322 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:09.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:09.372 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:11.588 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:11.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range != null) {
	

}

00:06:11.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range == null) {
    throw new IllegalArgumentException("Null 'range' argument.");
}

00:06:11.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range == null) {
    return null;
}

00:06:11.593 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:13.613 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:06:13.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:06:15.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:06:15.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:07:02.851 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
00:07:02.853 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:07:05.073 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:07:05.074 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:07:53.257 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:07:53.260 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:07:53.264 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:07:55.430 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:07:55.435 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:07:55.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:07:57.521 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:07:57.523 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:07:59.476 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:07:59.478 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:07:59.482 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:01.690 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:01.692 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===371
00:08:01.715 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.719 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(upperAdj.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.722 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(lowerAdj.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.724 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(includeInterval.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.727 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(serialVersionUID.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.727 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(this.dataset.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.727 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(this.autoWidth.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(this.intervalPositionFactor.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(this.fixedIntervalWidth.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(this.autoIntervalWidth.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:08:01.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - upperAdj,
                range.getUpperBound() + upperAdj);
00:08:01.729 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - range,
                range.getUpperBound() + upperAdj);
00:08:01.729 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - includeInterval,
                range.getUpperBound() + upperAdj);
00:08:01.731 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - serialVersionUID,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - this.dataset,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - this.autoWidth,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - this.intervalPositionFactor,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - this.fixedIntervalWidth,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - this.autoIntervalWidth,
                range.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                upperAdj.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                lowerAdj.getUpperBound() + upperAdj);
00:08:01.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                includeInterval.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                serialVersionUID.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                this.dataset.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                this.autoWidth.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                this.intervalPositionFactor.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                this.fixedIntervalWidth.getUpperBound() + upperAdj);
00:08:01.733 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                this.autoIntervalWidth.getUpperBound() + upperAdj);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + lowerAdj);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + range);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + includeInterval);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + serialVersionUID);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + this.dataset);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + this.autoWidth);
00:08:01.734 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + this.intervalPositionFactor);
00:08:01.735 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + this.fixedIntervalWidth);
00:08:01.735 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + this.autoIntervalWidth);
00:08:01.736 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:03.982 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:03.984 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:06.356 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:06.362 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:08.616 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:08.620 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:10.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:10.628 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:12.643 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:12.645 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:14.770 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:14.774 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:16.690 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:16.693 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:18.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:18.807 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:20.878 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:08:20.879 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:08:23.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:08:23.218 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:09:10.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:09:10.590 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:09:12.696 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:09:12.700 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:09:14.974 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:09:14.976 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:09:17.069 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:09:17.070 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:10:04.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 30 Chart_4
00:10:04.536 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:10:06.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:10:06.690 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:10:08.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:10:08.707 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:10:10.750 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:10:10.751 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:10:58.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 24 Chart_4
00:10:58.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:11:00.793 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:11:00.793 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:11:47.979 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:11:47.981 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:11:50.167 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:11:50.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:12:37.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
00:12:37.586 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:39.560 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:39.609 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:41.543 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:41.547 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:43.607 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:43.609 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:45.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:45.394 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:47.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:47.407 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:49.421 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:49.426 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:51.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:51.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:53.705 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:53.707 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:56.043 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:12:56.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:12:58.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:12:58.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:13:46.571 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:13:46.572 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:13:48.676 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:13:48.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:13:50.975 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:13:50.977 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:13:53.116 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:13:53.117 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:14:40.993 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 30 Chart_4
00:14:40.996 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:14:42.952 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:14:42.954 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:14:44.917 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:14:44.919 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:14:46.883 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:14:46.883 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:15:34.778 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 24 Chart_4
00:15:34.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:15:36.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:15:36.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:16:24.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:16:24.674 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:16:26.904 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:16:26.905 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:17:14.379 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
00:17:14.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range != null) {
	

}

00:17:14.387 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range == null) {
    throw new IllegalArgumentException("Null 'range' argument.");
}

00:17:14.387 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range == null) {
    return null;
}

00:17:14.389 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:17:16.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:17:16.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:18:04.359 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:18:04.360 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:18:06.423 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:18:06.423 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:18:54.153 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:18:54.156 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:18:56.473 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:18:56.474 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:19:44.502 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:19:44.505 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:44.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:46.360 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:46.362 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:46.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:48.371 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:48.374 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:50.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:50.390 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:50.394 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:52.874 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:52.876 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:52.877 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:54.962 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:54.964 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:56.998 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:57.000 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:57.002 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:19:58.865 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:19:58.869 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:19:58.872 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:01.082 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:01.084 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:03.068 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:03.071 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:03.072 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:05.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:05.113 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:05.114 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:07.202 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:07.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:09.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:09.184 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:09.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:11.261 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:11.266 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:11.268 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:13.299 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:13.302 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:15.411 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:15.413 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:15.416 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:17.559 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:17.561 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:17.563 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:19.422 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:19.423 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:21.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:21.224 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:21.225 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:23.347 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:23.348 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:23.349 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:25.488 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:25.491 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:27.727 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:27.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:27.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:29.914 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:29.918 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:29.922 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:31.831 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:31.833 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:33.773 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:33.775 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:20:33.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:36.062 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:36.063 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===370
00:20:36.114 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double upperAdj = getIntervalWidth() - lowerAdj;
00:20:36.118 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - upperAdj;
00:20:36.119 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - range;
00:20:36.120 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - includeInterval;
00:20:36.122 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - serialVersionUID;
00:20:36.124 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - this.dataset;
00:20:36.125 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - this.autoWidth;
00:20:36.126 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - this.intervalPositionFactor;
00:20:36.127 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - this.fixedIntervalWidth;
00:20:36.128 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double upperAdj = getIntervalWidth() - this.autoIntervalWidth;
00:20:36.130 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:38.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:38.317 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:40.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:40.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:42.272 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:20:42.274 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:20:44.468 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:20:44.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:21:32.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 27 Chart_4
00:21:32.096 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:21:34.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:21:34.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:21:36.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:21:36.274 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:21:38.354 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:21:38.355 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:22:25.177 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 24 Chart_4
00:22:25.184 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:22:27.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:22:27.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:23:15.538 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:23:15.544 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:23:17.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:23:17.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:24:06.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 30 Chart_4
00:24:06.766 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:24:06.769 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:24:08.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:24:08.631 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double upperAdj = getIntervalWidth() - lowerAdj;
00:24:08.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:24:10.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:24:10.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:24:57.767 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:24:57.769 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:24:57.772 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:24:59.842 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:24:59.844 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:24:59.847 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:02.051 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:02.058 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:04.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:04.164 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:04.166 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:06.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:06.225 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:06.228 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:08.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:08.226 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:10.242 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:10.245 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:10.247 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:12.411 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:12.412 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:12.415 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:14.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:14.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:16.808 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:16.811 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:16.813 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:18.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:18.781 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:18.783 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:20.745 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:20.749 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:23.218 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:23.220 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:23.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:25.189 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:25.191 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:25.194 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:27.276 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:27.279 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:29.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:29.298 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:29.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:31.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:31.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:31.456 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:33.385 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:33.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:35.356 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:35.359 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:35.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:37.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:37.510 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===369
00:25:37.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
00:25:37.554 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:25:37.557 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:39.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:25:39.471 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
00:25:39.473 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:25:41.670 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:25:41.670 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:26:28.957 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:26:28.959 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:28.960 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:31.077 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:31.086 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:31.086 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:33.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:33.237 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:35.192 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:35.193 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:35.197 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:37.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:37.225 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:37.226 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:39.388 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:39.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:41.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:41.539 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:41.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:43.759 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:43.761 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:43.762 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:45.794 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:45.796 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:47.850 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:47.851 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:47.853 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:50.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:50.066 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:50.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:52.297 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:52.298 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:54.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:54.486 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:54.489 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:56.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:56.542 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:26:56.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:26:58.755 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:26:58.756 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:00.801 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:27:00.803 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:27:00.804 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:02.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:27:02.782 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:27:02.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:04.778 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:27:04.781 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:06.856 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:27:06.858 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:27:06.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:08.789 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:27:08.790 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===368
00:27:08.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (includeInterval && range != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:27:08.809 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && range == null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:27:08.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:27:11.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:27:11.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:28:00.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:28:00.537 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:28:00.537 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (range != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:28:00.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:28:02.723 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:28:02.724 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:28:51.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
00:28:51.201 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:28:53.419 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:28:53.419 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:29:41.210 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:29:41.212 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval || range != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:29:41.216 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:29:43.266 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:29:43.266 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:30:30.740 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
00:30:30.743 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && range == null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:30:30.744 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:30:32.850 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:30:32.850 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:31:20.538 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:31:20.540 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.autoWidth && range != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.540 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && includeInterval != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.540 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && serialVersionUID != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && this.dataset != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && this.autoWidth != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && this.intervalPositionFactor != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && this.fixedIntervalWidth != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval && this.autoIntervalWidth != null) {
            double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
        }
00:31:20.544 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:31:22.599 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:31:22.599 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:32:10.543 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:32:10.545 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:32:12.462 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:32:12.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:32:14.458 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:32:14.459 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:32:16.634 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:32:16.634 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:33:03.964 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
00:33:03.966 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:33:06.034 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:33:06.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:33:07.986 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:33:07.988 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:33:09.809 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:33:09.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:33:11.725 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:33:11.728 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: double lowerAdj = getIntervalWidth() * getIntervalPositionFactor();
            double upperAdj = getIntervalWidth() - lowerAdj;
            range = new Range(range.getLowerBound() - lowerAdj,
                range.getUpperBound() + upperAdj);
00:33:11.729 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
00:33:11.730 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:33:14.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:33:14.030 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:34:01.881 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
00:34:01.883 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:34:04.075 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:34:04.076 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:34:51.764 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 25 Chart_4
00:34:51.767 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:34:51.771 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:34:53.830 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:34:53.831 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:34:53.832 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:34:55.880 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:34:55.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:34:57.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:34:57.945 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:34:57.946 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:34:59.928 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:34:59.930 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:34:59.934 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:01.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:01.931 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:03.929 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:03.931 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:35:03.934 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:05.773 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:05.775 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:35:05.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:07.702 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:07.704 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:09.540 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:09.542 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:35:09.544 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:11.678 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:11.681 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:35:11.684 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:13.715 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:13.717 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:15.577 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:15.579 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:35:15.582 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:17.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:17.517 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===367
00:35:17.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
Range range = DatasetUtilities.findDomainBounds(this.dataset, false);
00:35:17.558 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = range.findDomainBounds(this.dataset, false);
00:35:17.560 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = includeInterval.findDomainBounds(this.dataset, false);
00:35:17.561 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = serialVersionUID.findDomainBounds(this.dataset, false);
00:35:17.562 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = this.dataset.findDomainBounds(this.dataset, false);
00:35:17.564 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = this.autoWidth.findDomainBounds(this.dataset, false);
00:35:17.565 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = this.intervalPositionFactor.findDomainBounds(this.dataset, false);
00:35:17.567 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = this.fixedIntervalWidth.findDomainBounds(this.dataset, false);
00:35:17.573 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = this.autoIntervalWidth.findDomainBounds(this.dataset, false);
00:35:17.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(range, false);
00:35:17.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(includeInterval, false);
00:35:17.586 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(serialVersionUID, false);
00:35:17.587 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(this.autoWidth, false);
00:35:17.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(this.intervalPositionFactor, false);
00:35:17.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(this.fixedIntervalWidth, false);
00:35:17.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Range range = DatasetUtilities.findDomainBounds(this.autoIntervalWidth, false);
00:35:17.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:19.758 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:19.760 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:21.916 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:21.918 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:24.014 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:24.016 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:25.900 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:25.902 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:27.759 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:27.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:30.008 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:30.010 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:32.231 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:32.233 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:34.255 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:34.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:36.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:36.323 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:38.603 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:38.605 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:40.580 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:40.582 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:42.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:42.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:44.490 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:44.492 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:46.526 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:46.528 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:48.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:48.323 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.dataset != null) {
	

}

00:35:48.327 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.dataset == null) {
    throw new IllegalArgumentException("Null 'this.dataset' argument.");
}

00:35:48.330 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.dataset == null) {
    return null;
}

00:35:48.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:50.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:35:50.314 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:35:52.261 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:35:52.263 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:36:39.000 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:36:39.002 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:36:41.160 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:36:41.160 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:37:27.163 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
00:37:27.165 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:27.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:29.148 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:29.151 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final Range range = DatasetUtilities.findDomainBounds(this.dataset, false);
00:37:29.152 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:31.309 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:31.311 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:31.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:33.275 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:33.277 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:33.280 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:35.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:35.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:37.238 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:37.241 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:37.243 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:39.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:39.220 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:39.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:41.146 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:41.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:43.561 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:43.563 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:43.565 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:45.586 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:45.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:45.590 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:47.717 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:47.718 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:49.831 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:49.833 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:49.835 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:51.855 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:51.856 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:51.858 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:53.843 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:53.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:55.683 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:55.685 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:55.689 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:57.840 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:57.842 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:37:57.843 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:37:59.597 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:37:59.599 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:01.501 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:01.504 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:38:01.507 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:03.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:03.433 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:38:03.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:05.388 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:05.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:07.583 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:07.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:38:07.592 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:09.553 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:09.554 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:38:09.555 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:11.511 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:11.512 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:13.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:13.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:38:13.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:15.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:38:15.684 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeries ===207
00:38:15.834 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return this.maxX;
00:38:15.835 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
00:38:15.836 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.data;
00:38:15.838 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.maximumItemCount;
00:38:15.839 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoSort;
00:38:15.840 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.allowDuplicateXValues;
00:38:15.841 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.minX;
00:38:15.841 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.minY;
00:38:15.841 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.maxY;
00:38:15.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:38:18.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:38:18.709 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:39:06.630 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 33 Chart_4
00:39:06.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:39:09.074 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:39:09.106 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:39:11.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:39:11.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:40:00.200 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:40:00.202 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:40:02.863 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:40:02.866 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:40:05.171 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:40:05.172 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:40:07.991 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:40:07.992 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:40:54.888 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
00:40:54.897 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:40:57.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:40:57.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:41:44.486 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
00:41:44.488 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:41:46.990 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:41:46.990 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:42:33.898 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
00:42:33.900 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:42:33.902 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:42:36.351 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:42:36.351 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:43:24.107 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:43:24.114 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:43:24.116 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:43:26.758 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:43:26.758 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:44:14.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:44:14.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:44:17.266 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:44:17.266 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:45:04.883 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:45:04.885 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:45:04.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:45:07.540 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:45:07.540 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:45:55.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:45:55.936 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:45:55.938 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:45:58.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:45:58.627 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:46:46.512 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:46:46.514 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:46:49.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:46:49.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:47:36.842 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:47:36.844 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:47:36.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:47:39.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:47:39.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:48:28.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:48:28.102 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:48:28.103 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:48:30.597 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:48:30.597 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:49:18.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:49:18.324 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:49:21.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:49:21.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:50:08.473 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:50:08.475 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:50:08.480 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:50:11.132 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:50:11.132 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:50:58.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:50:58.041 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.XYSeries ===192
00:50:58.136 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return this.minX;
00:50:58.138 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
00:50:58.138 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.data;
00:50:58.139 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.maximumItemCount;
00:50:58.140 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoSort;
00:50:58.142 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.allowDuplicateXValues;
00:50:58.144 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.maxX;
00:50:58.147 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.minY;
00:50:58.150 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.maxY;
00:50:58.156 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:51:01.004 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:51:01.004 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:51:49.160 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:51:49.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:51:51.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:51:51.634 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:51:54.265 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:51:54.265 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:52:41.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:52:41.949 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:52:44.409 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:52:44.411 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:52:46.702 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
00:52:46.704 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:52:49.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:52:49.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:53:37.514 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
00:53:37.516 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:53:40.294 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:53:40.294 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:54:28.279 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:54:28.286 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:54:30.912 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:54:30.912 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:55:18.027 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
00:55:18.030 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:55:18.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:55:20.721 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:55:20.721 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:56:08.369 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:56:08.371 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:56:08.377 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:56:11.035 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:56:11.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:56:59.174 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:56:59.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:57:01.915 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:57:01.915 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:57:49.926 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:57:49.929 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:57:49.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:57:52.675 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:57:52.675 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:58:41.962 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:58:41.963 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
00:58:41.964 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:58:44.742 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:58:44.742 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
00:59:32.952 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
00:59:32.961 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
00:59:35.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
00:59:35.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:00:22.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
01:00:22.804 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:00:22.806 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:00:25.393 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:00:25.393 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:01:13.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
01:01:13.188 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:01:13.191 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:01:15.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:01:15.815 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:02:04.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
01:02:04.083 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:02:06.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:02:06.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:02:52.769 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
01:02:52.771 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:02:52.774 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:02:54.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:02:54.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:03:28.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 34 Chart_4
01:03:28.973 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===676
01:03:29.077 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return result;
01:03:29.079 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return dataset;
01:03:29.079 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return includeInterval;
01:03:29.081 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:03:30.756 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:03:30.759 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:03:32.483 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:03:32.485 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result != null) {
	

}

01:03:32.485 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result == null) {
    throw new IllegalArgumentException("Null 'result' argument.");
}

01:03:32.486 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result == null) {
    return null;
}

01:03:32.488 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:03:34.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:03:34.226 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:03:36.150 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:03:36.152 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:04:10.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 24 Chart_4
01:04:10.258 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:12.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:04:12.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:04:46.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:04:46.781 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:04:46.782 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:48.446 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:04:48.449 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:04:48.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:50.209 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:04:50.211 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:51.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:04:51.953 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:04:51.954 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:53.564 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:04:53.566 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===669
01:04:53.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (dataset instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            result = info.getDomainBounds(includeInterval);
        }
        else {
            result = iterateDomainBounds(dataset, includeInterval);
        }
01:04:53.636 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            result = info.getDomainBounds(includeInterval);
        }
        else {
            result = iterateDomainBounds(dataset, includeInterval);
        }
01:04:53.643 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval instanceof DomainInfo) {
            DomainInfo info = (DomainInfo) dataset;
            result = info.getDomainBounds(includeInterval);
        }
        else {
            result = iterateDomainBounds(dataset, includeInterval);
        }
01:04:53.650 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:04:55.588 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:04:55.589 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:05:29.716 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:05:29.718 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:05:31.427 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:05:31.429 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset != null) {
	

}

01:05:31.429 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    throw new IllegalArgumentException("Null 'dataset' argument.");
}

01:05:31.430 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    return null;
}

01:05:31.436 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:05:33.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:05:33.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:06:07.369 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:06:07.371 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:06:09.300 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:06:09.300 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:06:43.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:06:43.550 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:06:45.446 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:06:45.446 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:07:19.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:07:19.620 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: DomainInfo info = (DomainInfo) dataset;
            result = info.getDomainBounds(includeInterval);
        }
        else {
            result = iterateDomainBounds(dataset, includeInterval);
01:07:19.620 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
01:07:19.622 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:07:20.697 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:07:20.700 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:07:22.588 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:07:22.588 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:07:56.576 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
01:07:56.578 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:07:56.580 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:07:58.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:07:58.225 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:07:58.227 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:07:59.931 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:07:59.933 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:01.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:01.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:01.595 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:03.304 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:03.308 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:03.309 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:04.987 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:04.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:06.698 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:06.700 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:06.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:08.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:08.380 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:08.382 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:10.038 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:10.039 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:11.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:11.681 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:11.683 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:13.373 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:13.376 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:13.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:15.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:15.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:16.756 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:16.758 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:16.760 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:18.450 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:18.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===667
01:08:18.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
Range result = null;
01:08:18.549 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:18.555 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:20.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:20.350 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final Range result = null;
01:08:20.357 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:22.069 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:22.071 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:22.078 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:23.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:23.812 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:23.819 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:25.461 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:25.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:27.231 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:27.233 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:27.240 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:28.933 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:28.935 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:28.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:30.633 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:30.640 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:32.338 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:32.340 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:32.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:33.947 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:33.949 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:33.955 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:35.713 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:35.716 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:37.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:37.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:37.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:39.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:39.087 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:39.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:40.774 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:40.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:42.417 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:42.419 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:08:42.426 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:44.092 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:08:44.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.general.DatasetUtilities ===663
01:08:44.136 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (dataset == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
01:08:44.146 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset != null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
01:08:44.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:08:46.109 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:08:46.110 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:09:19.553 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 39 Chart_4
01:09:19.561 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset != null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
01:09:19.566 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:09:21.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:09:21.433 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:09:54.661 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 39 Chart_4
01:09:54.664 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (includeInterval == null) {
            throw new IllegalArgumentException("Null 'dataset' argument.");
        }
01:09:54.666 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:09:56.398 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:09:56.400 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: throw new IllegalArgumentException("Null 'dataset' argument.");
01:09:56.400 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
01:09:56.406 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:09:58.183 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:09:58.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:00.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:10:00.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:10:34.112 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:10:34.114 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:34.117 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:35.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:35.782 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:35.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:37.582 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:37.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:39.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:39.268 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:39.270 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:40.999 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:41.001 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:41.004 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:42.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:42.683 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:44.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:44.361 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:44.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:46.079 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:46.084 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:46.086 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:47.722 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:47.724 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:49.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:49.441 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:49.443 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:51.144 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:51.146 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:51.147 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:52.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:52.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:54.532 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:54.534 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:10:54.536 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:56.266 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:10:56.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===247
01:10:56.285 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return this.fixedIntervalWidth;
01:10:56.289 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
01:10:56.291 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.dataset;
01:10:56.292 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoWidth;
01:10:56.293 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.intervalPositionFactor;
01:10:56.294 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoIntervalWidth;
01:10:56.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:10:57.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:10:57.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:11:32.147 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 35 Chart_4
01:11:32.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:11:33.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:11:33.548 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:11:35.049 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:11:35.052 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:11:36.462 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:11:36.462 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:12:11.829 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 33 Chart_4
01:12:11.831 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:13.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:12:13.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:12:47.899 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 33 Chart_4
01:12:47.901 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:47.902 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:49.377 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:49.379 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:49.380 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:50.759 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:50.760 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:52.210 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:52.211 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:52.212 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:53.643 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:53.645 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:53.646 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:55.079 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:55.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:56.527 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:56.528 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:56.529 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:57.973 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:57.974 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:12:57.976 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:12:59.450 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:12:59.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:13:00.969 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:13:00.975 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:13:00.976 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:13:02.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:13:02.661 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===240
01:13:02.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (isAutoWidth() && !Double.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:13:02.674 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (!Double.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:13:02.674 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth()) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:13:02.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:13:04.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:13:04.485 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:13:39.481 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
01:13:39.483 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:13:40.966 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:13:40.967 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:14:15.754 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:14:15.756 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() || !Double.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:15.758 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:17.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:14:17.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:14:51.588 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
01:14:51.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !serialVersionUID.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.595 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !this.dataset.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.595 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !this.autoWidth.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.595 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !this.intervalPositionFactor.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !this.fixedIntervalWidth.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !this.autoIntervalWidth.isInfinite(this.autoIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !Double.isInfinite(serialVersionUID)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !Double.isInfinite(this.dataset)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !Double.isInfinite(this.autoWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !Double.isInfinite(this.intervalPositionFactor)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (isAutoWidth() && !Double.isInfinite(this.fixedIntervalWidth)) {
            // everything is fine: autoWidth is on, and an autoIntervalWidth
            // was set.
            return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
        }
01:14:51.601 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:52.875 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:52.877 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:54.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:54.314 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:55.652 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:55.654 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:57.096 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:57.097 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:58.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:58.440 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:14:59.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:14:59.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:15:01.177 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:15:01.178 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:15:35.319 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:15:35.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:15:36.639 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:15:36.645 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:15:38.146 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:15:38.147 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:15:39.601 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:15:39.601 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:16:14.577 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:16:14.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:16.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:16:16.095 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:16:50.496 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:16:50.498 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoIntervalWidth;
        }
        else {
            // either autoWidth is off or autoIntervalWidth was not set.
            return this.fixedIntervalWidth;
01:16:50.498 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
01:16:50.499 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:51.458 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:51.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:52.932 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:52.934 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:16:52.936 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:54.276 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:54.278 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:16:54.280 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:55.602 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:55.603 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:57.084 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:57.086 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:16:57.088 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:58.531 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:58.533 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:16:58.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:16:59.906 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:16:59.908 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:01.355 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:01.357 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:01.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:02.710 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:02.712 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:02.715 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:04.129 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:04.134 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:05.465 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:05.470 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:05.472 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:06.860 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:06.864 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:06.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:08.214 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:08.215 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:09.634 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:09.636 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:09.638 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:11.082 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:11.084 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:11.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:12.529 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:12.530 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:13.988 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:13.990 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:13.991 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:15.313 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:15.314 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:15.316 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:16.760 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:16.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:18.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:18.183 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:18.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:19.512 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:19.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:19.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:20.855 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:20.856 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:22.247 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:22.248 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:17:22.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:23.606 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:17:23.607 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===177
01:17:23.616 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return this.intervalPositionFactor;
01:17:23.621 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
01:17:23.622 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.dataset;
01:17:23.622 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoWidth;
01:17:23.623 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.fixedIntervalWidth;
01:17:23.623 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.autoIntervalWidth;
01:17:23.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:17:25.148 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:17:25.149 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:17:59.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
01:17:59.639 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:18:01.099 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:18:01.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:18:02.516 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:18:02.518 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:18:04.049 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:18:04.049 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:18:38.732 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 32 Chart_4
01:18:38.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:18:40.268 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:18:40.268 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:19:14.577 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 36 Chart_4
01:19:14.579 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:14.581 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:16.000 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:16.003 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:16.004 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:17.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:17.521 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:18.942 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:18.944 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:18.945 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:20.447 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:20.448 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:20.449 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:21.900 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:21.901 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:23.359 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:23.361 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:23.364 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:24.659 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:24.662 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:24.664 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:26.020 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:26.022 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:27.530 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:27.532 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:27.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:29.049 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:29.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.data.xy.IntervalXYDelegate ===150
01:19:29.070 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return this.autoWidth;
01:19:29.076 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:29.077 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:30.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:30.541 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:30.542 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:31.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:31.946 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:33.402 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:33.403 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:33.406 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:34.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:34.803 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:34.805 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:36.237 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:36.238 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:37.709 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:37.711 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:37.712 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:39.054 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:39.056 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:39.057 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:40.517 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:40.520 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:41.972 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:41.976 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:41.980 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:43.309 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:43.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1576
01:19:43.457 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return getRenderer(0);
01:19:43.462 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:43.466 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:45.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:45.765 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:45.768 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:48.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:48.098 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:50.342 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:50.345 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:50.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:52.559 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:52.567 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:52.585 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:54.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:54.819 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:57.000 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:57.002 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:57.005 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:19:59.231 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:19:59.235 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:19:59.237 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:01.488 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:01.491 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:03.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:03.551 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:20:03.554 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:05.767 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:05.769 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1490
01:20:05.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
01:20:05.843 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(plot, xAxis, yAxis, null);
01:20:05.843 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(yAxis, xAxis, yAxis, null);
01:20:05.843 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(xAxis, xAxis, yAxis, null);
01:20:05.844 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(title, xAxis, yAxis, null);
01:20:05.844 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(xAxisLabel, xAxis, yAxis, null);
01:20:05.845 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(yAxisLabel, xAxis, yAxis, null);
01:20:05.846 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(orientation, xAxis, yAxis, null);
01:20:05.846 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(legend, xAxis, yAxis, null);
01:20:05.846 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(tooltips, xAxis, yAxis, null);
01:20:05.847 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(urls, xAxis, yAxis, null);
01:20:05.847 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(currentTheme, xAxis, yAxis, null);
01:20:05.847 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, plot, yAxis, null);
01:20:05.848 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, yAxis, yAxis, null);
01:20:05.848 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, title, yAxis, null);
01:20:05.849 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxisLabel, yAxis, null);
01:20:05.849 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, yAxisLabel, yAxis, null);
01:20:05.849 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, dataset, yAxis, null);
01:20:05.851 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, orientation, yAxis, null);
01:20:05.851 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, legend, yAxis, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, tooltips, yAxis, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, urls, yAxis, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, currentTheme, yAxis, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, plot, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, xAxis, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, title, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, xAxisLabel, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, yAxisLabel, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, dataset, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, orientation, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, legend, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, tooltips, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, urls, null);
01:20:05.852 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: XYPlot plot = new XYPlot(dataset, xAxis, currentTheme, null);
01:20:05.855 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:07.724 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:07.727 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:09.442 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:09.444 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:11.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:11.206 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:13.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:13.045 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:14.825 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:14.828 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:16.561 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:16.564 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:18.330 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:18.340 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:20.087 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:20.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:21.845 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:21.847 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:23.610 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:23.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:25.426 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:25.429 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:27.172 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:20:27.174 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:20:29.125 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:20:29.125 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:21:03.025 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:21:03.028 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:04.783 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:04.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:06.621 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:06.623 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:08.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:08.439 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:10.310 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:10.313 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:12.127 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:12.129 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:13.895 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:13.899 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:15.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:15.683 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:17.506 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:17.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:19.257 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:19.259 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:21.067 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:21.069 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:23.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:21:23.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:21:57.284 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:21:57.287 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:21:59.052 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:21:59.054 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:00.890 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:00.892 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:02.634 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:02.637 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:04.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:04.393 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:06.113 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:06.115 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:07.877 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:07.884 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:09.653 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:09.655 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:11.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:11.380 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:13.153 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:13.155 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset != null) {
	

}

01:22:13.156 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    throw new IllegalArgumentException("Null 'dataset' argument.");
}

01:22:13.157 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
    return null;
}

01:22:13.157 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis != null) {
	

}

01:22:13.158 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis == null) {
    throw new IllegalArgumentException("Null 'xAxis' argument.");
}

01:22:13.159 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis == null) {
    return null;
}

01:22:13.159 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis != null) {
	

}

01:22:13.160 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis == null) {
    throw new IllegalArgumentException("Null 'yAxis' argument.");
}

01:22:13.160 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis == null) {
    return null;
}

01:22:13.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:14.876 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:22:14.879 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:16.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:22:16.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:22:51.158 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:22:51.160 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:22:53.129 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:22:53.129 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:23:27.572 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:23:27.574 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:23:29.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:23:29.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:23:31.331 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:23:31.331 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:24:05.488 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:24:05.494 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:24:07.320 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:24:07.320 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:24:41.797 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:24:41.799 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:24:43.604 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:24:43.607 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:24:45.493 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:24:45.493 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:25:20.022 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:25:20.025 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:25:21.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:25:21.911 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:25:56.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:25:56.054 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:25:56.057 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:25:57.856 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:25:57.859 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
01:25:57.866 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:25:59.803 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:25:59.803 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:26:33.797 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:26:33.810 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:26:33.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:26:35.772 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:26:35.772 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:27:09.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:27:09.821 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:27:09.823 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:27:11.798 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:27:11.799 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:27:46.047 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:27:46.050 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:27:47.901 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:27:47.902 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:28:26.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:28:26.687 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:28:26.689 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:28:28.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:28:28.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:29:04.547 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:29:04.550 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:29:04.552 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:29:06.474 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:29:06.475 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:29:40.758 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:29:40.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:29:42.755 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:29:42.755 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:30:16.669 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:30:16.670 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:30:16.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:30:18.577 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:30:18.578 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:30:53.008 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:30:53.011 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:30:53.015 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:30:54.873 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:30:54.873 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:31:28.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:31:28.862 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:31:30.822 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:31:30.822 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:32:05.181 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:32:05.183 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:32:05.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:32:07.139 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:32:07.139 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:32:41.259 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:32:41.261 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:32:41.263 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:32:43.132 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:32:43.133 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:33:17.194 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:33:17.196 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:33:19.133 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:33:19.134 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:33:53.125 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:33:53.128 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:33:53.166 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:33:55.069 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:33:55.069 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:34:29.379 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:34:29.382 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:34:29.389 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:34:31.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:34:31.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:35:05.261 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:35:05.264 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:35:07.270 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:35:07.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:35:41.553 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:35:41.557 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:35:41.560 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:35:43.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:35:43.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:36:17.581 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:36:17.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:36:17.585 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:36:19.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:36:19.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:36:53.748 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:36:53.755 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:36:55.638 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:36:55.639 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:37:29.943 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:37:29.950 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:37:29.952 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:37:31.872 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:37:31.872 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:38:06.380 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:38:06.381 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1488
01:38:06.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
yAxis.setAutoRangeIncludesZero(false);
01:38:06.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: xAxis.setAutoRangeIncludesZero(false);
01:38:06.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: title.setAutoRangeIncludesZero(false);
01:38:06.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: xAxisLabel.setAutoRangeIncludesZero(false);
01:38:06.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: yAxisLabel.setAutoRangeIncludesZero(false);
01:38:06.487 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: dataset.setAutoRangeIncludesZero(false);
01:38:06.488 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: orientation.setAutoRangeIncludesZero(false);
01:38:06.488 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: legend.setAutoRangeIncludesZero(false);
01:38:06.489 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: tooltips.setAutoRangeIncludesZero(false);
01:38:06.489 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: urls.setAutoRangeIncludesZero(false);
01:38:06.490 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: currentTheme.setAutoRangeIncludesZero(false);
01:38:06.493 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:08.476 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:38:08.476 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:38:42.738 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:38:42.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:44.483 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:44.487 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:46.287 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:46.293 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:47.994 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:47.998 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:49.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:49.765 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:51.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:51.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:53.349 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:53.351 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:55.078 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:55.080 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:56.890 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:56.891 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:38:58.685 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:38:58.687 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis != null) {
	

}

01:38:58.688 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis == null) {
    throw new IllegalArgumentException("Null 'yAxis' argument.");
}

01:38:58.688 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxis == null) {
    return null;
}

01:38:58.690 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:39:00.440 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:39:00.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:39:02.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:39:02.421 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:39:36.870 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:39:36.873 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:39:38.807 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:39:38.808 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:40:13.192 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:40:13.195 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:40:13.197 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:40:15.176 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:40:15.177 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:40:48.787 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:40:48.794 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:40:48.795 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:40:50.701 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:40:50.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:41:25.267 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:41:25.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:41:27.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:41:27.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:42:01.699 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:42:01.701 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:42:01.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:42:03.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:42:03.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:42:37.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:42:37.939 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:42:37.941 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:42:39.876 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:42:39.876 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:43:13.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:43:13.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:43:15.792 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:43:15.792 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:43:50.399 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:43:50.401 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:43:50.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:43:52.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:43:52.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:44:26.645 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:44:26.648 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:44:26.650 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:44:28.519 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:44:28.519 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:45:02.739 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:45:02.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:45:04.733 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:45:04.734 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:45:39.498 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:45:39.504 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:45:39.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:45:41.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:45:41.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:46:20.532 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:46:20.539 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1487
01:46:20.600 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
NumberAxis yAxis = new NumberAxis(yAxisLabel);
01:46:20.602 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(yAxis);
01:46:20.602 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(xAxis);
01:46:20.602 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(title);
01:46:20.602 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(xAxisLabel);
01:46:20.602 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(dataset);
01:46:20.603 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(orientation);
01:46:20.605 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(legend);
01:46:20.605 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(tooltips);
01:46:20.606 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(urls);
01:46:20.607 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis yAxis = new NumberAxis(currentTheme);
01:46:20.609 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:46:22.751 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:46:22.754 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:46:24.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:46:24.847 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:46:27.124 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:46:27.125 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:47:06.730 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:47:06.733 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:08.977 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:47:08.977 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:47:47.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:47:47.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:49.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:49.631 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:51.407 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:51.409 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:53.166 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:53.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:54.942 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:54.944 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:56.705 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:56.707 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:47:58.352 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:47:58.354 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxisLabel != null) {
	

}

01:47:58.357 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxisLabel == null) {
    throw new IllegalArgumentException("Null 'yAxisLabel' argument.");
}

01:47:58.360 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxisLabel == null) {
    return null;
}

01:47:58.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:48:00.112 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:48:00.115 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:48:02.110 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:48:02.110 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:48:36.581 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:48:36.583 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:48:38.623 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:48:38.623 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:49:12.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:49:12.993 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:49:12.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:49:14.893 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:49:14.895 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final NumberAxis yAxis = new NumberAxis(yAxisLabel);
01:49:14.897 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:49:16.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:49:16.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:49:51.249 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:49:51.251 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:49:51.254 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:49:53.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:49:53.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:50:27.851 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:50:27.855 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:50:27.857 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:50:29.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:50:29.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:51:03.775 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:51:03.782 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:51:05.715 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:51:05.716 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:51:39.962 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:51:39.964 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:51:39.968 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:51:41.861 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:51:41.861 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:52:16.001 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:52:16.009 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:52:16.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:52:17.926 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:52:17.927 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:52:52.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:52:52.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:52:54.242 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:52:54.242 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:53:28.620 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:53:28.627 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:53:28.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:53:30.621 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:53:30.622 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:54:05.436 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:54:05.439 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:54:05.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:54:07.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:54:07.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:54:41.109 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:54:41.112 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:54:42.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:54:42.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:55:17.197 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:55:17.199 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:55:17.208 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:55:19.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:55:19.046 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:55:52.593 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:55:52.596 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:55:52.599 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:55:54.519 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:55:54.519 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:56:28.517 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:56:28.519 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:56:30.493 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:56:30.493 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:57:04.732 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:57:04.735 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:57:04.736 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:57:06.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:57:06.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:57:40.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:57:40.811 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:57:40.813 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:57:42.767 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:57:42.767 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:58:16.714 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:58:16.717 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:58:18.665 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:58:18.665 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:58:52.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:58:52.539 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
01:58:52.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:58:54.518 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:58:54.518 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
01:59:29.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
01:59:29.246 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1486
01:59:29.317 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
xAxis.setAutoRangeIncludesZero(false);
01:59:29.320 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: title.setAutoRangeIncludesZero(false);
01:59:29.320 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: xAxisLabel.setAutoRangeIncludesZero(false);
01:59:29.321 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: yAxisLabel.setAutoRangeIncludesZero(false);
01:59:29.321 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: dataset.setAutoRangeIncludesZero(false);
01:59:29.321 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: orientation.setAutoRangeIncludesZero(false);
01:59:29.321 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: legend.setAutoRangeIncludesZero(false);
01:59:29.321 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: tooltips.setAutoRangeIncludesZero(false);
01:59:29.322 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: urls.setAutoRangeIncludesZero(false);
01:59:29.322 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: currentTheme.setAutoRangeIncludesZero(false);
01:59:29.324 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:31.028 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:31.030 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:32.806 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:32.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:34.689 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:34.692 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:36.509 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:36.511 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:38.232 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:38.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:40.060 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:40.062 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:41.795 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:41.804 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:43.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:43.510 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:45.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:45.274 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis != null) {
	

}

01:59:45.275 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis == null) {
    throw new IllegalArgumentException("Null 'xAxis' argument.");
}

01:59:45.278 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxis == null) {
    return null;
}

01:59:45.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:47.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
01:59:47.010 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
01:59:48.959 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
01:59:48.959 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:00:23.395 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:00:23.397 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:00:25.396 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:00:25.397 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:00:59.661 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:00:59.663 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:00:59.665 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:01:01.612 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:01:01.613 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:01:35.873 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:01:35.875 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:01:35.877 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:01:37.916 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:01:37.916 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:02:11.836 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:02:11.838 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:02:13.738 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:02:13.739 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:02:47.958 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:02:47.960 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:02:47.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:02:49.914 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:02:49.914 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:03:24.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:03:24.225 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:03:24.227 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:03:26.221 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:03:26.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:04:00.143 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:04:00.150 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:04:02.019 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:04:02.019 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:04:36.076 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:04:36.083 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:04:36.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:04:37.952 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:04:37.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:05:11.964 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:05:11.967 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:05:11.970 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:05:14.043 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:05:14.043 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:05:48.055 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:05:48.058 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:05:49.994 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:05:49.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:06:23.978 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:06:23.980 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:06:23.983 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:06:25.985 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:06:25.985 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:07:00.358 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:07:00.360 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1485
02:07:00.442 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
NumberAxis xAxis = new NumberAxis(xAxisLabel);
02:07:00.444 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(xAxis);
02:07:00.445 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(title);
02:07:00.445 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(yAxisLabel);
02:07:00.445 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(dataset);
02:07:00.447 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(orientation);
02:07:00.447 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(legend);
02:07:00.448 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(tooltips);
02:07:00.451 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(urls);
02:07:00.452 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: NumberAxis xAxis = new NumberAxis(currentTheme);
02:07:00.455 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:07:02.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:07:02.406 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:07:04.409 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:07:04.410 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:07:38.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:07:38.673 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:07:40.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:07:40.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:08:14.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:08:14.946 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:16.735 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:16.738 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:18.557 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:18.559 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:20.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:20.307 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:22.109 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:22.112 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:23.924 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:23.927 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:25.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:25.763 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxisLabel != null) {
	

}

02:08:25.764 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxisLabel == null) {
    throw new IllegalArgumentException("Null 'xAxisLabel' argument.");
}

02:08:25.766 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxisLabel == null) {
    return null;
}

02:08:25.768 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:27.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:08:27.466 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:08:29.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:08:29.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:09:03.983 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:09:03.989 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:09:06.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:09:06.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:09:40.496 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:09:40.500 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:09:40.502 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:09:42.270 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:09:42.272 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final NumberAxis xAxis = new NumberAxis(xAxisLabel);
02:09:42.274 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:09:44.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:09:44.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:10:18.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:10:18.639 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:10:18.641 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:10:20.615 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:10:20.615 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:10:54.412 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:10:54.415 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:10:54.417 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:10:56.439 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:10:56.439 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:11:30.727 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:11:30.729 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:11:32.562 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:11:32.564 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:12:06.664 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:12:06.670 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:12:06.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:12:08.607 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:12:08.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:12:43.603 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:12:43.606 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:12:43.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:12:45.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:12:45.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:13:19.600 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:13:19.606 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:13:21.497 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:13:21.497 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:13:55.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:13:55.711 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:13:55.714 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:13:57.642 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:13:57.642 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:14:31.828 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:14:31.830 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:14:31.832 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:14:33.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:14:33.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:15:07.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:15:07.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:15:09.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:15:09.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:15:44.109 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:15:44.111 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:15:44.113 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:15:46.032 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:15:46.033 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:16:20.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:16:20.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:16:20.457 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:16:22.334 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:16:22.335 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:16:57.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:16:57.041 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:16:58.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:16:58.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:17:33.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:17:33.040 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:17:33.043 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:17:35.010 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:17:35.010 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:18:09.099 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:18:09.101 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:18:09.104 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:18:10.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:18:10.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:18:45.174 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:18:45.179 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:18:47.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:18:47.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:19:20.897 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:19:20.899 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:19:20.901 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:19:22.849 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:19:22.849 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:19:56.589 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:19:56.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.ChartFactory ===1482
02:19:56.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (orientation == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:19:56.686 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (orientation != null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:19:56.692 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:19:58.612 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:19:58.612 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:20:33.248 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:20:33.251 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (orientation != null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:20:33.253 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:20:35.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:20:35.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:21:09.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:21:09.286 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (title == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.286 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (xAxisLabel == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (yAxisLabel == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (dataset == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (legend == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (tooltips == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (urls == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.287 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (currentTheme == null) {
            throw new IllegalArgumentException("Null 'orientation' argument.");
        }
02:21:09.289 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:21:11.288 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:21:11.289 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:21:46.334 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:21:46.337 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:21:48.319 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:21:48.319 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:22:22.702 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:22:22.704 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:22:24.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:22:24.660 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:23:00.507 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:23:00.510 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:23:02.416 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:23:02.416 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:23:37.097 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:23:37.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:23:38.925 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:23:38.927 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:23:40.666 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:23:40.672 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:23:42.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:23:42.273 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:23:44.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:23:44.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:24:18.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:24:18.536 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: throw new IllegalArgumentException("Null 'orientation' argument.");
02:24:18.536 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
02:24:18.538 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:24:20.390 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:24:20.392 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:24:22.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:24:22.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:24:56.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:24:56.308 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:24:56.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:24:58.220 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:24:58.222 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:25:32.274 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:25:32.276 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:25:32.278 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:25:34.240 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:25:34.240 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:26:08.287 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:26:08.290 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:26:10.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:26:10.163 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:26:44.391 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:26:44.397 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:26:44.400 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:26:46.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:26:46.296 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:27:20.300 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:27:20.304 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:27:20.306 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:27:22.249 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:27:22.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:27:56.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:27:56.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:27:58.302 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:27:58.302 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:28:33.654 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:28:33.658 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:28:33.661 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:28:35.941 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:28:35.942 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:29:10.574 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:29:10.580 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:29:10.581 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:29:12.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:29:12.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:29:46.755 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:29:46.762 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:29:48.711 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:29:48.712 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:30:23.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:30:23.847 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:30:23.850 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:30:25.819 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:30:25.819 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:30:59.967 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:30:59.973 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:30:59.974 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:31:01.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:31:01.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:31:36.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:31:36.522 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:31:38.358 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:31:38.359 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:32:12.598 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:32:12.600 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:32:12.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:14.536 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:32:14.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:32:48.442 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:32:48.448 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1591
02:32:48.572 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
result = (XYItemRenderer) this.renderers.get(index);
02:32:48.580 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) result.get(index);
02:32:48.580 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) index.get(index);
02:32:48.580 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) serialVersionUID.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) localizationResources.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.orientation.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.axisOffset.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainAxes.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainAxisLocations.get(index);
02:32:48.581 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeAxes.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeAxisLocations.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.datasets.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.datasetToDomainAxesMap.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.datasetToRangeAxesMap.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.quadrantOrigin.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.quadrantPaint.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainGridlinesVisible.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainGridlineStroke.get(index);
02:32:48.582 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainGridlinePaint.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeGridlinesVisible.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeGridlineStroke.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeGridlinePaint.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainMinorGridlinesVisible.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainMinorGridlineStroke.get(index);
02:32:48.583 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainMinorGridlinePaint.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeMinorGridlinesVisible.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeMinorGridlineStroke.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeMinorGridlinePaint.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainZeroBaselineVisible.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainZeroBaselineStroke.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainZeroBaselinePaint.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeZeroBaselineVisible.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeZeroBaselineStroke.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeZeroBaselinePaint.get(index);
02:32:48.584 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainCrosshairVisible.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainCrosshairValue.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainCrosshairStroke.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainCrosshairPaint.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainCrosshairLockedOnData.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeCrosshairVisible.get(index);
02:32:48.585 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeCrosshairValue.get(index);
02:32:48.586 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeCrosshairStroke.get(index);
02:32:48.586 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeCrosshairPaint.get(index);
02:32:48.586 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeCrosshairLockedOnData.get(index);
02:32:48.587 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.foregroundDomainMarkers.get(index);
02:32:48.587 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.backgroundDomainMarkers.get(index);
02:32:48.587 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.foregroundRangeMarkers.get(index);
02:32:48.587 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.backgroundRangeMarkers.get(index);
02:32:48.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.annotations.get(index);
02:32:48.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainTickBandPaint.get(index);
02:32:48.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangeTickBandPaint.get(index);
02:32:48.588 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.fixedDomainAxisSpace.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.fixedRangeAxisSpace.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.datasetRenderingOrder.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.seriesRenderingOrder.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.weight.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.fixedLegendItems.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.domainPannable.get(index);
02:32:48.589 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.rangePannable.get(index);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(result);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(serialVersionUID);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(localizationResources);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.orientation);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.axisOffset);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainAxes);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainAxisLocations);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeAxes);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeAxisLocations);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.datasets);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.renderers);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.datasetToDomainAxesMap);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.datasetToRangeAxesMap);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.quadrantOrigin);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.quadrantPaint);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainGridlinesVisible);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainGridlineStroke);
02:32:48.590 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainGridlinePaint);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeGridlinesVisible);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeGridlineStroke);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeGridlinePaint);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainMinorGridlinesVisible);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainMinorGridlineStroke);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainMinorGridlinePaint);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeMinorGridlinesVisible);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeMinorGridlineStroke);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeMinorGridlinePaint);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainZeroBaselineVisible);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainZeroBaselineStroke);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainZeroBaselinePaint);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeZeroBaselineVisible);
02:32:48.591 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeZeroBaselineStroke);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeZeroBaselinePaint);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainCrosshairVisible);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainCrosshairValue);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainCrosshairStroke);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainCrosshairPaint);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainCrosshairLockedOnData);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeCrosshairVisible);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeCrosshairValue);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeCrosshairStroke);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeCrosshairPaint);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeCrosshairLockedOnData);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.foregroundDomainMarkers);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.backgroundDomainMarkers);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.foregroundRangeMarkers);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.backgroundRangeMarkers);
02:32:48.592 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.annotations);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainTickBandPaint);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangeTickBandPaint);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.fixedDomainAxisSpace);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.fixedRangeAxisSpace);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.datasetRenderingOrder);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.seriesRenderingOrder);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.weight);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.fixedLegendItems);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.domainPannable);
02:32:48.593 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(this.rangePannable);
02:32:48.596 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:50.855 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:32:50.858 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:52.967 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:32:52.970 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:55.245 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:32:55.249 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:57.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:32:57.435 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:32:59.673 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:32:59.676 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:33:01.988 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:33:01.990 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:33:04.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:33:04.387 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:33:37.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 76 Chart_4
02:33:37.336 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:33:39.810 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:33:39.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:34:12.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:34:12.804 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:34:15.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:34:15.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:34:48.128 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 76 Chart_4
02:34:48.132 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:34:50.675 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:34:50.676 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:35:23.325 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:35:23.329 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:35:25.851 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:35:25.852 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:35:59.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 75 Chart_4
02:35:59.037 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:36:01.567 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:36:01.568 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:36:34.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:36:34.973 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:36:37.418 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:36:37.418 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:37:10.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:37:10.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:12.836 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:12.840 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:15.034 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:15.045 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:17.335 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:17.342 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:19.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:19.660 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:21.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:21.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:24.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:24.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:26.410 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:26.413 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:28.587 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:28.590 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:30.766 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:30.770 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:33.104 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:33.111 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:35.342 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:35.344 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:37.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:37.594 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:39.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:39.854 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:42.105 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:42.108 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:44.383 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:44.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:46.551 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:46.566 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:48.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:48.815 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:51.025 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:51.028 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:53.336 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:53.343 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:55.527 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:55.530 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:37:57.780 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:37:57.782 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:00.026 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:00.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:02.322 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:02.325 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:04.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:04.521 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:06.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:06.815 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:09.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:09.092 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:11.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:11.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:13.614 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:13.619 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:15.812 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:15.815 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:18.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:38:18.088 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:20.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:38:20.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:38:54.359 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 38 Chart_4
02:38:54.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:38:56.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:38:56.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:39:30.404 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 38 Chart_4
02:39:30.407 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:39:33.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:39:33.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:40:06.747 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 38 Chart_4
02:40:06.754 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:40:09.239 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:40:09.239 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:40:42.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 38 Chart_4
02:40:42.424 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:40:44.858 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:40:44.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:41:18.147 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:41:18.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:20.428 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:20.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:22.693 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:22.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:24.947 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:24.950 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:27.153 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:27.156 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:29.474 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:29.477 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:31.735 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:31.738 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:33.863 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:41:33.866 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:41:36.533 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:41:36.534 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:42:09.950 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 78 Chart_4
02:42:09.953 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:12.183 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:12.187 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:14.451 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:14.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:16.723 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:16.726 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:18.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:18.933 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:21.178 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:21.186 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:23.340 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:23.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:25.559 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:25.563 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:27.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:27.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:30.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:30.092 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:32.326 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:32.329 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:34.482 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:34.485 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:36.618 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:36.621 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:38.832 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:38.837 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:41.116 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:41.119 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:43.406 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:43.409 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:45.653 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:45.656 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:47.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:47.943 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:50.220 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:50.223 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:52.511 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:52.514 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:54.706 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:54.709 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:56.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:56.849 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:42:59.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:42:59.049 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:01.315 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:01.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:03.602 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:03.605 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:05.843 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:05.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:08.165 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:08.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:10.409 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:10.413 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:12.656 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:12.659 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:14.790 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:14.792 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:17.019 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:17.021 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:19.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:19.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:21.557 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:21.560 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:23.861 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:23.865 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:26.163 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:26.169 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:28.475 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:28.478 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:30.610 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:30.617 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:32.653 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:32.656 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:35.116 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:35.120 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:37.396 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:37.400 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:39.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:39.582 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:41.838 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:41.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:44.079 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:44.083 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:46.299 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:46.303 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:48.591 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:48.595 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:50.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:50.781 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:53.064 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:53.067 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:55.227 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:55.230 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:57.397 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:57.400 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:43:59.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:43:59.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:01.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:01.697 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:03.920 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:03.923 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:06.201 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:06.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:08.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:08.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:10.668 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:10.675 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:12.920 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:12.923 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:15.163 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:15.166 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:17.684 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:44:17.686 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:44:52.494 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 36 Chart_4
02:44:52.497 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:55.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:55.048 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:44:57.746 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:44:57.751 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:45:00.365 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:45:00.379 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers != null) {
	

}

02:45:00.379 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers == null) {
    throw new IllegalArgumentException("Null 'this.renderers' argument.");
}

02:45:00.381 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers == null) {
    return null;
}

02:45:00.389 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:45:03.257 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:45:03.257 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:45:42.993 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:45:43.001 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:45:45.994 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:45:45.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:46:24.064 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:46:24.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:46:27.063 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:46:27.063 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:47:06.026 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:47:06.030 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Object _tempVar = this.renderers.get(index);
if (_temVar instanceof XYItemRenderer) {
	

} else {
	throw new IllegalArgumentException("Illegal argument: this.renderers.get(index)");
}

02:47:06.032 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:08.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:08.707 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:08.714 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:11.397 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:11.400 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:11.407 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:14.074 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:14.077 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:16.684 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:16.688 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:16.693 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:19.255 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:19.259 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:19.263 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:21.903 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:21.907 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:24.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:24.814 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:24.817 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:27.445 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:27.448 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:27.418 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:30.128 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:30.131 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:32.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:32.748 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:32.750 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:35.430 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:35.433 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:35.448 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:38.006 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:38.009 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:40.629 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:40.634 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:40.638 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:43.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:43.253 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:43.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:45.844 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:45.848 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:48.640 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:48.648 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:48.651 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:51.280 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:51.285 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:51.293 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:53.971 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:53.975 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:56.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:56.552 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:56.554 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:47:59.079 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:47:59.082 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:47:59.086 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:01.692 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:01.696 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:04.863 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:04.866 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:48:04.870 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:07.645 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:07.649 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:48:07.653 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:10.450 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:10.456 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:13.177 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:13.180 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:48:13.183 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:16.003 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:16.005 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1593
02:48:16.169 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
return result;
02:48:16.173 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return index;
02:48:16.175 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return serialVersionUID;
02:48:16.176 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return localizationResources;
02:48:16.178 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.orientation;
02:48:16.180 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.axisOffset;
02:48:16.180 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainAxes;
02:48:16.182 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainAxisLocations;
02:48:16.183 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeAxes;
02:48:16.184 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeAxisLocations;
02:48:16.184 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.datasets;
02:48:16.185 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.renderers;
02:48:16.186 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.datasetToDomainAxesMap;
02:48:16.187 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.datasetToRangeAxesMap;
02:48:16.189 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.quadrantOrigin;
02:48:16.190 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.quadrantPaint;
02:48:16.190 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainGridlinesVisible;
02:48:16.191 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainGridlineStroke;
02:48:16.192 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainGridlinePaint;
02:48:16.193 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeGridlinesVisible;
02:48:16.193 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeGridlineStroke;
02:48:16.193 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeGridlinePaint;
02:48:16.194 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainMinorGridlinesVisible;
02:48:16.195 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainMinorGridlineStroke;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainMinorGridlinePaint;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeMinorGridlinesVisible;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeMinorGridlineStroke;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeMinorGridlinePaint;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainZeroBaselineVisible;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainZeroBaselineStroke;
02:48:16.196 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainZeroBaselinePaint;
02:48:16.197 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeZeroBaselineVisible;
02:48:16.197 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeZeroBaselineStroke;
02:48:16.198 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeZeroBaselinePaint;
02:48:16.198 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainCrosshairVisible;
02:48:16.198 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainCrosshairValue;
02:48:16.200 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainCrosshairStroke;
02:48:16.200 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainCrosshairPaint;
02:48:16.200 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainCrosshairLockedOnData;
02:48:16.200 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeCrosshairVisible;
02:48:16.201 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeCrosshairValue;
02:48:16.201 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeCrosshairStroke;
02:48:16.202 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeCrosshairPaint;
02:48:16.202 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeCrosshairLockedOnData;
02:48:16.202 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.foregroundDomainMarkers;
02:48:16.203 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.backgroundDomainMarkers;
02:48:16.204 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.foregroundRangeMarkers;
02:48:16.204 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.backgroundRangeMarkers;
02:48:16.204 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.annotations;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainTickBandPaint;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangeTickBandPaint;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.fixedDomainAxisSpace;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.fixedRangeAxisSpace;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.datasetRenderingOrder;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.seriesRenderingOrder;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.weight;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.fixedLegendItems;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.domainPannable;
02:48:16.205 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: return this.rangePannable;
02:48:16.208 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:19.086 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:19.091 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:21.933 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:21.935 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:24.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:24.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:27.421 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:27.424 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:30.159 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:30.173 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:32.822 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:32.825 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:35.481 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:35.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:38.068 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:38.072 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:43.564 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:43.568 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:46.103 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:46.107 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:48.344 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:48.347 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:50.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:50.639 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:52.960 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:52.963 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:55.214 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:55.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:57.467 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:57.470 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:48:59.784 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:48:59.787 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:02.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:02.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:04.283 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:04.286 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:06.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:06.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:08.734 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:08.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:11.042 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:11.045 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:13.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:13.227 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:15.522 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:15.525 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:17.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:17.753 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:20.008 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:20.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:22.324 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:22.331 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:24.577 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:24.580 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:26.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:26.814 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:29.024 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:29.026 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:31.248 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:31.251 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:33.651 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:33.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:35.843 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:35.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:38.113 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:38.115 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:40.512 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:40.515 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:42.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:42.783 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:45.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:45.015 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:47.268 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:47.271 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:49.598 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:49.601 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:51.866 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:51.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:54.055 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:54.058 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:56.343 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:56.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:49:58.576 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:49:58.592 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:00.911 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:00.914 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:03.205 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:03.209 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:05.360 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:05.363 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:07.450 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:07.453 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:09.694 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:09.697 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:11.940 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:11.943 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:14.191 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:14.193 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:16.387 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:16.391 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:18.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:18.582 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:20.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:20.763 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:23.041 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:23.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:25.249 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:25.252 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:27.392 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:27.396 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:29.695 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:29.699 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:31.865 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:31.868 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:34.092 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:34.096 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result != null) {
	

}

02:50:34.096 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result == null) {
    throw new IllegalArgumentException("Null 'result' argument.");
}

02:50:34.097 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result == null) {
    return null;
}

02:50:34.100 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:36.345 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:50:36.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:50:38.980 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:50:38.981 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:51:13.192 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 31 Chart_4
02:51:13.196 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:51:15.756 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:51:15.757 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:51:50.172 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:51:50.175 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:51:50.177 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:51:52.373 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:51:52.375 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:51:52.378 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:51:54.640 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:51:54.643 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:51:56.958 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:51:56.961 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
02:51:56.964 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:51:59.201 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:51:59.203 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1590
02:51:59.306 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
if (this.renderers.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:51:59.308 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() >= index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:51:59.308 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() <= index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:51:59.308 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() < index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:51:59.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:52:01.826 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:52:01.827 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:52:36.217 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:52:36.220 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:52:38.745 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:52:38.745 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:53:12.288 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
02:53:12.291 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:53:14.828 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:53:14.828 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:53:48.436 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (result.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (index.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (serialVersionUID.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (localizationResources.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.orientation.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.453 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.axisOffset.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainAxes.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainAxisLocations.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeAxes.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeAxisLocations.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.datasets.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.454 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.datasetToDomainAxesMap.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.datasetToRangeAxesMap.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.quadrantOrigin.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.quadrantPaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainGridlinesVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainGridlineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainGridlinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeGridlinesVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.455 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeGridlineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeGridlinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainMinorGridlinesVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainMinorGridlineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainMinorGridlinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeMinorGridlinesVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeMinorGridlineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeMinorGridlinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainZeroBaselineVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainZeroBaselineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainZeroBaselinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeZeroBaselineVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeZeroBaselineStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeZeroBaselinePaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainCrosshairVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.456 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainCrosshairValue.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainCrosshairStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainCrosshairPaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainCrosshairLockedOnData.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeCrosshairVisible.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeCrosshairValue.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeCrosshairStroke.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeCrosshairPaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeCrosshairLockedOnData.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.foregroundDomainMarkers.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.backgroundDomainMarkers.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.457 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.foregroundRangeMarkers.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.backgroundRangeMarkers.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.annotations.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainTickBandPaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangeTickBandPaint.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.fixedDomainAxisSpace.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.fixedRangeAxisSpace.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.datasetRenderingOrder.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.458 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.seriesRenderingOrder.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.weight.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.fixedLegendItems.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.domainPannable.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.rangePannable.size() > index) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > result) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.459 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > serialVersionUID) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > localizationResources) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.orientation) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.axisOffset) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainAxes) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainAxisLocations) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.460 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeAxes) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.461 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeAxisLocations) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.461 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.datasets) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.461 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.renderers) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.461 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.datasetToDomainAxesMap) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.462 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.datasetToRangeAxesMap) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.462 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.quadrantOrigin) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.462 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.quadrantPaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.462 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainGridlinesVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.463 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainGridlineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.463 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainGridlinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.463 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeGridlinesVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.464 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeGridlineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.464 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeGridlinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.464 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainMinorGridlinesVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.464 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainMinorGridlineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.465 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainMinorGridlinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.465 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeMinorGridlinesVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.465 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeMinorGridlineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.465 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeMinorGridlinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.465 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainZeroBaselineVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainZeroBaselineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainZeroBaselinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeZeroBaselineVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeZeroBaselineStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeZeroBaselinePaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainCrosshairVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainCrosshairValue) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.466 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainCrosshairStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainCrosshairPaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainCrosshairLockedOnData) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeCrosshairVisible) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeCrosshairValue) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeCrosshairStroke) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeCrosshairPaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeCrosshairLockedOnData) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.foregroundDomainMarkers) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.467 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.backgroundDomainMarkers) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.foregroundRangeMarkers) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.backgroundRangeMarkers) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.annotations) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainTickBandPaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangeTickBandPaint) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.fixedDomainAxisSpace) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.fixedRangeAxisSpace) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.datasetRenderingOrder) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.seriesRenderingOrder) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.weight) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.fixedLegendItems) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.domainPannable) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.468 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers.size() > this.rangePannable) {
            result = (XYItemRenderer) this.renderers.get(index);
        }
02:53:48.471 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:53:51.118 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:53:51.122 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:53:53.403 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:53:53.415 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:53:55.632 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:53:55.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:53:57.839 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:53:57.842 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:54:00.054 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:54:00.057 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:54:02.327 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:54:02.330 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:54:04.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:54:04.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:54:39.119 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:54:39.121 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:54:41.746 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:54:41.746 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:55:15.934 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
02:55:15.939 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:55:18.531 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:55:18.531 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:55:52.793 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
02:55:52.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:55:55.260 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:55:55.261 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:56:30.011 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
02:56:30.018 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:56:32.565 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:56:32.565 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:57:07.124 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
02:57:07.127 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:57:09.585 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:57:09.586 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:57:43.554 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
02:57:43.561 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:57:45.983 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:57:45.983 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
02:58:20.332 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 23 Chart_4
02:58:20.339 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:22.568 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:22.584 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:24.757 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:24.761 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:27.032 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:27.035 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:29.337 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:29.344 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:31.607 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:31.609 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:33.871 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:33.874 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:36.122 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:36.125 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:38.322 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:38.325 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:40.617 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:40.619 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:42.829 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:42.832 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:45.133 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:45.136 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:47.427 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:47.429 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:49.633 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:49.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:51.824 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:51.827 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:54.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:54.043 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:56.297 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:56.300 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:58:58.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:58:58.544 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:00.687 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:00.690 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:02.930 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:02.932 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:05.191 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:05.194 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:07.440 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:07.443 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:09.753 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:09.756 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:11.984 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:11.988 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:14.252 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:14.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:16.513 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:16.516 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:18.736 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:18.739 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:20.924 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:20.927 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:23.096 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:23.099 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:25.433 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:25.436 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:27.669 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
02:59:27.671 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
02:59:30.181 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
02:59:30.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:00:03.648 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:00:03.651 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:00:06.038 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:00:06.039 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:00:39.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:00:39.508 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:00:42.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:00:42.065 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:01:15.580 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:01:15.583 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:01:18.064 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:01:18.064 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:01:51.670 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:01:51.677 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:01:54.195 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:01:54.195 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:02:28.044 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:02:28.047 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:30.325 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:30.328 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:32.429 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:32.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:34.744 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:34.749 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:36.980 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:36.982 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:39.224 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:39.228 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:41.352 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:41.355 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:43.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:43.611 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:45.854 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:45.856 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:48.084 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:48.086 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:50.366 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:50.368 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:52.605 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:02:52.608 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:02:55.182 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:02:55.184 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:03:28.705 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:03:28.708 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:30.965 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:30.968 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:33.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:33.351 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:35.625 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:35.628 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:37.929 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:37.931 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:40.155 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:40.158 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:42.348 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:42.351 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:44.538 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:44.541 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:46.817 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:46.821 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:49.033 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:49.036 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:51.334 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:51.337 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:53.499 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:53.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:55.825 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:55.829 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:03:58.058 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:03:58.061 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:00.321 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:00.324 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:02.565 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:02.567 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:04.889 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:04.892 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:07.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:07.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:09.342 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:09.345 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:11.668 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:11.679 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:13.833 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:13.836 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:16.025 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:16.029 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:18.328 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:18.330 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:20.571 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:20.574 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:22.860 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:22.863 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:25.078 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:25.081 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:27.279 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:27.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:29.452 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:29.455 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:31.655 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:31.658 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:33.818 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:33.821 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:36.165 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:36.168 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:38.335 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:38.341 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:40.558 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:04:40.560 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:04:43.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:04:43.151 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:05:17.201 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:05:17.204 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:05:19.343 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:05:19.346 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:05:21.692 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:05:21.695 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:05:23.927 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:05:23.929 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:05:26.233 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:05:26.236 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:05:28.717 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:05:28.718 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:06:02.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:06:02.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:05.068 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:05.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:07.291 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:07.298 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:09.532 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:09.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:11.800 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:11.802 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:13.946 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:13.956 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:16.068 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:16.071 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:18.237 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:18.240 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:20.492 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:20.495 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:22.633 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:22.636 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:24.838 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:24.841 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:27.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:27.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:29.362 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:29.364 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:31.576 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:31.579 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:33.825 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:06:33.832 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:06:36.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:06:36.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:07:10.241 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 35 Chart_4
03:07:10.244 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:07:12.532 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:07:12.535 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:07:14.739 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:07:14.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:07:16.958 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:07:16.961 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers != null) {
	

}

03:07:16.962 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers == null) {
    throw new IllegalArgumentException("Null 'this.renderers' argument.");
}

03:07:16.963 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (this.renderers == null) {
    return null;
}

03:07:16.966 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:07:19.459 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:07:19.460 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:07:53.484 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:07:53.496 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:07:55.954 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:07:55.956 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:08:29.865 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:08:29.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:08:32.347 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:08:32.347 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:09:06.696 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:09:06.700 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: result = (XYItemRenderer) this.renderers.get(index);
03:09:06.700 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
03:09:06.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:09:09.235 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:09:09.236 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:09:43.382 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 22 Chart_4
03:09:43.385 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:09:45.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:09:45.869 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:10:19.659 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 37 Chart_4
03:10:19.662 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:19.664 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:21.971 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:21.973 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:21.976 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:24.256 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:24.258 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:26.432 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:26.435 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:26.438 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:28.566 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:28.569 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:28.571 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:30.848 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:30.850 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:33.085 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:33.097 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:33.101 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:35.302 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:35.305 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:35.307 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:37.637 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:37.640 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:39.882 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:39.884 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:39.887 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:42.157 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:42.160 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:42.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:44.400 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:44.408 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:46.654 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:46.656 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:46.660 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:48.955 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:48.958 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:48.960 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:51.304 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:51.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:53.420 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:53.423 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:53.426 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:55.649 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:55.654 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:10:55.656 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:10:57.779 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:10:57.788 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:00.055 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:00.058 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:00.062 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:02.367 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:02.370 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===1589
03:11:02.500 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
XYItemRenderer result = null;
03:11:02.503 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:02.505 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:04.811 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:04.814 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: final XYItemRenderer result = null;
03:11:04.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:06.945 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:06.948 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:06.951 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:09.220 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:09.223 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:09.225 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:11.567 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:11.570 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:13.729 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:13.732 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:13.735 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:16.089 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:16.092 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:16.094 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:18.278 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:18.281 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:20.525 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:20.528 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:20.530 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:22.839 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:22.843 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:22.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:25.081 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:25.084 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:27.313 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:27.316 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:27.318 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:29.555 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:29.558 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:29.561 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:31.954 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:31.957 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:34.246 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:34.253 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:11:34.255 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:36.383 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:36.386 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - org.jfree.chart.plot.XYPlot ===4493
03:11:36.504 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Suspicious Code: 
Collection c = r.getAnnotations();
03:11:36.506 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = c.getAnnotations();
03:11:36.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = d.getAnnotations();
03:11:36.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = iterator.getAnnotations();
03:11:36.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = rangeIndex.getAnnotations();
03:11:36.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = domainIndex.getAnnotations();
03:11:36.507 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = isDomainAxis.getAnnotations();
03:11:36.508 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = includedAnnotations.getAnnotations();
03:11:36.508 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = mappedDatasets.getAnnotations();
03:11:36.509 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = result.getAnnotations();
03:11:36.509 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = axis.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = serialVersionUID.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = localizationResources.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.orientation.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.axisOffset.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainAxes.getAnnotations();
03:11:36.510 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainAxisLocations.getAnnotations();
03:11:36.511 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeAxes.getAnnotations();
03:11:36.511 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeAxisLocations.getAnnotations();
03:11:36.511 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.datasets.getAnnotations();
03:11:36.512 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.renderers.getAnnotations();
03:11:36.512 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.datasetToDomainAxesMap.getAnnotations();
03:11:36.513 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.datasetToRangeAxesMap.getAnnotations();
03:11:36.513 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.quadrantOrigin.getAnnotations();
03:11:36.513 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.quadrantPaint.getAnnotations();
03:11:36.514 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainGridlinesVisible.getAnnotations();
03:11:36.514 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainGridlineStroke.getAnnotations();
03:11:36.514 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainGridlinePaint.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeGridlinesVisible.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeGridlineStroke.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeGridlinePaint.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainMinorGridlinesVisible.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainMinorGridlineStroke.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainMinorGridlinePaint.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeMinorGridlinesVisible.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeMinorGridlineStroke.getAnnotations();
03:11:36.515 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeMinorGridlinePaint.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainZeroBaselineVisible.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainZeroBaselineStroke.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainZeroBaselinePaint.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeZeroBaselineVisible.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeZeroBaselineStroke.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeZeroBaselinePaint.getAnnotations();
03:11:36.516 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainCrosshairVisible.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainCrosshairValue.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainCrosshairStroke.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainCrosshairPaint.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainCrosshairLockedOnData.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeCrosshairVisible.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeCrosshairValue.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeCrosshairStroke.getAnnotations();
03:11:36.517 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeCrosshairPaint.getAnnotations();
03:11:36.518 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeCrosshairLockedOnData.getAnnotations();
03:11:36.518 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.foregroundDomainMarkers.getAnnotations();
03:11:36.518 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.backgroundDomainMarkers.getAnnotations();
03:11:36.519 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.foregroundRangeMarkers.getAnnotations();
03:11:36.519 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.backgroundRangeMarkers.getAnnotations();
03:11:36.519 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.annotations.getAnnotations();
03:11:36.519 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainTickBandPaint.getAnnotations();
03:11:36.519 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangeTickBandPaint.getAnnotations();
03:11:36.520 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.fixedDomainAxisSpace.getAnnotations();
03:11:36.520 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.fixedRangeAxisSpace.getAnnotations();
03:11:36.520 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.datasetRenderingOrder.getAnnotations();
03:11:36.521 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.seriesRenderingOrder.getAnnotations();
03:11:36.522 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.weight.getAnnotations();
03:11:36.523 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.fixedLegendItems.getAnnotations();
03:11:36.523 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.domainPannable.getAnnotations();
03:11:36.523 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: Collection c = this.rangePannable.getAnnotations();
03:11:36.526 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:38.673 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:38.676 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:40.934 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:40.937 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:43.248 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:43.250 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:45.516 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:45.518 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:47.822 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:47.826 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:49.992 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:49.995 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:52.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:52.311 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:54.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:54.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:56.737 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:56.740 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:11:58.846 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:11:58.859 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:01.051 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:01.054 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:03.280 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:03.282 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:05.463 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:05.466 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:07.631 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:07.635 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:09.854 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:09.857 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:11.980 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:11.983 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:14.190 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:14.193 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:16.464 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:16.467 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:18.572 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:18.575 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:20.829 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:20.838 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:23.031 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:23.034 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:25.309 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:25.312 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:27.546 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:27.549 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:29.738 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:29.741 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:31.978 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:31.985 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:34.129 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:34.136 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:36.357 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:36.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:38.500 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:38.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:40.677 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:40.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:42.748 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:42.752 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:44.979 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:44.986 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:47.185 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:47.189 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:49.428 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:49.431 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:51.644 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:51.647 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:53.813 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:53.816 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:56.032 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:56.040 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:12:58.212 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:12:58.214 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:00.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:00.444 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:02.673 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:02.680 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:04.900 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:04.903 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:07.087 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:07.090 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:09.283 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:09.286 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:11.537 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:11.540 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:13.897 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:13.900 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:16.162 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:16.165 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:18.441 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:18.443 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:20.701 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:20.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:22.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:22.912 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:25.170 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:25.184 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:27.358 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:27.361 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:29.648 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:29.651 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:31.910 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:31.915 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:34.194 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:34.197 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:36.503 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:36.506 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:38.730 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:38.733 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:41.078 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:41.081 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:43.317 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:43.320 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:45.502 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:45.504 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:47.774 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:47.777 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:50.059 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:50.062 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:52.305 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:52.308 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:54.574 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:54.583 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:56.703 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:56.707 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:13:59.003 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:13:59.007 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:14:01.236 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:14:01.239 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:14:03.480 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:14:03.483 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:14:05.716 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Chart_4 ---Fixer: fix fail because of failed compiling! 
03:14:05.719 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (r != null) {
	

}

03:14:05.722 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (r == null) {
    throw new IllegalArgumentException("Null 'r' argument.");
}

03:14:05.724 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: if (r == null) {
    return null;
}

03:14:05.728 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:14:08.228 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:14:08.229 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:14:43.138 [main] INFO edu.lu.uni.serval.avatar.AbstractFixer - Succeeded to fix the bug Chart_4====================
03:14:43.172 [main] DEBUG edu.lu.uni.serval.fixpattern.FixTemplate - Patch Candiate: 
null
03:14:43.175 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Compiling
03:14:45.714 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Finish of compiling.
03:14:45.714 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Test previously failed test cases.
03:15:20.681 [main] DEBUG edu.lu.uni.serval.avatar.AbstractFixer - Failed Tests after fixing: 0 Chart_4
03:15:20.683 [main] INFO edu.lu.uni.serval.avatar.Avatar - =======StaticBugFixer: Finish off fixing======
Succeeded to fix bug Chart_4

real	303m58.565s
user	270m3.931s
sys	89m26.263s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_11  Chart_4
apiarty> mkdir Math_4
apiarty> cd Math_4/
apiarty> defects4j checkout -p Math -v 4b -w .
Checking out 277e6172 to /avatar/AVATAR/D4J/Defects4JData/Math_4........... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 277e6172:d609e65f..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-4b......................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting
  - org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel
apiarty> ls
LICENSE.txt	   all_tests		       doap_math.rdf		    license-header.txt	siteMods
NOTICE.txt	   build.xml		       doc			    math-RC.sh		src
PROPOSAL.html	   checkstyle.xml	       failing_tests		    math-pre-RC.sh	target
RELEASE-NOTES.txt  defects4j.build.properties  findbugs-exclude-filter.xml  pom.xml		test-jar.xml
apiarty> cd ..
apiarty> ls
Chart_11  Chart_4  Math_4
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_4 > /avatar/data/Math_4.txt
bash: /avatar/data/Math_4.txt: No such file or directory

real	0m0.005s
user	0m0.001s
sys	0m0.003s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_4 > /avatar/data/Math_4.txt
bash: /avatar/data/Math_4.txt: No such file or directory

real	0m0.005s
user	0m0.001s
sys	0m0.002s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_4 > /avatar/data/Math_4.txt
bash: /avatar/data/Math_4.txt: No such file or directory

real	0m0.005s
user	0m0.000s
sys	0m0.002s
apiarty> time ./FLFix.sh Math_4 > /avatar/data/Math_4.txt^C
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd /avatar/data
bash: cd: /avatar/data: No such file or directory
apiarty> cd /avatar/data/
bash: cd: /avatar/data/: No such file or directory
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_4 > /apiarty/data/Math_4.txt
^C
real	276m24.597s
user	265m10.706s
sys	19m5.043s
apiarty> ls
BugPositions.txt  FailedTestCases  OUTPUT		    compile.sh	logs	 target
D4J		  LineFix.sh	   README.md		    figure	pom.xml
FLFix.sh	  MethodFix.sh	   SuspiciousCodePositions  lib		src
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_11  Chart_4  Math_4
apiarty> cd Math_4/
apiarty> ls
LICENSE.txt	   build.xml		       failing_tests		    pom.xml
NOTICE.txt	   checkstyle.xml	       findbugs-exclude-filter.xml  siteMods
PROPOSAL.html	   defects4j.build.properties  license-header.txt	    src
RELEASE-NOTES.txt  doap_math.rdf	       math-RC.sh		    target
all_tests	   doc			       math-pre-RC.sh		    test-jar.xml
apiarty> cd ../..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FailedTestCases  OUTPUT		    compile.sh	logs	 target
D4J		  LineFix.sh	   README.md		    figure	pom.xml
FLFix.sh	  MethodFix.sh	   SuspiciousCodePositions  lib		src
apiarty> time ./FLFix.sh Math_4 > /apiarty/data/Math_4.txt
^C
real	342m52.930s
user	547m7.536s
sys	45m25.239s
apiarty> ls
BugPositions.txt  FailedTestCases  OUTPUT		    compile.sh	logs	 target
D4J		  LineFix.sh	   README.md		    figure	pom.xml
FLFix.sh	  MethodFix.sh	   SuspiciousCodePositions  lib		src
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_11  Chart_4  Math_4
apiarty> cd ../..
apiarty> ls
BugPositions.txt  FailedTestCases  OUTPUT		    compile.sh	logs	 target
D4J		  LineFix.sh	   README.md		    figure	pom.xml
FLFix.sh	  MethodFix.sh	   SuspiciousCodePositions  lib		src
apiarty> cd ..
apiarty> ls
AVATAR
apiarty> cd ..
apiarty> ls
apiarty  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
avatar	 boot  etc  lib   media  opt  root  sbin  sys  usr
apiarty> mkdir /simfix
apiarty> ls
apiarty  bin   dev  home  lib64  mnt  proc  run   simfix  sys  usr
avatar	 boot  etc  lib   media  opt  root  sbin  srv	  tmp  var
apiarty> cd simfix/
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 464.00 KiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  aws		    d4j_integration  docker   killmap  sbfl.sh	 stats
analysis   cluster_scripts  data.zip	     gzoltar  lib      setup.sh  utils
apiarty> unzip data.zip 
Archive:  data.zip
   creating: data/
  inflating: data/.DS_Store          
   creating: __MACOSX/
   creating: __MACOSX/data/
  inflating: __MACOSX/data/._.DS_Store  
  inflating: data/blacklist.csv      
   creating: data/data_massaging/
  inflating: data/data_massaging/amend-scores  
  inflating: data/data_massaging/clean_up_scores.pl  
  inflating: data/data_massaging/get_all_real.pl  
  inflating: data/data_massaging/README.md  
  inflating: data/data_massaging/split_scores_by_category.sh  
  inflating: data/num_tests.csv      
  inflating: data/num_tests.sh       
  inflating: data/README.md          
  inflating: data/sbfl_runtimes.csv  
  inflating: data/scores_artificial_vs_real.csv  
  inflating: data/scores_for_muse_with_each_killdefn.csv  
  inflating: data/scores_real_exploration.csv  
apiarty> ls
README.md  analysis  cluster_scripts  data	docker	 killmap  sbfl.sh   stats
__MACOSX   aws	     d4j_integration  data.zip	gzoltar  lib	  setup.sh  utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd d4j-info/
apiarty> ls
all_tests  failed_tests  failed_tests_ori  location  project.json  src_path
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	docker	 killmap  sbfl.sh   stats
__MACOSX   aws	     d4j_integration  data.zip	gzoltar  lib	  setup.sh  utils
apiarty> vi sbfl
apiarty> vi sbfl.sh
apiarty> vi setup.sh 
apiarty> ./setup.sh 
Adding environment variables to bashrc...
Cloning into '/simfix/SimFix/sbfl/defects4j'...
remote: Enumerating objects: 21455, done.
remote: Total 21455 (delta 0), reused 0 (delta 0), pack-reused 21455
Receiving objects: 100% (21455/21455), 45.72 MiB | 579.00 KiB/s, done.
Resolving deltas: 100% (12274/12274), done.
Checking connectivity... done.
Checking out files: 100% (31854/31854), done.
Setting up project repositories ... 
--2020-11-22 17:25:15--  http://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip
Resolving people.cs.umass.edu (people.cs.umass.edu)... 128.119.240.99
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip [following]
--2020-11-22 17:25:22--  https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 258114433 (246M) [application/zip]
Saving to: ‘defects4j-repos.zip’

defects4j-repos.zip        100%[========================================>] 246.16M   527KB/s    in 9m 53s  

2020-11-22 17:35:16 (425 KB/s) - ‘defects4j-repos.zip’ saved [258114433/258114433]


Setting up Major ... 
2020-11-22 17:35:37 URL:http://mutation-testing.org/downloads/major-1.2.1_jre7.zip [4460581/4460581] -> "major-1.2.1_jre7.zip" [1]

Setting up EvoSuite ... 
2020-11-22 17:36:20 URL:https://people.cs.umass.edu/~rjust/defects4j/download/evosuite-0.2.0.jar [21106240/21106240] -> "evosuite-0.2.0.jar" [1]
2020-11-22 17:36:52 URL:https://people.cs.umass.edu/~rjust/defects4j/download/evosuite-standalone-runtime-0.2.0.jar [14485930/14485930] -> "evosuite-standalone-runtime-0.2.0.jar" [1]

Setting up Randoop ... 
2020-11-22 17:37:04 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/34923107/94734640-5ed3-11e8-8c05-524217883202?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20201122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20201122T173653Z&X-Amz-Expires=300&X-Amz-Signature=26b7315a0294bdf6b04a6f38897fd35b074e3006ff4ec861d555a10caa89046c&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=34923107&response-content-disposition=attachment%3B%20filename%3Drandoop-all-4.0.4.jar&response-content-type=application%2Foctet-stream [4144250/4144250] -> "randoop-all-4.0.4.jar" [1]
2020-11-22 17:37:09 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/34923107/94890c00-5ed3-11e8-9164-ddb8c631d205?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20201122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20201122T173704Z&X-Amz-Expires=300&X-Amz-Signature=7506c7d031288ac35d1adfaf58de0351b4c81e56bd219d09cf6a1558af01f94c&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=34923107&response-content-disposition=attachment%3B%20filename%3Dreplacecall-4.0.4.jar&response-content-type=application%2Foctet-stream [1969527/1969527] -> "replacecall-4.0.4.jar" [1]

Setting up Gradle dependencies ... 
--2020-11-22 17:37:09--  http://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-dists.zip
Resolving people.cs.umass.edu (people.cs.umass.edu)... 128.119.240.99
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-dists.zip [following]
--2020-11-22 17:37:09--  https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-dists.zip
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 100684048 (96M) [application/zip]
Saving to: ‘defects4j-gradle-dists.zip’

defects4j-gradle-dists.zip 100%[========================================>]  96.02M   474KB/s    in 3m 15s  

2020-11-22 17:40:25 (503 KB/s) - ‘defects4j-gradle-dists.zip’ saved [100684048/100684048]

--2020-11-22 17:40:25--  http://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-deps.zip
Resolving people.cs.umass.edu (people.cs.umass.edu)... 128.119.240.99
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-deps.zip [following]
--2020-11-22 17:40:25--  https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-gradle-deps.zip
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 45094176 (43M) [application/zip]
Saving to: ‘defects4j-gradle-deps.zip’

defects4j-gradle-deps.zip  100%[========================================>]  43.00M   645KB/s    in 1m 40s  

2020-11-22 17:42:06 (438 KB/s) - ‘defects4j-gradle-deps.zip’ saved [45094176/45094176]


Setting up utility programs ... 
2020-11-22 17:42:27 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/159746986/74c20700-f41a-11e8-82ee-49a7119923c6?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20201122%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20201122T174210Z&X-Amz-Expires=300&X-Amz-Signature=3d3c9df5368d969711df7edb205c807cb13c3e174c69ab1b24bbdc41cf6b8d21&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=159746986&response-content-disposition=attachment%3B%20filename%3Dbuild-analyzer-0.0.1.jar&response-content-type=application%2Foctet-stream [4689930/4689930] -> "analyzer.jar" [1]

Defects4J successfully initialized.
2020-11-22 17:43:13 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/simfix/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /simfix/SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /simfix/SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /simfix/SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /simfix/SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 3 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd defects4j/
apiarty> ls
README.md  cpanfile  framework	init.sh  license.txt  major  project_repos
apiarty> cpanm --installdeps .
--> Working on .
Configuring /simfix/SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init.sh
Setting up project repositories ... 
--2020-11-23 09:02:19--  http://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip
Resolving people.cs.umass.edu (people.cs.umass.edu)... 128.119.240.99
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip [following]
--2020-11-23 09:02:21--  https://people.cs.umass.edu/~rjust/defects4j/download/defects4j-repos.zip
Connecting to people.cs.umass.edu (people.cs.umass.edu)|128.119.240.99|:443... connected.
HTTP request sent, awaiting response... 304 Not Modified
File ‘defects4j-repos.zip’ not modified on server. Omitting download.


Setting up Major ... 
^C
apiarty> ls
README.md  cpanfile  framework	init.sh  license.txt  major  major-1.2.1_jre7.zip  project_repos
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> rm -r defects4j/
apiarty> ls
README.md  analysis  cluster_scripts  data	docker	 killmap  sbfl.sh   stats
__MACOSX   aws	     d4j_integration  data.zip	gzoltar  lib	  setup.sh  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 20, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 22414 (delta 6), reused 6 (delta 3), pack-reused 22394
Receiving objects: 100% (22414/22414), 140.38 MiB | 597.00 KiB/s, done.
Resolving deltas: 100% (14409/14409), done.
Checking connectivity... done.
Checking out files: 100% (10653/10653), done.
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd defects4j/
apiarty> cpanm --installdeps .
--> Working on .
Configuring /simfix/SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0   375k      0  0:19:02  0:19:02 --:--:-- 40320

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
retrying curl https://defects4j.org/downloads/defects4j-gradle-dists.zip
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 96.0M  100 96.0M    0     0   201k      0  0:08:07  0:08:07 --:--:--  584k
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> vi ~/.bashrc
apiarty> source  ~/.bashrc
Welcome to APIARTy.

apiarty> defects4j
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cd /simfix/SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> mkdir projects
apiarty> cd projects/
apiarty> ls
apiarty> mkdir chart
apiarty> ls
chart
apiarty> cd chart/
apiarty> mkdir chart_1_buggy
apiarty> ls
chart_1_buggy
apiarty> cd chart_1_buggy/
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_1_buggy
apiarty> ls
apiarty> cd ../..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> defects4j checkout -p Chart -v 1b -w /simfix/SimFix/sbfl/projects/chart/chart_1_buggy
Checking out 2266 to /simfix/SimFix/sbfl/projects/chart/chart_1_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2266:2264............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-1b........................................ OK
apiarty> cd /simfix/SimFix/sbfl/projects/chart/chart_1_buggy
apiarty> ls
ChangeLog   ant				docfiles      licence-LGPL.txt		    swt
NEWS	    checkstyle			experimental  maven-jfreechart-project.xml  tests
README.txt  defects4j.build.properties	lib	      source
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
apiarty> ls
ChangeLog   all_tests  build-tests		   docfiles	  lib				source
NEWS	    ant        checkstyle		   experimental   licence-LGPL.txt		swt
README.txt  build      defects4j.build.properties  failing_tests  maven-jfreechart-project.xml	tests
apiarty> cd ..
apiarty> ls
chart_1_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> ./sbfl.sh Chart 1 /simfix/SimFix/sbfl/projects/chart/chart_1_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=1
/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_1	start : 20/11/23 10:16

TIMEOUT : 18000000
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer,1793
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(this.plot!=null){
return result;
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(plot==null){
return result;
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.plot=plot;
if(this.plot==null){
return result;
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.plot=plot;
if(plot==null){
return result;
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(this.plot==AreaRendererEndType.LEVEL){
return result;
}

========
========
if(this.plot==PlotOrientation.HORIZONTAL){
return result;
}

========
org.jfree.chart.plot.CategoryPlot,1613
org.jfree.chart.plot.CategoryPlot,1614
Find no block!
org.jfree.chart.plot.CategoryPlot,1665
========
this.renderers.set(index,renderer);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.annotations.remove(index);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.annotations.remove(index);
fireChangeEvent();
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(JANUARY!=null){
existing.removeChangeListener(this);
}

========
========
if((Font)this.renderers.get(index)==null){
result=this.DEFAULT_VALUE_LABEL_FONT;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(crosshairDatasetIndex==0){
return this.rangeGridlinePaint;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(annotations.isEmpty()){
return null;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing==null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(crosshairDatasetIndex<0){
throw new UnknownKeyException("Column key ("+domainCrosshairRowKey);
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((XYDataset)this.renderers.get(index)==null){
continue;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((CategoryDataset)this.renderers.get(index)==null){
continue;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if((Comparable)this.foregroundRangeMarkers.get(domainCrosshairRowKey)!=null){
domainCrosshairRowKey=group;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XIntervalSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
(XYSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.annotations.remove(index);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
this.annotations.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.annotations.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(XYIntervalSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(YIntervalSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(index>=annotations.size()){
break;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(SimpleHistogramBin)this.annotations.get(index).setSelected(rangeZeroBaselineVisible);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(notify){
fireSelectionEvent();
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
markers=new java.util.ArrayList();
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing==null){
markers=new java.util.ArrayList();
existing.removeChangeListener(this);
}

========
========
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'category\' argument.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if((Font)this.foregroundRangeMarkers.get(domainCrosshairRowKey)==null){
result=getTickLabelFont();
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((Paint)this.foregroundRangeMarkers.get(domainCrosshairRowKey)==null){
result=getTickLabelPaint();
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing==null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
labelList=new java.util.ArrayList();
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.annotations.remove(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(this.rangeZeroBaselineVisible){
return (SimpleHistogramBin)this.annotations.get(index).getItemCount()/(bin.getUpperBound()-bin.getLowerBound());
}else {
return bin.getItemCount();
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((anchorValue-s.width)/2.0,0.0,s.width,s.height));
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(r!=null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(r==null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=-1){
existing.removeChangeListener(this);
}

========
========
fireSeriesChanged();
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
this.renderers.set(0,renderer);
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=ORIENTATION_VERTICAL){
existing.removeChangeListener(this);
}

========
========
updateBoundsForRemovedItem((XYDataItem)this.annotations.remove(index));
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(renderer!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(renderer!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(renderer!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(renderer!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(renderer!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(existing!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(existing!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(existing!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(existing!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(renderer!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(renderer!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(renderer!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(renderer!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(renderer!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(renderer!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(existing!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(existing!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(existing!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(existing!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(renderer!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
this.renderers.set(0,existing);
if(renderer!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(renderer!=null){
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(renderer!=null){
existing.addChangeListener(this);
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.renderers.set(0,existing);
if(existing!=null){
existing.addChangeListener(this);
renderer.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.index=index;
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
anchorValue=direction%360;
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
if(anchorValue<0.0){
direction=direction+360.0;
}
CategoryItemRenderer existing=(CategoryItemRenderer)this.renderers.get(index);
if(existing!=null){
existing.removeChangeListener(this);
}

========
org.jfree.chart.plot.CategoryPlot,1667
========
if(existing==null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(existing!=null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(existing==null){
existing.removeChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireDatasetChanged(new DatasetChangeInfo());
if(existing!=null){
existing.removeChangeListener(this);
}

========
========
fireDatasetChanged(new DatasetChangeInfo());
if(existing==null){
existing.removeChangeListener(this);
}

========
org.jfree.chart.plot.CategoryPlot,1672
========
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
notifyListeners(new TitleChangeEvent(this));
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer!=null){
renderer.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(renderer!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
renderer.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,(XYItemRenderer)(PublicCloneable)(XYItemRenderer)this.renderers.get(index).clone());
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(notify){
fireChangeEvent();
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
notifyListeners(new TitleChangeEvent(this));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.annotations.remove(index);
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,DEFAULT_VALUE_LABEL_FONT);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(notify){
fireChangeEvent();
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,DEFAULT_VALUE_LABEL_FONT);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(index<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChartChanged();
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
renderer.setBaseToolTipGenerator(new IntervalCategoryToolTipGenerator("{3} - {4}",DateFormat.getDateInstance()));
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.anchorValue=0.8;
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
repaint();
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChangeEvent();
if(existing==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChartChanged();
if(existing==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.setStroke(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.setPaint(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.setShape(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.axisOffset=0.0;
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.annotations.remove(crosshairDatasetIndex);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireDatasetChanged(new DatasetChangeInfo());
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.annotations.remove(crosshairDatasetIndex);
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireDatasetChanged(new DatasetChangeInfo());
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.annotations.remove(crosshairDatasetIndex);
fireDatasetChanged(new DatasetChangeInfo());
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.annotations.remove(crosshairDatasetIndex);
fireDatasetChanged(new DatasetChangeInfo());
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.domainGridlinesVisible=false;
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.rangePannable=false;
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.domainGridlinesVisible=false;
this.rangePannable=false;
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireDatasetChanged(new DatasetChangeInfo());
if(existing==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new UnknownKeyException("Row key ("+domainCrosshairRowKey);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new UnknownKeyException("The key ("+domainCrosshairRowKey);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.setSeriesPaint(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
case 8 :

if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new UnknownKeyException("The key ("+domainCrosshairRowKey.toString());
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if((crosshairDatasetIndex<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
case 1 :

if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.crosshairDatasetIndex=index;
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireSeriesChanged();
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'rowKey\' argument.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
case 3 :

if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0||index>3){
throw new IllegalArgumentException("The index value ("+index);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new UnknownKeyException("Column key ("+domainCrosshairRowKey);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.annotations.remove(domainCrosshairRowKey);
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireDatasetChanged(new PieDatasetChangeInfo(PieDatasetChangeType.ADD,index,index));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(index<0){
throw new IllegalArgumentException("Negative \'index\'.");
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(index>=getDatasetCount()){
return ;
}
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(index>=getDatasetCount()){
return ;
}
if(existing==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
rangeCrosshairLockedOnData=true;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(getDomainAxisForDataset(index)==null||getRangeAxisForDataset(index)==null){
return rangeCrosshairLockedOnData;
}
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
rangeCrosshairLockedOnData=true;
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(r!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(r==null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToDomainAxesMap.put(new Integer(index),new ArrayList(annotations));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToDomainAxesMap.put(new Integer(index),new ArrayList(annotations));
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToDomainAxesMap.put(new Integer(index),new ArrayList(annotations));
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToDomainAxesMap.put(new Integer(index),new ArrayList(annotations));
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToRangeAxesMap.put(new Integer(index),new ArrayList(annotations));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToRangeAxesMap.put(new Integer(index),new ArrayList(annotations));
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToRangeAxesMap.put(new Integer(index),new ArrayList(annotations));
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.datasetToRangeAxesMap.put(new Integer(index),new ArrayList(annotations));
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
if(existing!=null){
existing.removeChangeListener(this);
}
if(index<0){
throw new IllegalArgumentException("Requires \'index\' >= 0.");
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(existing!=null){
existing.removeChangeListener(this);
}
if(!Double.isNaN(existing.getYValue())){
rangeZeroBaselineVisible=oldY<=this.anchorValue||oldY>=this.anchorValue;
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
default :

if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
case 5 :

if(existing!=null){
existing.removeChangeListener(this);
}
this.renderers.set(index,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
org.jfree.chart.plot.CategoryPlot,1673
org.jfree.chart.plot.CategoryPlot,1674
org.jfree.chart.plot.CategoryPlot,1675
org.jfree.chart.plot.CategoryPlot,1678
========
if(notify){
fireChangeEvent();
}
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureRangeAxes();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
renderer.setBaseItemLabelFont(this.DEFAULT_VALUE_LABEL_FONT);
renderer.setBaseItemLabelPaint(this.rangeGridlinePaint);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.annotations=new java.util.ArrayList();
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
setSelectionState(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
notifyListeners(new TitleChangeEvent(this));
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
if(index<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
configureDomainAxes();
configureRangeAxes();

========
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
renderer.setBaseToolTipGenerator(new IntervalCategoryToolTipGenerator("{3} - {4}",DateFormat.getDateInstance()));
configureDomainAxes();
configureRangeAxes();

========
========
fireDatasetChanged(new DatasetChangeInfo());
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.anchorValue=0.8;
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(getDomainAxis()!=null){
axis.configure();
}
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
if(getRangeAxis()!=null){
axis.configure();
}
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
this.axisOffset=0.0;
configureRangeAxes();

========
========
this.domainGridlinesVisible=false;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.rangePannable=false;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.domainGridlinesVisible=false;
this.rangePannable=false;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
org.jfree.chart.plot.CategoryPlot,1679
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureRangeAxes();
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.notify=notify;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
========
configureDomainAxes();
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.domainGridlinesVisible=true;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureDomainAxes();
configureRangeAxes();
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureDomainAxes();
this.domainGridlinesVisible=true;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureRangeAxes();
this.domainGridlinesVisible=true;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=true;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.notify=rangeCrosshairLockedOnData;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
========
if(getRangeAxis()!=null){
axis.configure();
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
========
if(getDomainAxis()!=null){
axis.configure();
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
========
this.anchorValue=anchorValue;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
fireChangeEvent();
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlinePaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.rangeGridlinePaint=rangeMinorGridlinePaint;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlinePaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.rangeGridlinePaint=rangeMinorGridlinePaint;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlineStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.rangeCrosshairStroke=rangeMinorGridlineStroke;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlineStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.rangeCrosshairStroke=rangeMinorGridlineStroke;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.crosshairDatasetIndex=crosshairDatasetIndex;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlinePaint==null){
throw new IllegalArgumentException("Null \'paint\' argument");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(rangeMinorGridlinePaint==null){
throw new IllegalArgumentException("Null \'paint\' argument");
}
this.rangeGridlinePaint=rangeMinorGridlinePaint;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(axisOffset==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.axisOffset=padding;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
========
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
this.domainCrosshairRowKey=domainCrosshairRowKey;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(domainCrosshairRowKey==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.domainCrosshairRowKey=domainCrosshairRowKey;
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
========
if(axisOffset==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
^Capiarty> time ava -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=1 > /apiarty/data/Chart_1_simfix.txt
bash: j: command not found
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=1 > /apiarty/data/Chart_1_simfix.txt

real	65m58.784s
user	81m48.878s
sys	24m3.228s
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd patch
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
1
apiarty> cd 1
apiarty> ls
0
apiarty> cd 0
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> vi 1_AbstractCategoryItemRenderer.java 
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> cd ../..
apiarty> ls
1
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart/
apiarty> ls
chart_1_buggy
apiarty> chart_25_buggy
bash: chart_25_buggy: command not found
apiarty> mkdir chart_25_buggy
apiarty> ls
chart_1_buggy  chart_25_buggy
apiarty> cd chart_25_buggy/
apiarty> ls
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_25_buggy
apiarty> cd ../..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
(reverse-i-search)`': git clone https://github.com/xg^Cmileboy/SimFix.git
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> defects4j checkout -p Chart -v 25b -w /simfix/SimFix/sbfl/projects/chart/chart_25_buggy
Checking out 164 to /simfix/SimFix/sbfl/projects/chart/chart_25_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> cd /simfix/SimFix/sbfl/projects/chart/chart_25_buggy
apiarty> ls
ChangeLog   checkstyle			licence-LGPL.txt	      tests
NEWS	    defects4j.build.properties	maven-jfreechart-project.xml
README.txt  experimental		source
ant	    lib				swt
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> ls
ChangeLog   build			failing_tests		      swt
NEWS	    build-tests			lib			      tests
README.txt  checkstyle			licence-LGPL.txt
all_tests   defects4j.build.properties	maven-jfreechart-project.xml
ant	    experimental		source
apiarty> cd ../../..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ./sbfl.sh Chart 25 /simfix/SimFix/sbfl/projects/chart/chart_25_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25 > /apiarty/data/Chart_25_simfix.txt
^C
real	165m38.953s
user	199m44.254s
sys	63m11.455s
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart/
apiarty> ls
chart_1_buggy  chart_25_buggy
apiarty> mkdir chart_11_buggy
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy
apiarty> cd chart_11_buggy/
apiarty> ls
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_11_buggy
apiarty> cd ../../..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> d^Cects4j test
apiarty> defects4j checkout -p Chart -v 11b -w /simfix/SimFix/sbfl/projects/chart/chart_11_buggy
Checking out 1025 to /simfix/SimFix/sbfl/projects/chart/chart_11_buggy..... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1025:1024............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-11b....................................... OK
apiarty> cd /simfix/SimFix/sbfl/projects/chart/chart_11_buggy
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
apiarty> ls
ChangeLog   build			failing_tests		      swt
NEWS	    build-tests			lib			      tests
README.txt  checkstyle			licence-LGPL.txt
all_tests   defects4j.build.properties	maven-jfreechart-project.xml
ant	    experimental		source
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ./sbfl.sh Chart 11 /simfix/SimFix/sbfl/projects/chart/chart_11_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls^C
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> timeout 7200s | time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
Try 'timeout --help' for more information.
bash: time: command not found
apiarty> timeout 7200s time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
timeout: failed to run command ‘time’: No such file or directory
apiarty> timeout 7200s (time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt)
bash: syntax error near unexpected token `('
apiarty> timeout 7200s java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
^Capiarty> timeout 7200s time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
timeout: failed to run command ‘s’: No such file or directory
apiarty> timeout 7200s time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
timeout: failed to run command ‘time’: No such file or directory
apiarty> timeout 7200s time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
timeout: failed to run command ‘time’: No such file or directory
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/data/Chart_11_simfix.txt
^C
real	166m19.973s
user	196m28.357s
sys	64m29.652s
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd patch
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
1
apiarty> cd 1
apiarty> ls
0
apiarty> cd 0
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> cd ../..
apiarty> ls
1
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd ..
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart/
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy
apiarty> vi chart_4_buggy
apiarty> mkdir chart_4_buggy
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_4_buggy
apiarty> cd chart_4_buggy/
apiarty> ls
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_4_buggy
apiarty> cd ../..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd /simfix/SimFix/sbfl/projects/chart/chart_4_buggy
apiarty> defects4j checkout^C
apiarty> defects4j checkout -p Chart -v 4b -w .
Checking out 2183 to /simfix/SimFix/sbfl/projects/chart/chart_4_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2183:2182............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-4b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins
  - org.jfree.chart.junit.JFreeChartTests::testSerialization4
  - org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo
  - org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset
  - org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepChartTests::testReplaceDataset
  - org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines
apiarty> ls
ChangeLog   build			experimental		      source
NEWS	    build-tests			failing_tests		      swt
README.txt  checkstyle			lib			      tests
all_tests   defects4j.build.properties	licence-LGPL.txt
ant	    docfiles			maven-jfreechart-project.xml
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ./sbfl.sh Chart 4 /simfix/SimFix/sbfl/projects/chart/chart_4_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=4 > /apiarty/data/Chart_4_simfix.txt
^C
real	119m5.613s
user	140m53.337s
sys	45m18.528s
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=4 > /apiarty/data/Chart_4_simfix.txtq^C
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> cd sbfl/projects/
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_4_buggy
apiarty> mkdir chart_26_buggy
apiarty> cd chart_26_buggy/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 26b -w .
Checking out 103 to /simfix/SimFix/sbfl/projects/chart/chart_26_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 103:102............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-26b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2
  - org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo
  - org.jfree.chart.plot.junit.CategoryPlotTests::test1654215
  - org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3
  - org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4
  - org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_26_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 26 /simfix/SimFix/sbfl/projects/chart/chart_26_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=26 > /apiarty/data/Chart_26_simfix.txt

real	301m42.744s
user	359m57.030s
sys	116m8.295s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd patch
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
1
apiarty> cd 1
apiarty> ls
0
apiarty> cd 0
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> cd ../..
apiarty> ls
1
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd project.xml 
bash: cd: project.xml: Not a directory
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd ..
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
chart
apiarty> mkdir lang
apiarty> ls
chart  lang
apiarty> cd lang
apiarty> cd ..
apiarty> ls
chart  lang
apiarty> rm -r lang
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_26_buggy  chart_4_buggy
apiarty> mkdir chart_14_buggy
apiarty> ls
chart_11_buggy	chart_14_buggy	chart_1_buggy  chart_25_buggy  chart_26_buggy  chart_4_buggy
apiarty> cd chart_14_buggy/
apiarty> defects4j checkout -p Chart -v 14b -w .
Checking out 811 to /simfix/SimFix/sbfl/projects/chart/chart_14_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 811:809............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-14b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
  - org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
  - org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
  - org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_14_buggy	chart_1_buggy  chart_25_buggy  chart_26_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 14 /simfix/SimFix/sbfl/projects/chart/chart_14_buggy
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
(reverse-i-search)`./': ^Csbfl.sh Chart 14 /simfix/SimFix/sbfl/projects/chart/chart_14_buggy
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=14 > /apiarty/data/Chart_14_simfix.txt

real	233m57.629s
user	286m48.883s
sys	86m16.772s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd patch
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
1  14
apiarty> cd 14
apiarty> ls
3
apiarty> cd 3
apiarty> ls
1_CategoryPlot.java
apiarty> vi 1_CategoryPlot.java 
apiarty> cd ..
apiarty> ls
3
apiarty> cd ../..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> 
  [Restored 30 Nov 2020 at 09:23:01]
Last login: Mon Nov 30 08:12:06 on console
marias-mbp-2:APIARTy marki$ docker build -t apiarty .
Sending build context to Docker daemon  14.02MB
Step 1/13 : FROM ubuntu:16.04
 ---> 77be327e4b63
Step 2/13 : ENV DEBIAN_FRONTEND noninteractive
 ---> Using cache
 ---> 03fea2fc7f1d
Step 3/13 : ENV LANG=C.UTF-8
 ---> Using cache
 ---> 3dcc4fe720a0
Step 4/13 : ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
 ---> Using cache
 ---> b0cd41f2148b
Step 5/13 : RUN apt-get update     && apt-get install -y openjdk-8-jdk ant unzip wget curl cpanminus git graphviz maven subversion python vim     && apt-get install -y python3-pip python3-dev     && cd /usr/local/bin     && ln -s /usr/bin/python3 python3     && pip3 install --upgrade pip
 ---> Using cache
 ---> 794df675baf1
Step 6/13 : RUN mkdir -p /apiarty/tools
 ---> Using cache
 ---> e9a111bc9a16
Step 7/13 : WORKDIR /apiarty
 ---> Using cache
 ---> a50d17b27891
Step 8/13 : ENV PATH=/apiarty/apiarty.bin:${PATH}
 ---> Using cache
 ---> 36f8b281f5df
Step 9/13 : RUN     rm /root/.bashrc     && ln -s /apiarty/apiarty.bin/bashrc /root/.bashrc
 ---> Using cache
 ---> 2aac95309e9f
Step 10/13 : WORKDIR /avatar
 ---> Using cache
 ---> 3b150b322ba5
Step 11/13 : WORKDIR /apiarty
 ---> Using cache
 ---> 5acffd3eabe5
Step 12/13 : COPY . .
 ---> 54b99c70745f
Step 13/13 : CMD ["bash"]
 ---> Running in 809d568d8bfb
Removing intermediate container 809d568d8bfb
 ---> 650e14c2f2ad
Successfully built 650e14c2f2ad
Successfully tagged apiarty:latest
(reverse-i-search)`docker r': sudo docker run -it ubitect:1.0 /bin/bash
marias-mbp-2:APIARTy marki$ docker run -it -v /Users/marki/Desktop/APIARTy/findings/:/apiarty/findings -v /Users/marki/Desktop/APIARTy/data/:/apiarty/data --rm apiarty
Welcome to APIARTy.

apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  tools
apiarty> cd /avatar/
apiarty> git clone https://github.com/SerVal-DTF/AVATAR.git
Cloning into 'AVATAR'...
remote: Enumerating objects: 6, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 1186 (delta 1), reused 1 (delta 0), pack-reused 1180
Receiving objects: 100% (1186/1186), 8.44 MiB | 434.00 KiB/s, done.
Resolving deltas: 100% (300/300), done.
Checking connectivity... done.
apiarty> ls
AVATAR
apiarty> cd AVATAR/
apiarty> ls
BugPositions.txt  FLFix.sh  FailedTestCases  LineFix.sh  MethodFix.sh  OUTPUT  README.md  compile.sh  figure  lib  pom.xml  src
apiarty> mkdir D4J
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     compile.sh	lib	 src
D4J		  FailedTestCases  MethodFix.sh  README.md  figure	pom.xml
apiarty> cd D4J/
apiarty> ls
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 20, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 22414 (delta 6), reused 6 (delta 3), pack-reused 22394
Receiving objects: 100% (22414/22414), 140.38 MiB | 445.00 KiB/s, done.
Resolving deltas: 100% (14409/14409), done.
Checking connectivity... done.
Checking out files: 100% (10653/10653), done.
apiarty> ls
defects4j
apiarty> cd defects4j/
apiarty> cpanm --installdeps .
--> Working on .
Configuring /avatar/AVATAR/D4J/defects4j ... OK
==> Found dependencies: JSON::Parse, DBD::CSV, URI, DBI, JSON
--> Working on JSON::Parse
Fetching http://www.cpan.org/authors/id/B/BK/BKB/JSON-Parse-0.57.tar.gz ... OK
Configuring JSON-Parse-0.57 ... OK
Building and testing JSON-Parse-0.57 ... OK
Successfully installed JSON-Parse-0.57
--> Working on DBD::CSV
Fetching http://www.cpan.org/authors/id/H/HM/HMBRAND/DBD-CSV-0.55.tgz ... OK
==> Found dependencies: DBI
--> Working on DBI
Fetching http://www.cpan.org/authors/id/T/TI/TIMB/DBI-1.643.tar.gz ... OK
Configuring DBI-1.643 ... OK
Building and testing DBI-1.643 ... OK
Successfully installed DBI-1.643
Configuring DBD-CSV-0.55 ... OK
==> Found dependencies: SQL::Statement, Text::CSV_XS
--> Working on SQL::Statement
Fetching http://www.cpan.org/authors/id/R/RE/REHSACK/SQL-Statement-1.414.tar.gz ... OK
Configuring SQL-Statement-1.414 ... OK
==> Found dependencies: Clone, Math::Base::Convert, Text::Soundex, Test::Deep
--> Working on Clone
Fetching http://www.cpan.org/authors/id/A/AT/ATOOMIC/Clone-0.45.tar.gz ... OK
Configuring Clone-0.45 ... OK
==> Found dependencies: B::COW
--> Working on B::COW
Fetching http://www.cpan.org/authors/id/A/AT/ATOOMIC/B-COW-0.004.tar.gz ... OK
Configuring B-COW-0.004 ... OK
Building and testing B-COW-0.004 ... OK
Successfully installed B-COW-0.004
Building and testing Clone-0.45 ... OK
Successfully installed Clone-0.45
--> Working on Math::Base::Convert
Fetching http://www.cpan.org/authors/id/M/MI/MIKER/Math-Base-Convert-0.11.tar.gz ... OK
Configuring Math-Base-Convert-0.11 ... OK
Building and testing Math-Base-Convert-0.11 ... OK
Successfully installed Math-Base-Convert-0.11
--> Working on Text::Soundex
Fetching http://www.cpan.org/authors/id/R/RJ/RJBS/Text-Soundex-3.05.tar.gz ... OK
Configuring Text-Soundex-3.05 ... OK
Building and testing Text-Soundex-3.05 ... OK
Successfully installed Text-Soundex-3.05
--> Working on Test::Deep
Fetching http://www.cpan.org/authors/id/R/RJ/RJBS/Test-Deep-1.130.tar.gz ... OK
Configuring Test-Deep-1.130 ... OK
Building and testing Test-Deep-1.130 ... OK
Successfully installed Test-Deep-1.130
Building and testing SQL-Statement-1.414 ... OK
Successfully installed SQL-Statement-1.414
--> Working on Text::CSV_XS
Fetching http://www.cpan.org/authors/id/H/HM/HMBRAND/Text-CSV_XS-1.44.tgz ... OK
Configuring Text-CSV_XS-1.44 ... OK
Building and testing Text-CSV_XS-1.44 ... OK
Successfully installed Text-CSV_XS-1.44
Building and testing DBD-CSV-0.55 ... OK
Successfully installed DBD-CSV-0.55
--> Working on URI
Fetching http://www.cpan.org/authors/id/O/OA/OALDERS/URI-5.05.tar.gz ... OK
Configuring URI-5.05 ... OK
==> Found dependencies: Test::Needs
--> Working on Test::Needs
Fetching http://www.cpan.org/authors/id/H/HA/HAARG/Test-Needs-0.002006.tar.gz ... OK
Configuring Test-Needs-0.002006 ... OK
Building and testing Test-Needs-0.002006 ... OK
Successfully installed Test-Needs-0.002006
Building and testing URI-5.05 ... OK
Successfully installed URI-5.05 (upgraded from 1.71)
--> Working on JSON
Fetching http://www.cpan.org/authors/id/I/IS/ISHIGAKI/JSON-4.02.tar.gz ... OK
Configuring JSON-4.02 ... OK
Building and testing JSON-4.02 ... OK
Successfully installed JSON-4.02
<== Installed dependencies for .. Finishing.
13 distributions installed
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0   375k      0  0:19:02  0:19:02 --:--:--  425k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
retrying curl https://defects4j.org/downloads/defects4j-gradle-dists.zip
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 96.0M  100 96.0M    0     0  72820      0  0:23:02  0:23:02 --:--:--  358k
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> export PATH=$PATH:/avatar/AVATAR/D4J/defects4j/framework/bin
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> defects4j 
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cd ..
apiarty> ls
defects4j
apiarty> mkdir Defects4JData
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
apiarty> mkdir Chart_25
apiarty> ls
Chart_25
apiarty> cd Chart_25/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 25b -w .
Checking out 164 to /avatar/AVATAR/D4J/Defects4JData/Chart_25.............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
Chart_25
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     compile.sh	lib	 src
D4J		  FailedTestCases  MethodFix.sh  README.md  figure	pom.xml
apiarty> vi FLFix.sh 
apiarty> find . -name Configuration.java
./src/main/java/edu/lu/uni/serval/config/Configuration.java
apiarty> vi ./src/main/java/edu/lu/uni/serval/config/Configuration.java
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     compile.sh	lib	 src
D4J		  FailedTestCases  MethodFix.sh  README.md  figure	pom.xml
(reverse-i-search)`.': vi ./src/main/java/edu/lu/uni/serval/config/Configuration^Cava
apiarty> ./compile.sh 
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for edu.uni.lu.serval:Avatar:jar:0.0.1-SNAPSHOT
[WARNING] 'dependencies.dependency.systemPath' for gzoltar:com.gzoltar:jar should not point at files within the project directory, ${project.basedir}/lib/com.gzoltar-0.1.1-jdk7.jar will be unresolvable by dependent projects @ line 32, column 16
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.commons:commons-lang3:jar -> duplicate declaration of version 3.7 @ line 67, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Avatar 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom (8 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom (9 KB at 2.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom (30 KB at 22.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom (15 KB at 11.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.jar (29 KB at 23.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.2/maven-compiler-plugin-3.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.2/maven-compiler-plugin-3.2.pom (12 KB at 42.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/25/maven-plugins-25.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/25/maven-plugins-25.pom (10 KB at 48.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/24/maven-parent-24.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/24/maven-parent-24.pom (37 KB at 27.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/14/apache-14.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/14/apache-14.pom (15 KB at 8.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.2/maven-compiler-plugin-3.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-compiler-plugin/3.2/maven-compiler-plugin-3.2.jar (45 KB at 33.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom
Downloaded: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.pom (7 KB at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom
Downloaded: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.pom (3 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/guava/guava/11.0.2/guava-11.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/guava/guava/11.0.2/guava-11.0.2.pom (6 KB at 3.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/11.0.2/guava-parent-11.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/11.0.2/guava-parent-11.0.2.pom (2 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/oss/oss-parent/7/oss-parent-7.pom (5 KB at 1.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.pom (965 B at 3.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.pom (27 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom (67 KB at 18.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom (16 KB at 3.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/easymock/easymock/3.4/easymock-3.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/easymock/easymock/3.4/easymock-3.4.pom (8 KB at 6.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/easymock/easymock-parent/3.4/easymock-parent-3.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/easymock/easymock-parent/3.4/easymock-parent-3.4.pom (17 KB at 29.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.2/objenesis-2.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.2/objenesis-2.2.pom (3 KB at 11.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/2.2/objenesis-parent-2.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/2.2/objenesis-parent-2.2.pom (17 KB at 43.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/joda/joda-convert/1.1/joda-convert-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/joda/joda-convert/1.1/joda-convert-1.1.pom (11 KB at 13.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.4/commons-cli-1.4.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.4/commons-cli-1.4.pom (11 KB at 38.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.5/commons-io-2.5.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.5/commons-io-2.5.pom (13 KB at 5.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/39/commons-parent-39.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/39/commons-parent-39.pom (61 KB at 11.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/16/apache-16.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/16/apache-16.pom (16 KB at 4.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.pom (4 KB at 9.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.25/slf4j-parent-1.7.25.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.25/slf4j-parent-1.7.25.pom (14 KB at 6.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.pom
Downloaded: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.pom (5 KB at 1.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.2.3/logback-parent-1.2.3.pom
Downloaded: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-parent/1.2.3/logback-parent-1.2.3.pom (18 KB at 5.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.pom
Downloaded: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.pom (13 KB at 24.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/runtime/3.10.0-v20140318-2214/runtime-3.10.0-v20140318-2214.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/runtime/3.10.0-v20140318-2214/runtime-3.10.0-v20140318-2214.pom (3 KB at 10.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/osgi/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/osgi/maven-metadata.xml (611 B at 1.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.9.1-v20130814-1242/osgi-3.9.1-v20130814-1242.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.9.1-v20130814-1242/osgi-3.9.1-v20130814-1242.pom (807 B at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.9.1-v20140110-1610/osgi-3.9.1-v20140110-1610.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.9.1-v20140110-1610/osgi-3.9.1-v20140110-1610.pom (807 B at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.10.0-v20140606-1445/osgi-3.10.0-v20140606-1445.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.10.0-v20140606-1445/osgi-3.10.0-v20140606-1445.pom (808 B at 3.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/maven-metadata.xml (383 B at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/3.6.200-v20130402-1505/common-3.6.200-v20130402-1505.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/3.6.200-v20130402-1505/common-3.6.200-v20130402-1505.pom (837 B at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/maven-metadata.xml (420 B at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.5.300-v20130429-1813/jobs-3.5.300-v20130429-1813.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.5.300-v20130429-1813/jobs-3.5.300-v20130429-1813.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.6.0-v20140424-0053/jobs-3.6.0-v20140424-0053.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.6.0-v20140424-0053/jobs-3.6.0-v20140424-0053.pom (2 KB at 1.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/maven-metadata.xml (433 B at 2.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.301-v20130717-1549/registry-3.5.301-v20130717-1549.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.301-v20130717-1549/registry-3.5.301-v20130717-1549.pom (2 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.400-v20140428-1507/registry-3.5.400-v20140428-1507.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.400-v20140428-1507/registry-3.5.400-v20140428-1507.pom (2 KB at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/maven-metadata.xml (436 B at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.100-v20130422-1538/preferences-3.5.100-v20130422-1538.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.100-v20130422-1538/preferences-3.5.100-v20130422-1538.pom (2 KB at 4.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.200-v20140224-1527/preferences-3.5.200-v20140224-1527.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.200-v20140224-1527/preferences-3.5.200-v20140224-1527.pom (2 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/maven-metadata.xml (433 B at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20130326-1255/contenttype-3.4.200-v20130326-1255.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20130326-1255/contenttype-3.4.200-v20130326-1255.pom (2 KB at 2.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20140207-1251/contenttype-3.4.200-v20140207-1251.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20140207-1251/contenttype-3.4.200-v20140207-1251.pom (2 KB at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/maven-metadata.xml
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/maven-metadata.xml (428 B at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.100-v20130327-1442/app-1.3.100-v20130327-1442.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.100-v20130327-1442/app-1.3.100-v20130327-1442.pom (2 KB at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.200-v20130910-1609/app-1.3.200-v20130910-1609.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.200-v20130910-1609/app-1.3.200-v20130910-1609.pom (2 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/birt/runtime/org.eclipse.core.resources/3.10.0.v20150423-0755/org.eclipse.core.resources-3.10.0.v20150423-0755.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/birt/runtime/org.eclipse.core.resources/3.10.0.v20150423-0755/org.eclipse.core.resources-3.10.0.v20150423-0755.pom (2 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.pom (2 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.pom
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.pom (24 KB at 6.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom (766 B at 3.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.pom (650 B at 2.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar
Downloading: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar
Downloading: https://repo.maven.apache.org/maven2/com/google/guava/guava/11.0.2/guava-11.0.2.jar
Downloading: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.jar
Downloaded: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar (33 KB at 11.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/easymock/easymock/3.4/easymock-3.4.jar
Downloaded: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar (107 KB at 36.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.2/objenesis-2.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.jar (488 KB at 90.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/joda/joda-convert/1.1/joda-convert-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar (307 KB at 50.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.4/commons-cli-1.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.2/objenesis-2.2.jar (52 KB at 7.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.5/commons-io-2.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/joda/joda-convert/1.1/joda-convert-1.1.jar (37 KB at 5.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.4/commons-cli-1.4.jar (53 KB at 6.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-io/commons-io/2.5/commons-io-2.5.jar (204 KB at 21.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar (41 KB at 4.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/runtime/3.10.0-v20140318-2214/runtime-3.10.0-v20140318-2214.jar
Downloaded: https://repo.maven.apache.org/maven2/org/easymock/easymock/3.4/easymock-3.4.jar (464 KB at 42.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.10.0-v20140606-1445/osgi-3.10.0-v20140606-1445.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/runtime/3.10.0-v20140318-2214/runtime-3.10.0-v20140318-2214.jar (74 KB at 6.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/3.6.200-v20130402-1505/common-3.6.200-v20130402-1505.jar
Downloaded: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar (461 KB at 37.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.6.0-v20140424-0053/jobs-3.6.0-v20140424-0053.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/common/3.6.200-v20130402-1505/common-3.6.200-v20130402-1505.jar (105 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.400-v20140428-1507/registry-3.5.400-v20140428-1507.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/jobs/3.6.0-v20140424-0053/jobs-3.6.0-v20140424-0053.jar (96 KB at 6.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.200-v20140224-1527/preferences-3.5.200-v20140224-1527.jar
Downloaded: https://repo.maven.apache.org/maven2/com/google/guava/guava/11.0.2/guava-11.0.2.jar (1610 KB at 90.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20140207-1251/contenttype-3.4.200-v20140207-1251.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/preferences/3.5.200-v20140224-1527/preferences-3.5.200-v20140224-1527.jar (125 KB at 6.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.200-v20130910-1609/app-1.3.200-v20130910-1609.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/registry/3.5.400-v20140428-1507/registry-3.5.400-v20140428-1507.jar (180 KB at 9.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/birt/runtime/org.eclipse.core.resources/3.10.0.v20150423-0755/org.eclipse.core.resources-3.10.0.v20150423-0755.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/core/contenttype/3.4.200-v20140207-1251/contenttype-3.4.200-v20140207-1251.jar (92 KB at 4.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.jar
Downloaded: https://repo.maven.apache.org/maven2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar (284 KB at 13.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/equinox/app/1.3.200-v20130910-1609/app-1.3.200-v20130910-1609.jar (85 KB at 3.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/osgi/3.10.0-v20140606-1445/osgi-3.10.0-v20140606-1445.jar (1235 KB at 46.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.jar (308 KB at 10.9 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar (300 KB at 10.1 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar (44 KB at 1.3 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/birt/runtime/org.eclipse.core.resources/3.10.0.v20150423-0755/org.eclipse.core.resources-3.10.0.v20150423-0755.jar (861 KB at 20.0 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/tycho/org.eclipse.jdt.core/3.12.0.v20160516-2131/org.eclipse.jdt.core-3.12.0.v20160516-2131.jar (5684 KB at 94.4 KB/sec)
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Avatar ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.pom (2 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.6/maven-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.6/maven-2.0.6.pom (9 KB at 12.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/5/maven-parent-5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/5/maven-parent-5.pom (15 KB at 15.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/3/apache-3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/3/apache-3.pom (4 KB at 8.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.6/maven-project-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.6/maven-project-2.0.6.pom (3 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.6/maven-settings-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.6/maven-settings-2.0.6.pom (2 KB at 8.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.6/maven-model-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.6/maven-model-2.0.6.pom (3 KB at 9.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.1/plexus-utils-1.4.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.1/plexus-utils-1.4.1.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.11/plexus-1.0.11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.11/plexus-1.0.11.pom (9 KB at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom (4 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom (492 B at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom (6 KB at 2.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.pom
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.pom (998 B at 5.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.pom (7 KB at 17.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom
Downloaded: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom (4 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.6/maven-profile-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.6/maven-profile-2.0.6.pom (2 KB at 10.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.6/maven-artifact-manager-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.6/maven-artifact-manager-2.0.6.pom (3 KB at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.6/maven-repository-metadata-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.6/maven-repository-metadata-2.0.6.pom (2 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.6/maven-artifact-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.6/maven-artifact-2.0.6.pom (2 KB at 1.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.6/maven-plugin-registry-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.6/maven-plugin-registry-2.0.6.pom (2 KB at 1.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.6/maven-core-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.6/maven-core-2.0.6.pom (7 KB at 10.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.6/maven-plugin-parameter-documenter-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.6/maven-plugin-parameter-documenter-2.0.6.pom (2 KB at 5.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.pom (2 KB at 3.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.6/maven-reporting-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.6/maven-reporting-2.0.6.pom (2 KB at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.pom (424 B at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-7/doxia-1.0-alpha-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-7/doxia-1.0-alpha-7.pom (4 KB at 2.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.6/maven-error-diagnostics-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.6/maven-error-diagnostics-2.0.6.pom (2 KB at 2.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.pom (3 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.6/maven-plugin-descriptor-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.6/maven-plugin-descriptor-2.0.6.pom (2 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom (7 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.6/maven-monitor-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.6/maven-monitor-2.0.6.pom (2 KB at 0.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.pom (4 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.pom (4 KB at 5.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.6/plexus-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.6/plexus-2.0.6.pom (17 KB at 5.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/1.1/maven-filtering-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/1.1/maven-filtering-1.1.pom (6 KB at 9.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/17/maven-shared-components-17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/17/maven-shared-components-17.pom (9 KB at 14.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom (26 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom (15 KB at 5.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.pom (7 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom (12 KB at 6.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.12/plexus-interpolation-1.12.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.12/plexus-interpolation-1.12.pom (889 B at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.14/plexus-components-1.1.14.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.14/plexus-components-1.1.14.pom (6 KB at 4.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.4/plexus-build-api-0.0.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.4/plexus-build-api-0.0.4.pom (3 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/10/spice-parent-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/10/spice-parent-10.pom (3 KB at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/3/forge-parent-3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/3/forge-parent-3.pom (5 KB at 2.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom (8 KB at 0.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.13/plexus-interpolation-1.13.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.13/plexus-interpolation-1.13.pom (890 B at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.15/plexus-components-1.1.15.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.15/plexus-components-1.1.15.pom (3 KB at 11.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.3/plexus-2.0.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.3/plexus-2.0.3.pom (16 KB at 4.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.6/maven-project-2.0.6.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.6/maven-profile-2.0.6.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.6/maven-artifact-manager-2.0.6.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.6/maven-plugin-registry-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.6/maven-artifact-manager-2.0.6.jar (56 KB at 38.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.6/maven-core-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.6/maven-plugin-registry-2.0.6.jar (29 KB at 18.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.6/maven-plugin-parameter-documenter-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.jar (13 KB at 4.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.6/maven-core-2.0.6.jar (149 KB at 33.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.6/maven-profile-2.0.6.jar (35 KB at 5.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.6/maven-repository-metadata-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-7/doxia-sink-api-1.0-alpha-7.jar (6 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.6/maven-error-diagnostics-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.6/maven-plugin-parameter-documenter-2.0.6.jar (21 KB at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.6/maven-reporting-api-2.0.6.jar (10 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.6/maven-plugin-descriptor-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.6/maven-project-2.0.6.jar (114 KB at 8.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar (14 KB at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1/classworlds-1.1.jar (37 KB at 2.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.6/maven-artifact-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.6/maven-repository-metadata-2.0.6.jar (24 KB at 1.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.6/maven-settings-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.6/maven-error-diagnostics-2.0.6.jar (14 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.6/maven-model-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-cli/commons-cli/1.0/commons-cli-1.0.jar (30 KB at 1.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.6/maven-monitor-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.6/maven-artifact-2.0.6.jar (86 KB at 4.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.6/maven-settings-2.0.6.jar (48 KB at 2.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.6/maven-monitor-2.0.6.jar (11 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.6/maven-model-2.0.6.jar (85 KB at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/1.1/maven-filtering-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar (190 KB at 7.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.4/plexus-build-api-0.0.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.6/maven-plugin-descriptor-2.0.6.jar (37 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.13/plexus-interpolation-1.13.jar
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-build-api/0.0.4/plexus-build-api-0.0.4.jar (7 KB at 0.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/3.8.1/junit-3.8.1.jar (119 KB at 4.0 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.jar (218 KB at 6.6 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.13/plexus-interpolation-1.13.jar (60 KB at 1.6 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-filtering/1.1/maven-filtering-1.1.jar (43 KB at 0.7 KB/sec)
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /avatar/AVATAR/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.2:compile (default-compile) @ Avatar ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom (2 KB at 4.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.9/maven-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.9/maven-2.0.9.pom (19 KB at 62.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/8/maven-parent-8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/8/maven-parent-8.pom (24 KB at 77.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/4/apache-4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/4/apache-4.pom (5 KB at 17.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom (2 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.pom (3 KB at 2.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom (8 KB at 11.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom (3 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom (4 KB at 7.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom (2 KB at 5.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom (3 KB at 5.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom (2 KB at 6.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom (3 KB at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom (3 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom (2 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom (3 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom (2 KB at 6.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/1.0/maven-toolchain-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/1.0/maven-toolchain-1.0.pom (4 KB at 16.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.1/maven-shared-utils-0.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.1/maven-shared-utils-0.1.pom (4 KB at 21.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/18/maven-shared-components-18.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/18/maven-shared-components-18.pom (5 KB at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.pom (965 B at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom (5 KB at 3.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom (7 KB at 16.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/23/maven-parent-23.pom (32 KB at 18.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/13/apache-13.pom (14 KB at 1.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.2.1/maven-plugin-api-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.2.1/maven-plugin-api-2.2.1.pom (2 KB at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.2.1/maven-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.2.1/maven-2.2.1.pom (22 KB at 11.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/11/maven-parent-11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/11/maven-parent-11.pom (32 KB at 16.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/5/apache-5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/5/apache-5.pom (5 KB at 14.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.2.1/maven-core-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.2.1/maven-core-2.2.1.pom (12 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.pom (3 KB at 6.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.pom (4 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.pom (889 B at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.2.1/maven-plugin-parameter-documenter-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.2.1/maven-plugin-parameter-documenter-2.2.1.pom (2 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-jdk14/1.5.6/slf4j-jdk14-1.5.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-jdk14/1.5.6/slf4j-jdk14-1.5.6.pom (2 KB at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.5.6/slf4j-parent-1.5.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.5.6/slf4j-parent-1.5.6.pom (8 KB at 9.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.6/slf4j-api-1.5.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.5.6/slf4j-api-1.5.6.pom (3 KB at 5.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/1.5.6/jcl-over-slf4j-1.5.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/slf4j/jcl-over-slf4j/1.5.6/jcl-over-slf4j-1.5.6.pom (3 KB at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.pom (3 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.pom (2 KB at 4.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.pom (2 KB at 7.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.2.1/maven-error-diagnostics-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.2.1/maven-error-diagnostics-2.2.1.pom (2 KB at 6.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.pom (3 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.pom (4 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.pom (880 B at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.pom (2 KB at 4.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.2.1/maven-plugin-descriptor-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.2.1/maven-plugin-descriptor-2.2.1.pom (3 KB at 1.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.2.1/maven-monitor-2.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.2.1/maven-monitor-2.2.1.pom (2 KB at 3.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom (3 KB at 6.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/12/spice-parent-12.pom (7 KB at 13.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/4/forge-parent-4.pom (9 KB at 16.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.pom (6 KB at 13.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom (3 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom (815 B at 4.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom (5 KB at 5.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom (17 KB at 9.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.4/plexus-compiler-api-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.4/plexus-compiler-api-2.4.pom (865 B at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.4/plexus-compiler-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler/2.4/plexus-compiler-2.4.pom (6 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom (3 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom (20 KB at 8.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/17/spice-parent-17.pom (7 KB at 2.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/10/forge-parent-10.pom (14 KB at 12.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.10/plexus-utils-3.0.10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.10/plexus-utils-3.0.10.pom (4 KB at 8.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3/plexus-3.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.3/plexus-3.3.pom (20 KB at 5.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.4/plexus-compiler-manager-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.4/plexus-compiler-manager-2.4.pom (690 B at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.4/plexus-compiler-javac-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.4/plexus-compiler-javac-2.4.pom (769 B at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.4/plexus-compilers-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compilers/2.4/plexus-compilers-2.4.pom (2 KB at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.5.5/plexus-container-default-1.5.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.5.5/plexus-container-default-1.5.5.pom (3 KB at 4.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.5/plexus-utils-1.4.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.5/plexus-utils-1.4.5.pom (3 KB at 5.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.2.2/plexus-classworlds-2.2.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.2.2/plexus-classworlds-2.2.2.pom (4 KB at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.pom (3 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean/3.4/xbean-3.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean/3.4/xbean-3.4.pom (19 KB at 4.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom
Downloaded: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom (145 B at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.pom (6 KB at 16.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/collections/google-collections/1.0/google-collections-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/collections/google-collections/1.0/google-collections-1.0.pom (3 KB at 1.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/google/1/google-1.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/google/1/google-1.pom (2 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.pom
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.pom (747 B at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar (48 KB at 104.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar (87 KB at 50.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar (21 KB at 11.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar (13 KB at 6.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar (35 KB at 11.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar (86 KB at 19.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar (14 KB at 3.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar (29 KB at 6.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar (37 KB at 7.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar (119 KB at 23.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar (11 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/1.0/maven-toolchain-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar (57 KB at 10.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.1/maven-shared-utils-0.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar (24 KB at 4.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar (156 KB at 28.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/1.0/maven-toolchain-1.0.jar (33 KB at 4.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar (14 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.4/plexus-compiler-api-2.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar (206 KB at 26.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.4/plexus-compiler-manager-2.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar (5 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.4/plexus-compiler-javac-2.4.jar
Downloaded: https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.jar (32 KB at 3.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.5.5/plexus-container-default-1.5.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-api/2.4/plexus-compiler-api-2.4.jar (25 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.2.2/plexus-classworlds-2.2.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-javac/2.4/plexus-compiler-javac-2.4.jar (19 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.1/maven-shared-utils-0.1.jar (151 KB at 13.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-compiler-manager/2.4/plexus-compiler-manager-2.4.jar (5 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar (44 KB at 3.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/com/google/collections/google-collections/1.0/google-collections-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar (131 KB at 9.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.5.5/plexus-container-default-1.5.5.jar (212 KB at 15.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar (118 KB at 8.0 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.jar (350 KB at 22.5 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/com/google/collections/google-collections/1.0/google-collections-1.0.jar (625 KB at 37.9 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/2.2.2/plexus-classworlds-2.2.2.jar (46 KB at 2.7 KB/sec)
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 90 source files to /avatar/AVATAR/target/classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 07:57 min
[INFO] Finished at: 2020-12-02T12:19:49+00:00
[INFO] Final Memory: 20M/164M
[INFO] ------------------------------------------------------------------------
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for edu.uni.lu.serval:Avatar:jar:0.0.1-SNAPSHOT
[WARNING] 'dependencies.dependency.systemPath' for gzoltar:com.gzoltar:jar should not point at files within the project directory, ${project.basedir}/lib/com.gzoltar-0.1.1-jdk7.jar will be unresolvable by dependent projects @ line 32, column 16
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.commons:commons-lang3:jar -> duplicate declaration of version 3.7 @ line 67, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 39.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 13.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.pom (6 KB at 29.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.jar (34 KB at 16.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.17/maven-surefire-plugin-2.17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.17/maven-surefire-plugin-2.17.pom (5 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/2.17/surefire-2.17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire/2.17/surefire-2.17.pom (17 KB at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.17/maven-surefire-plugin-2.17.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-surefire-plugin/2.17/maven-surefire-plugin-2.17.jar (34 KB at 138.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.5.2/maven-install-plugin-2.5.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.5.2/maven-install-plugin-2.5.2.pom (7 KB at 22.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.5.2/maven-install-plugin-2.5.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.5.2/maven-install-plugin-2.5.2.jar (33 KB at 130.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.pom (6 KB at 14.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.jar (27 KB at 19.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/3.3/maven-site-plugin-3.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/3.3/maven-site-plugin-3.3.pom (21 KB at 80.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/24/maven-plugins-24.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/24/maven-plugins-24.pom (11 KB at 54.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/3.3/maven-site-plugin-3.3.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/3.3/maven-site-plugin-3.3.jar (122 KB at 315.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-antrun-plugin/1.7/maven-antrun-plugin-1.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-antrun-plugin/1.7/maven-antrun-plugin-1.7.pom (5 KB at 3.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-antrun-plugin/1.7/maven-antrun-plugin-1.7.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-antrun-plugin/1.7/maven-antrun-plugin-1.7.jar (31 KB at 130.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-assembly-plugin/2.4.1/maven-assembly-plugin-2.4.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-assembly-plugin/2.4.1/maven-assembly-plugin-2.4.1.pom (17 KB at 66.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-assembly-plugin/2.4.1/maven-assembly-plugin-2.4.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-assembly-plugin/2.4.1/maven-assembly-plugin-2.4.1.jar (212 KB at 267.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.8/maven-dependency-plugin-2.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.8/maven-dependency-plugin-2.8.pom (12 KB at 29.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.8/maven-dependency-plugin-2.8.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.8/maven-dependency-plugin-2.8.jar (150 KB at 82.5 KB/sec)
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Avatar 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.8:copy-dependencies (default-cli) @ Avatar ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom (2 KB at 5.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom (2 KB at 6.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom (2 KB at 8.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom (9 KB at 41.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/6/maven-parent-6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/6/maven-parent-6.pom (20 KB at 88.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.pom (3 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/15/maven-shared-components-15.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/15/maven-shared-components-15.pom (10 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/16/maven-parent-16.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/16/maven-parent-16.pom (23 KB at 102.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/7/apache-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/7/apache-7.pom (15 KB at 74.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.pom (2 KB at 7.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0/doxia-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia/1.0/doxia-1.0.pom (10 KB at 42.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/10/maven-parent-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/10/maven-parent-10.pom (31 KB at 20.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-impl/2.0.5/maven-reporting-impl-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-impl/2.0.5/maven-reporting-impl-2.0.5.pom (5 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.pom (3 KB at 9.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.7/plexus-utils-1.5.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.7/plexus-utils-1.5.7.pom (8 KB at 32.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-30/plexus-container-default-1.0-alpha-30.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-30/plexus-container-default-1.0-alpha-30.pom (4 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0-alpha-30/plexus-containers-1.0-alpha-30.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0-alpha-30/plexus-containers-1.0-alpha-30.pom (2 KB at 0.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/1.2-alpha-9/plexus-classworlds-1.2-alpha-9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/1.2-alpha-9/plexus-classworlds-1.2-alpha-9.pom (4 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.10/plexus-1.0.10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.10/plexus-1.0.10.pom (9 KB at 29.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.pom (5 KB at 11.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sitetools/1.0/doxia-sitetools-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sitetools/1.0/doxia-sitetools-1.0.pom (10 KB at 42.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.pom (2 KB at 6.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.12/plexus-components-1.1.12.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.12/plexus-components-1.1.12.pom (3 KB at 17.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.pom (2 KB at 8.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-20/plexus-container-default-1.0-alpha-20.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-20/plexus-container-default-1.0-alpha-20.pom (3 KB at 14.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0-alpha-20/plexus-containers-1.0-alpha-20.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.0-alpha-20/plexus-containers-1.0-alpha-20.pom (2 KB at 1.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.3/plexus-utils-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.3/plexus-utils-1.3.pom (2 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom (8 KB at 26.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/1.2-alpha-7/plexus-classworlds-1.2-alpha-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-classworlds/1.2-alpha-7/plexus-classworlds-1.2-alpha-7.pom (3 KB at 11.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.9/plexus-1.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.9/plexus-1.0.9.pom (8 KB at 5.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.5/velocity-1.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.5/velocity-1.5.pom (8 KB at 19.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.1/commons-collections-3.1.pom (6 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.1/commons-lang-2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.1/commons-lang-2.1.pom (10 KB at 18.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/oro/oro/2.0.8/oro-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/oro/oro/2.0.8/oro-2.0.8.pom (140 B at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.pom (4 KB at 2.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2/commons-collections-3.2.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2/commons-collections-3.2.pom (11 KB at 25.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.pom (3 KB at 10.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-modules/1.0/doxia-modules-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-modules/1.0/doxia-modules-1.0.pom (3 KB at 7.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.pom (3 KB at 12.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.pom (3 KB at 11.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.pom (2 KB at 9.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-doxia-tools/1.0.2/maven-doxia-tools-1.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-doxia-tools/1.0.2/maven-doxia-tools-1.0.2.pom (6 KB at 26.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/11/maven-shared-components-11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/11/maven-shared-components-11.pom (9 KB at 40.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-io/commons-io/1.4/commons-io-1.4.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-io/commons-io/1.4/commons-io-1.4.pom (13 KB at 63.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/7/commons-parent-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/7/commons-parent-7.pom (18 KB at 60.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9/plexus-container-default-1.0-alpha-9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9/plexus-container-default-1.0-alpha-9.pom (2 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-validator/commons-validator/1.2.0/commons-validator-1.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-validator/commons-validator/1.2.0/commons-validator-1.2.0.pom (9 KB at 34.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.pom (357 B at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.pom (866 B at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.6/commons-digester-1.6.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.6/commons-digester-1.6.pom (974 B at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.6/commons-beanutils-1.6.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.6/commons-beanutils-1.6.pom (3 KB at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0/commons-logging-1.0.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0/commons-logging-1.0.pom (163 B at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/2.0/commons-collections-2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/2.0/commons-collections-2.0.pom (171 B at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/2.1/commons-collections-2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/2.1/commons-collections-2.1.pom (4 KB at 6.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.pom (6 KB at 12.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/2.0.2/xml-apis-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/xml-apis/xml-apis/2.0.2/xml-apis-2.0.2.pom (346 B at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.3/plexus-archiver-2.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.3/plexus-archiver-2.3.pom (4 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3/plexus-components-1.3.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.3/plexus-components-1.3.pom (3 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.6/plexus-io-2.0.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.6/plexus-io-2.0.6.pom (3 KB at 11.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.2/plexus-components-1.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.2/plexus-components-1.2.pom (3 KB at 11.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.2/plexus-3.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.2/plexus-3.2.pom (19 KB at 18.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.8/plexus-utils-3.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.8/plexus-utils-3.0.8.pom (4 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.9/plexus-utils-3.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.9/plexus-utils-3.0.9.pom (4 KB at 14.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/1.2.1/file-management-1.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/1.2.1/file-management-1.2.1.pom (4 KB at 7.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/10/maven-shared-components-10.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/10/maven-shared-components-10.pom (9 KB at 12.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/9/maven-parent-9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/9/maven-parent-9.pom (33 KB at 14.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-io/1.1/maven-shared-io-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-io/1.1/maven-shared-io-1.1.pom (4 KB at 12.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/8/maven-shared-components-8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/8/maven-shared-components-8.pom (3 KB at 7.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/7/maven-parent-7.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/7/maven-parent-7.pom (21 KB at 8.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.2/maven-artifact-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.2/maven-artifact-2.0.2.pom (765 B at 2.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.2/maven-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.2/maven-2.0.2.pom (13 KB at 26.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.pom (767 B at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.2/maven-artifact-manager-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.2/maven-artifact-manager-2.0.2.pom (2 KB at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.2/maven-repository-metadata-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.2/maven-repository-metadata-2.0.2.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/1.0-alpha-6/wagon-provider-api-1.0-alpha-6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/1.0-alpha-6/wagon-provider-api-1.0-alpha-6.pom (588 B at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon/1.0-alpha-6/wagon-1.0-alpha-6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon/1.0-alpha-6/wagon-1.0-alpha-6.pom (7 KB at 8.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.6/plexus-utils-1.4.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.4.6/plexus-utils-1.4.6.pom (3 KB at 2.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.6/plexus-utils-1.5.6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/1.5.6/plexus-utils-1.5.6.pom (6 KB at 10.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.12/plexus-1.0.12.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/1.0.12/plexus-1.0.12.pom (10 KB at 7.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.4/maven-dependency-analyzer-1.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.4/maven-dependency-analyzer-1.4.pom (6 KB at 3.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/asm/asm/3.3.1/asm-3.3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/asm/asm/3.3.1/asm-3.3.1.pom (266 B at 1.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/asm/asm-parent/3.3.1/asm-parent-3.3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/asm/asm-parent/3.3.1/asm-parent-3.3.1.pom (5 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.5/maven-project-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.5/maven-project-2.0.5.pom (2 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.5/maven-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.5/maven-2.0.5.pom (6 KB at 10.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.5/maven-settings-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.5/maven-settings-2.0.5.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.5/maven-model-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.5/maven-model-2.0.5.pom (3 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.5/maven-profile-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.5/maven-profile-2.0.5.pom (2 KB at 1.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.5/maven-artifact-manager-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.5/maven-artifact-manager-2.0.5.pom (2 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.5/maven-repository-metadata-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.5/maven-repository-metadata-2.0.5.pom (2 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.5/maven-artifact-2.0.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.5/maven-artifact-2.0.5.pom (727 B at 0.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.pom (7 KB at 0.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.2.0/maven-project-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.2.0/maven-project-2.2.0.pom (3 KB at 2.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.2.0/maven-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.2.0/maven-2.2.0.pom (22 KB at 13.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.2.0/maven-settings-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.2.0/maven-settings-2.2.0.pom (3 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.2.0/maven-model-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.2.0/maven-model-2.2.0.pom (4 KB at 1.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.2.0/maven-profile-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.2.0/maven-profile-2.2.0.pom (3 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.2.0/maven-artifact-manager-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.2.0/maven-artifact-manager-2.2.0.pom (4 KB at 3.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.2.0/maven-repository-metadata-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.2.0/maven-repository-metadata-2.2.0.pom (2 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.2.0/maven-artifact-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.2.0/maven-artifact-2.2.0.pom (2 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.2.0/maven-plugin-registry-2.2.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.2.0/maven-plugin-registry-2.2.0.pom (2 KB at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.pom (2 KB at 8.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/0.9.0.M2/aether-0.9.0.M2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether/0.9.0.M2/aether-0.9.0.M2.pom (28 KB at 5.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.4/maven-common-artifact-filters-1.4.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.4/maven-common-artifact-filters-1.4.pom (4 KB at 5.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.8/maven-artifact-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact/2.0.8/maven-artifact-2.0.8.pom (2 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.8/maven-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven/2.0.8/maven-2.0.8.pom (12 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.8/maven-model-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-model/2.0.8/maven-model-2.0.8.pom (4 KB at 0.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.8/maven-project-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-project/2.0.8/maven-project-2.0.8.pom (3 KB at 5.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.8/maven-settings-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-settings/2.0.8/maven-settings-2.0.8.pom (3 KB at 9.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.8/maven-profile-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-profile/2.0.8/maven-profile-2.0.8.pom (2 KB at 0.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.8/maven-artifact-manager-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-artifact-manager/2.0.8/maven-artifact-manager-2.0.8.pom (3 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.8/maven-repository-metadata-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-repository-metadata/2.0.8/maven-repository-metadata-2.0.8.pom (2 KB at 2.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.8/maven-plugin-registry-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-registry/2.0.8/maven-plugin-registry-2.0.8.pom (2 KB at 4.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.8/maven-plugin-api-2.0.8.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-plugin-api/2.0.8/maven-plugin-api-2.0.8.pom (2 KB at 1.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.pom (4 KB at 2.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (9 KB at 11.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (9 KB at 14.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/2.0.11/maven-invoker-2.0.11.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/2.0.11/maven-invoker-2.0.11.pom (5 KB at 3.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/12/maven-shared-components-12.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/12/maven-shared-components-12.pom (10 KB at 12.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/13/maven-parent-13.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/13/maven-parent-13.pom (23 KB at 11.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/6/apache-6.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/6/apache-6.pom (13 KB at 1.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.pom (18 KB at 8.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/17/commons-parent-17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/17/commons-parent-17.pom (31 KB at 4.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.pom (13 KB at 2.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/9/commons-parent-9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/9/commons-parent-9.pom (22 KB at 10.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-impl/2.0.5/maven-reporting-impl-2.0.5.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-doxia-tools/1.0.2/maven-doxia-tools-1.0.2.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar
Downloading: https://repo.maven.apache.org/maven2/commons-io/commons-io/1.4/commons-io-1.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar (11 KB at 8.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-validator/commons-validator/1.2.0/commons-validator-1.2.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-impl/2.0.5/maven-reporting-impl-2.0.5.jar (21 KB at 13.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-doxia-tools/1.0.2/maven-doxia-tools-1.0.2.jar (41 KB at 14.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.6/commons-digester-1.6.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.6/commons-digester-1.6.jar (165 KB at 32.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar (38 KB at 5.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/oro/oro/2.0.8/oro-2.0.8.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-io/commons-io/1.4/commons-io-1.4.jar (107 KB at 14.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-validator/commons-validator/1.2.0/commons-validator-1.2.0.jar (89 KB at 10.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar (185 KB at 22.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar (11 KB at 1.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar (46 KB at 4.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.5/velocity-1.5.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar (8 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/oro/oro/2.0.8/oro-2.0.8.jar (64 KB at 5.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar (54 KB at 4.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar (46 KB at 3.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar (48 KB at 3.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar (28 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.3/plexus-archiver-2.3.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.5/velocity-1.5.jar (383 KB at 23.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.9/plexus-utils-3.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar (10 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/1.2.1/file-management-1.2.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar (22 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-io/1.1/maven-shared-io-1.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar (19 KB at 1.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/1.0-alpha-6/wagon-provider-api-1.0-alpha-6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.3/plexus-archiver-2.3.jar (183 KB at 10.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.6/plexus-io-2.0.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-io/1.1/maven-shared-io-1.1.jar (39 KB at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.4/maven-dependency-analyzer-1.4.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/1.0-alpha-6/wagon-provider-api-1.0-alpha-6.jar (42 KB at 2.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/asm/asm/3.3.1/asm-3.3.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0.9/plexus-utils-3.0.9.jar (227 KB at 11.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.6/plexus-io-2.0.6.jar (57 KB at 2.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-analyzer/1.4/maven-dependency-analyzer-1.4.jar (27 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.4/maven-common-artifact-filters-1.4.jar
Downloaded: https://repo.maven.apache.org/maven2/asm/asm/3.3.1/asm-3.3.1.jar (43 KB at 2.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/2.0.11/maven-invoker-2.0.11.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar (59 KB at 2.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/file-management/1.2.1/file-management-1.2.1.jar (37 KB at 1.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/2.0.11/maven-invoker-2.0.11.jar (29 KB at 1.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar (278 KB at 11.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/1.4/maven-common-artifact-filters-1.4.jar (31 KB at 1.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar (562 KB at 21.1 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar (131 KB at 4.1 KB/sec)
[INFO] Copying joda-convert-1.1.jar to /avatar/AVATAR/target/dependency/joda-convert-1.1.jar
[INFO] Copying commons-cli-1.4.jar to /avatar/AVATAR/target/dependency/commons-cli-1.4.jar
[INFO] Copying commons-io-2.5.jar to /avatar/AVATAR/target/dependency/commons-io-2.5.jar
[INFO] Copying org.eclipse.jdt.core-3.12.0.v20160516-2131.jar to /avatar/AVATAR/target/dependency/org.eclipse.jdt.core-3.12.0.v20160516-2131.jar
[INFO] Copying hamcrest-all-1.3.jar to /avatar/AVATAR/target/dependency/hamcrest-all-1.3.jar
[INFO] Copying jsr305-1.3.9.jar to /avatar/AVATAR/target/dependency/jsr305-1.3.9.jar
[INFO] Copying easymock-3.4.jar to /avatar/AVATAR/target/dependency/easymock-3.4.jar
[INFO] Copying commons-lang3-3.7.jar to /avatar/AVATAR/target/dependency/commons-lang3-3.7.jar
[INFO] Copying common-3.6.200-v20130402-1505.jar to /avatar/AVATAR/target/dependency/common-3.6.200-v20130402-1505.jar
[INFO] Copying xml-apis-1.0.b2.jar to /avatar/AVATAR/target/dependency/xml-apis-1.0.b2.jar
[INFO] Copying osgi-3.10.0-v20140606-1445.jar to /avatar/AVATAR/target/dependency/osgi-3.10.0-v20140606-1445.jar
[INFO] Copying jobs-3.6.0-v20140424-0053.jar to /avatar/AVATAR/target/dependency/jobs-3.6.0-v20140424-0053.jar
[INFO] Copying logback-core-1.2.3.jar to /avatar/AVATAR/target/dependency/logback-core-1.2.3.jar
[INFO] Copying contenttype-3.4.200-v20140207-1251.jar to /avatar/AVATAR/target/dependency/contenttype-3.4.200-v20140207-1251.jar
[INFO] Copying logback-classic-1.2.3.jar to /avatar/AVATAR/target/dependency/logback-classic-1.2.3.jar
[INFO] Copying runtime-3.10.0-v20140318-2214.jar to /avatar/AVATAR/target/dependency/runtime-3.10.0-v20140318-2214.jar
[INFO] Copying preferences-3.5.200-v20140224-1527.jar to /avatar/AVATAR/target/dependency/preferences-3.5.200-v20140224-1527.jar
[INFO] Copying com.gzoltar-0.1.1-jdk7.jar to /avatar/AVATAR/target/dependency/com.gzoltar-0.1.1.jar
[INFO] Copying hamcrest-core-1.3.jar to /avatar/AVATAR/target/dependency/hamcrest-core-1.3.jar
[INFO] Copying junit-4.12.jar to /avatar/AVATAR/target/dependency/junit-4.12.jar
[INFO] Copying slf4j-api-1.7.25.jar to /avatar/AVATAR/target/dependency/slf4j-api-1.7.25.jar
[INFO] Copying guava-11.0.2.jar to /avatar/AVATAR/target/dependency/guava-11.0.2.jar
[INFO] Copying objenesis-2.2.jar to /avatar/AVATAR/target/dependency/objenesis-2.2.jar
[INFO] Copying org.eclipse.core.resources-3.10.0.v20150423-0755.jar to /avatar/AVATAR/target/dependency/org.eclipse.core.resources-3.10.0.v20150423-0755.jar
[INFO] Copying dom4j-1.6.1.jar to /avatar/AVATAR/target/dependency/dom4j-1.6.1.jar
[INFO] Copying registry-3.5.400-v20140428-1507.jar to /avatar/AVATAR/target/dependency/registry-3.5.400-v20140428-1507.jar
[INFO] Copying app-1.3.200-v20130910-1609.jar to /avatar/AVATAR/target/dependency/app-1.3.200-v20130910-1609.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 04:11 min
[INFO] Finished at: 2020-12-02T12:24:02+00:00
[INFO] Final Memory: 18M/199M
[INFO] ------------------------------------------------------------------------
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for edu.uni.lu.serval:Avatar:jar:0.0.1-SNAPSHOT
[WARNING] 'dependencies.dependency.systemPath' for gzoltar:com.gzoltar:jar should not point at files within the project directory, ${project.basedir}/lib/com.gzoltar-0.1.1-jdk7.jar will be unresolvable by dependent projects @ line 32, column 16
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.commons:commons-lang3:jar -> duplicate declaration of version 3.7 @ line 67, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Avatar 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Avatar ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /avatar/AVATAR/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.2:compile (default-compile) @ Avatar ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ Avatar ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /avatar/AVATAR/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.2:testCompile (default-testCompile) @ Avatar ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.17:test (default-test) @ Avatar ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.17/maven-surefire-common-2.17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.17/maven-surefire-common-2.17.pom (6 KB at 1.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-annotations/3.2/maven-plugin-annotations-3.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-annotations/3.2/maven-plugin-annotations-3.2.pom (2 KB at 6.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-tools/3.2/maven-plugin-tools-3.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-tools/3.2/maven-plugin-tools-3.2.pom (17 KB at 11.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.17/surefire-api-2.17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.17/surefire-api-2.17.pom (3 KB at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.pom (3 KB at 0.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/2.0.9/maven-toolchain-2.0.9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/2.0.9/maven-toolchain-2.0.9.pom (4 KB at 0.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.pom (17 KB at 5.1 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/22/commons-parent-22.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/22/commons-parent-22.pom (41 KB at 28.3 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/9/apache-9.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/apache/9/apache-9.pom (15 KB at 12.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.17/maven-surefire-common-2.17.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.17/surefire-api-2.17.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar (10 KB at 2.5 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/2.0.9/maven-toolchain-2.0.9.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/maven-surefire-common/2.17/maven-surefire-common-2.17.jar (260 KB at 64.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-annotations/3.2/maven-plugin-annotations-3.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugin-tools/maven-plugin-annotations/3.2/maven-plugin-annotations-3.2.jar (15 KB at 2.4 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-booter/2.17/surefire-booter-2.17.jar (39 KB at 6.2 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-api/2.17/surefire-api-2.17.jar (144 KB at 14.0 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar (309 KB at 25.8 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-toolchain/2.0.9/maven-toolchain-2.0.9.jar (38 KB at 2.6 KB/sec)
[INFO] No tests to run.
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ Avatar ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.pom (5 KB at 1.8 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.pom (3 KB at 1.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4 KB at 0.7 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.pom (2 KB at 5.6 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.19/plexus-components-1.1.19.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.19/plexus-components-1.1.19.pom (3 KB at 0.4 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.0.1/plexus-3.0.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/3.0.1/plexus-3.0.1.pom (19 KB at 10.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.15/plexus-interpolation-1.15.pom
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.15/plexus-interpolation-1.15.pom (1018 B at 0.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.15/plexus-interpolation-1.15.jar
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar
Downloaded: https://repo.maven.apache.org/maven2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar (37 KB at 24.2 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.1/commons-lang-2.1.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar (22 KB at 14.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar (57 KB at 32.6 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.1/commons-lang-2.1.jar (203 KB at 34.0 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (221 KB at 24.8 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar (181 KB at 15.4 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interpolation/1.15/plexus-interpolation-1.15.jar (60 KB at 2.6 KB/sec)
[INFO] Building jar: /avatar/AVATAR/target/Avatar-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:42 min
[INFO] Finished at: 2020-12-02T12:25:46+00:00
[INFO] Final Memory: 16M/175M
[INFO] ------------------------------------------------------------------------
apiarty> ./compile.sh ^C
apiarty> time ./FLFix.sh Chart_25 > /apiarty/dat/Chart_25_avatar.txt

real	2m50.590s
user	4m15.572s
sys	0m20.712s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> ls
Chart_25
apiarty> cd Chart_25/
apiarty> ls
Ochiai.txt
apiarty> vi Ochiai.txt 
apiarty> ls
Ochiai.txt
apiarty> cd ..
apiarty> ls
Chart_25
apiarty> cp -r Chart_25/ /apiarty/findings/
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19  Chart_5	 Closure_21  Closure_62  Lang_13  Lang_58  Math_28  Math_59  Math_85	 Time_18
Chart_11  Chart_24  Chart_7	 Closure_22  Closure_63  Lang_39  Lang_59  Math_33  Math_80  Math_89	 Time_19
Chart_13  Chart_25  Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4   Math_81  Math_95	 Time_7
Chart_14  Chart_26  Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46  Math_82  Mockito_29
Chart_15  Chart_4   Closure_2	 Closure_46  Lang_10	 Lang_57  Lang_7   Math_50  Math_84  Mockito_38
apiarty> cd Chart_25
apiarty> ls
Patch_19.txt  Patch_20.txt
apiarty> cd ..
apiarty> ls
Chart_1   Chart_19  Chart_5	 Closure_21  Closure_62  Lang_13  Lang_58  Math_28  Math_59  Math_85	 Time_18
Chart_11  Chart_24  Chart_7	 Closure_22  Closure_63  Lang_39  Lang_59  Math_33  Math_80  Math_89	 Time_19
Chart_13  Chart_25  Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4   Math_81  Math_95	 Time_7
Chart_14  Chart_26  Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46  Math_82  Mockito_29
Chart_15  Chart_4   Closure_2	 Closure_46  Lang_10	 Lang_57  Lang_7   Math_50  Math_84  Mockito_38
apiarty> cd Chart_25
apiarty> ls
Patch_19.txt  Patch_20.txt
apiarty> ls -l\
> ^C
apiarty> ls -l
total 8
-rwxr-xr-x 1 root root 994 Dec  2 10:50 Patch_19.txt
-rw-r--r-- 1 root root 995 Dec  2 12:34 Patch_20.txt
apiarty> ls
Patch_19.txt  Patch_20.txt
apiarty> cd ..
apiarty> ls
Chart_1   Chart_19  Chart_5	 Closure_21  Closure_62  Lang_13  Lang_58  Math_28  Math_59  Math_85	 Time_18
Chart_11  Chart_24  Chart_7	 Closure_22  Closure_63  Lang_39  Lang_59  Math_33  Math_80  Math_89	 Time_19
Chart_13  Chart_25  Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4   Math_81  Math_95	 Time_7
Chart_14  Chart_26  Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46  Math_82  Mockito_29
Chart_15  Chart_4   Closure_2	 Closure_46  Lang_10	 Lang_57  Lang_7   Math_50  Math_84  Mockito_38
apiarty> mv Chart_25 Chart_25_old
apiarty> ls
Chart_1   Chart_19	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_24	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_14  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_15  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_25 > /apiarty/data/Chart_25_avatar.txt

real	1m57.520s
user	3m0.005s
sys	0m12.602s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_25
apiarty> defects4j checkout -p Chart -v 1b -w .
Cannot open config file (/avatar/AVATAR/D4J/Defects4JData/.defects4j.config): No such file or directory
Directory exists but is not a previously used working directory: /avatar/AVATAR/D4J/Defects4JData at /avatar/AVATAR/D4J/defects4j/framework/core/Vcs.pm line 285.
Compilation failed in require at /avatar/AVATAR/D4J/defects4j/framework/bin/defects4j line 195.
apiarty> ls
Chart_25
apiarty> mkdir Chart_1
apiarty> ls
Chart_1  Chart_25
apiarty> cd Chart_1
apiarty> defects4j checkout -p Chart -v 1b -w .
Checking out 2266 to /avatar/AVATAR/D4J/Defects4JData/Chart_1.............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2266:2264............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-1b........................................ OK
apiarty> ls
ChangeLog  README.txt  checkstyle		   docfiles	 lib		   maven-jfreechart-project.xml  swt
NEWS	   ant	       defects4j.build.properties  experimental  licence-LGPL.txt  source			 tests
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
apiarty> ls
ChangeLog   all_tests  build-tests		   docfiles	  lib				source
NEWS	    ant        checkstyle		   experimental   licence-LGPL.txt		swt
README.txt  build      defects4j.build.properties  failing_tests  maven-jfreechart-project.xml	tests
apiarty> cd ..
apiarty> ls
Chart_1  Chart_25
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_1 > /apiarty/data/Chart_1_avatar.txt

real	181m58.985s
user	278m56.415s
sys	18m30.835s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_25
apiarty> cd ../..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> ls
Chart_1  Chart_25
apiarty> cp -r Chart_1 /apiarty/findings/
apiarty> ls
Chart_1  Chart_25
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> cp -r Chart_25 /apiarty/findings/
apiarty> cp -r Chart_1 /apiarty/findings/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> cd ../..
apiarty> ls
FL  Line  Method
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> cd Chart_1
apiarty> ls -l
total 8
-rwxr-xr-x 1 root root 731 Dec  2 10:50 Patch_1519.txt
-rw-r--r-- 1 root root 732 Dec  2 17:49 Patch_1566.txt
apiarty> cd ..
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> rm -r Chart_11
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_25
apiarty> mkdir Chart_11
apiarty> cd Chart_11
apiarty> ls
apiarty> defects4j checkout -p Chart -v 11b -w .
Checking out 1025 to /avatar/AVATAR/D4J/Defects4JData/Chart_11............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1025:1024............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-11b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_25
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_11 > /apiarty/data/Chart_11_avatar.txt

real	72m11.856s
user	110m29.936s
sys	8m5.030s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> ls
Chart_1  Chart_11  Chart_25
apiarty> cp -r Chart_11 /apiarty/findings/
apiarty> ls
Chart_1  Chart_11  Chart_25
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> cp -r Chart_11 /apiarty/findings/
apiarty> rm -r Chart_26
apiarty> ls
Chart_1   Chart_19	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_24	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_14  Chart_25_old	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_15  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ../..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_25
apiarty> mkdir Chart_26
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26
apiarty> cd Chart_26
apiarty> ls
apiarty> defects4j checkout -p Chart -v 26b -w .
Checking out 103 to /avatar/AVATAR/D4J/Defects4JData/Chart_26.............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 103:102............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-26b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2
  - org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo
  - org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo
  - org.jfree.chart.plot.junit.CategoryPlotTests::test1654215
  - org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3
  - org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4
  - org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo
  - org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo
apiarty> pwd
/avatar/AVATAR/D4J/Defects4JData/Chart_26
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_26 > /apiarty/data/Chart_26_avatar.txt

real	70m10.190s
user	108m2.398s
sys	7m31.719s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26
apiarty> mkdir Chart_4
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26  Chart_4
apiarty> cd Chart_4
apiarty> ls
apiarty> defects4j checkout -p Chart -v 4b -w .
Checking out 2183 to /avatar/AVATAR/D4J/Defects4JData/Chart_4.............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2183:2182............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-4b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins
  - org.jfree.chart.junit.JFreeChartTests::testSerialization4
  - org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo
  - org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset
  - org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepChartTests::testReplaceDataset
  - org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines
apiarty> ls
ChangeLog   all_tests  build-tests		   docfiles	  lib				source
NEWS	    ant        checkstyle		   experimental   licence-LGPL.txt		swt
README.txt  build      defects4j.build.properties  failing_tests  maven-jfreechart-project.xml	tests
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26  Chart_4
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> rm -r Chart_4
apiarty> ls
Chart_1   Chart_19	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_24	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_14  Chart_25_old	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cp -r SuspiciousCodePositions/Chart_26 /avatar/findings
apiarty> cp -r SuspiciousCodePositions/Chart_26 /apiart/findings
cp: cannot create directory '/apiart/findings': No such file or directory
apiarty> cp -r SuspiciousCodePositions/Chart_26 /apiarty/findings
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_24	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_14  Chart_25_old	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cp -r Chart_4 /apiarty/findings/
cp: cannot stat 'Chart_4': No such file or directory
apiarty> cp -r Chart_26 /apiarty/findings/
apiarty> ls
Chart_1   Chart_19	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_24	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_14  Chart_25_old	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_4 > /apiarty/data/Chart_4_avatar.txt

real	136m47.026s
user	207m56.476s
sys	14m33.456s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_19	Chart_4      Closure_2	 Closure_46  Lang_10  Lang_57  Lang_7	Math_50  Math_84     Mockito_38
Chart_11  Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_13  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_14  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
apiarty> rm -r Chart_14
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_25  Chart_26  Chart_4
apiarty> mkdir Chart_14
apiarty> cd Chart_14
apiarty> defects4j checkout -p Chart -v 14b -w .
Checking out 811 to /avatar/AVATAR/D4J/Defects4JData/Chart_14.............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 811:809............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-14b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
  - org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
  - org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
  - org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Chart_14 > /apiarty/data/Chart_14_avatar.txt
^C
real	405m27.146s
user	636m52.476s
sys	43m13.888s
apiarty> ^C
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4
apiarty> mkdir Lang_47
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Lang_47
apiarty> cd Lang_47/
apiarty> defects4j checkout -p Lang -v 47b -w .
Checking out d5e34304 to /avatar/AVATAR/D4J/Defects4JData/Lang_47.......... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff d5e34304:19f33e4e..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Lang-47b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.apache.commons.lang.text.StrBuilderTest::testLang412Left
  - org.apache.commons.lang.text.StrBuilderTest::testLang412Right
apiarty> ls
LICENSE.txt    RELEASE-NOTES.txt  checkstyle.xml	      doap_lang.rdf  pom.xml		 src
NOTICE.txt     all_tests	  default.properties	      failing_tests  project.properties  target
PROPOSAL.html  build.xml	  defects4j.build.properties  maven.xml      project.xml	 xdocs
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Lang_47
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4
apiarty> cp -r Chart_14 /apiarty/findings/
apiarty> cp -r Chart_4 /apiarty/findings/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cp -r Chart_4 /apiarty/findings/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Lang_47
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
(reverse-i-search)`time': ^Cme ./FLFix.sh Chart_14 > /apiarty/data/Chart_14_avatar.txt
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Lang_47 > /apiarty/data/Lang_47_avatar.txt

real	21m4.937s
user	22m47.025s
sys	1m32.983s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Lang_47
apiarty> mkdir Closure_104
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Lang_47
apiarty> cd Closure_104/
apiarty> defects4j checkout -p Closure -v 104b -w .
Checking out 67289ae4 to /avatar/AVATAR/D4J/Defects4JData/Closure_104...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 67289ae4:1be1c263..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-104b.................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
apiarty> ls
COPYING  all_tests  build.xml  defects4j.build.properties  failing_tests  javadoc  src	 tools
README	 build	    contrib    externs			   gen		  lib	   test
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Lang_47
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> cd ..
apiarty> ls 
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls -l
total 12
drwxr-xr-x 4 root root 4096 Dec  2 10:50 FL
drwxr-xr-x 4 root root 4096 Dec  2 10:50 Line
drwxr-xr-x 4 root root 4096 Dec  2 10:50 Method
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd ..
apiarty> ls
AVATAR	findings
apiarty> cd findings/
apiarty> ls
Ochiai.txt
apiarty> cd ..
apiarty> ls
AVATAR	findings
apiarty> rm -r findings/
apiarty> ls
AVATAR
apiarty> cd AVATAR/
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Closure_104 > /apiarty/data/Closure_104_avatar.txt
^C
real	241m53.802s
user	347m31.292s
sys	29m54.076s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/
apiarty> ls
Defects4JData  defects4j
apiarty> cd Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Lang_47
apiarty> mkdir Closure_2
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Lang_47
apiarty> cd Closure_2
apiarty> defects4j checkout -p Closure -v 2b -w .
Checking out d1cfe679 to /avatar/AVATAR/D4J/Defects4JData/Closure_2........ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff d1cfe679:61095090..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-2b...................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeCheckTest::testBadInterfaceExtendsNonExistentInterfaces
apiarty> cd ..
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Closure_2 > /apiarty/data/Closure_2_avatar.txt
java.lang.NullPointerException
	at com.gzoltar.core.GZoltar.run(GZoltar.java:51)
	at edu.lu.uni.serval.faultlocalization.GZoltarFaultLoclaization.localizeSuspiciousCodeWithGZoltar(GZoltarFaultLoclaization.java:100)
	at edu.lu.uni.serval.faultlocalization.FL.locateSuspiciousCode(FL.java:74)
	at edu.lu.uni.serval.avatar.AbstractFixer.readSuspiciousCodeFromFile(AbstractFixer.java:144)
	at edu.lu.uni.serval.avatar.Avatar.fixProcess(Avatar.java:58)
	at edu.lu.uni.serval.main.Main.fixBug(Main.java:54)
	at edu.lu.uni.serval.main.Main.main(Main.java:28)
Exception in thread "main" java.lang.NullPointerException
	at edu.lu.uni.serval.avatar.AbstractFixer.readSuspiciousCodeFromFile(AbstractFixer.java:147)
	at edu.lu.uni.serval.avatar.Avatar.fixProcess(Avatar.java:58)
	at edu.lu.uni.serval.main.Main.fixBug(Main.java:54)
	at edu.lu.uni.serval.main.Main.main(Main.java:28)

real	7m30.891s
user	13m27.219s
sys	0m20.178s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Lang_47
apiarty> mkdir Closure_83
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Closure_83  Lang_47
apiarty> defects4j checkout -p Closure -v 83b -w .
Cannot open config file (/avatar/AVATAR/D4J/Defects4JData/.defects4j.config): No such file or directory
Directory exists but is not a previously used working directory: /avatar/AVATAR/D4J/Defects4JData at /avatar/AVATAR/D4J/defects4j/framework/core/Vcs.pm line 285.
Compilation failed in require at /avatar/AVATAR/D4J/defects4j/framework/bin/defects4j line 195.
apiarty> cd Closure_83/
apiarty> defects4j checkout -p Closure -v 83b -w .
Checking out 43c245f0 to /avatar/AVATAR/D4J/Defects4JData/Closure_83....... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 43c245f0:840ddca5..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-83b..................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
apiarty> ls
CONTRIBUTORS  README	 build	    closure-compiler.pom  defects4j.build.properties  failing_tests  javadoc  src   tools
COPYING       all_tests  build.xml  contrib		  externs		      gen	     lib      test
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Closure_83  Lang_47
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Closure_83 > /apiarty/data/Closure_83_avatar.txt
^CException in thread "main" java.lang.IllegalStateException: Shutdown in progress
	at java.io.DeleteOnExitHook.add(DeleteOnExitHook.java:60)
	at java.io.File.deleteOnExit(File.java:1081)
	at edu.lu.uni.serval.utils.ShellUtils.shellRun(ShellUtils.java:54)
	at edu.lu.uni.serval.avatar.AbstractFixer.testGeneratedPatches(AbstractFixer.java:243)
	at edu.lu.uni.serval.avatar.Avatar.generatePatches(Avatar.java:190)
	at edu.lu.uni.serval.avatar.Avatar.fixWithMatchedFixTemplates(Avatar.java:103)
	at edu.lu.uni.serval.avatar.Avatar.fixProcess(Avatar.java:71)
	at edu.lu.uni.serval.main.Main.fixBug(Main.java:54)
	at edu.lu.uni.serval.main.Main.main(Main.java:28)

real	746m20.292s
user	1076m21.096s
sys	73m17.614s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Closure_83  Lang_47
apiarty> mkdir Math_4
apiarty> cd Math_4
(failed reverse-i-search)`defects4h c': ^Cfects4j test
apiarty> defects4j checkout -p Math -v 4b -w .
Checking out 277e6172 to /avatar/AVATAR/D4J/Defects4JData/Math_4........... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 277e6172:d609e65f..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-4b......................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting
  - org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel
apiarty> ls
LICENSE.txt	   all_tests		       doap_math.rdf		    license-header.txt	siteMods
NOTICE.txt	   build.xml		       doc			    math-RC.sh		src
PROPOSAL.html	   checkstyle.xml	       failing_tests		    math-pre-RC.sh	target
RELEASE-NOTES.txt  defects4j.build.properties  findbugs-exclude-filter.xml  pom.xml		test-jar.xml
apiarty> cd ..
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Closure_83  Lang_47  Math_4
apiarty> cd ..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_59  Math_85     Time_18
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_80  Math_89     Time_19
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_4	Math_81  Math_95     Time_7
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_46	Math_82  Mockito_29
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_50	Math_84  Mockito_38
apiarty> rm -r Math_4
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_80  Math_89     Time_19
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_81  Math_95     Time_7
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_50	Math_84  Mockito_38
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_59	Math_85  Time_18
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd ..
apiarty> ls
AVATAR
apiarty> cd AVATAR/
apiarty> ;s
bash: syntax error near unexpected token `;'
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_80  Math_89     Time_19
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_81  Math_95     Time_7
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_50	Math_84  Mockito_38
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_59	Math_85  Time_18
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_4 > /apiarty/data/Math_4_avatar.txt
^R
^R
apiarty> time ./FLFix.sh Closure_83 > /apiarty/data/Closure_83_avatar.txt
^CException in thread "main" java.lang.IllegalStateException: Shutdown in progress
	at java.io.DeleteOnExitHook.add(DeleteOnExitHook.java:60)
	at java.io.File.deleteOnExit(File.java:1081)
	at edu.lu.uni.serval.utils.ShellUtils.shellRun(ShellUtils.java:54)
	at edu.lu.uni.serval.avatar.AbstractFixer.testGeneratedPatches(AbstractFixer.java:243)
	at edu.lu.uni.serval.avatar.Avatar.generatePatches(Avatar.java:190)
	at edu.lu.uni.serval.avatar.Avatar.fixWithMatchedFixTemplates(Avatar.java:103)
	at edu.lu.uni.serval.avatar.Avatar.fixProcess(Avatar.java:71)
	at edu.lu.uni.serval.main.Main.fixBug(Main.java:54)
	at edu.lu.uni.serval.main.Main.main(Main.java:28)

real	746m20.292s
user	1076m21.096s
sys	73m17.614s^C
real	254m54.874s
user	440m30.524s
sys	7m37.402s
apiarty> 
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd OUTPUT/
apiarty> ls
FL  Line  Method
apiarty> cd FL
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd FixedBugs/
apiarty> ls
Chart_1   Chart_24	Chart_5      Closure_21  Closure_62  Lang_13  Lang_58  Math_28	Math_80  Math_89     Time_19
Chart_11  Chart_25	Chart_7      Closure_22  Closure_63  Lang_39  Lang_59  Math_33	Math_81  Math_95     Time_7
Chart_13  Chart_25_old	Closure_115  Closure_38  Closure_68  Lang_44  Lang_6   Math_46	Math_82  Mockito_29
Chart_15  Chart_26	Closure_126  Closure_45  Closure_73  Lang_51  Lang_63  Math_50	Math_84  Mockito_38
Chart_19  Chart_4	Closure_2    Closure_46  Lang_10     Lang_57  Lang_7   Math_59	Math_85  Time_18
apiarty> cd ..
apiarty> ls
FixedBugs  PartiallyFixedBugs
apiarty> cd ..
apiarty> ls
FL  Line  Method
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd D4J/Defects4JData/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_2  Closure_83  Lang_47  Math_4
apiarty> mkdir Math_17
apiarty> cd Math_17
apiarty> defects4j checkout -p Math -v 17b -w .
Checking out 621806b7 to /avatar/AVATAR/D4J/Defects4JData/Math_17.......... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 621806b7:07611165..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-17b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.apache.commons.math3.dfp.DfpTest::testMultiply
apiarty> ls
LICENSE.txt	   all_tests		       doap_math.rdf		    math-RC.sh	    src
NOTICE.txt	   build.xml		       failing_tests		    math-pre-RC.sh  target
PROPOSAL.html	   checkstyle.xml	       findbugs-exclude-filter.xml  pom.xml	    test-jar.xml
RELEASE-NOTES.txt  defects4j.build.properties  license-header.txt	    siteMods
apiarty> cd ../..
apiarty> ls
Defects4JData  defects4j
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> time ./FLFix.sh Math_17 > /apiarty/data/Math_17_avatar.txt
^C
real	144m9.202s
user	222m22.652s
sys	5m9.254s
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cp -r SuspiciousCodePositions/ /apiarty/findings
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd SuspiciousCodePositions/
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_83  Lang_47  Math_17  Math_4
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_83  Lang_47  Math_17  Math_4
(reverse-i-search)`r': time ./FLFix.sh Math_17 > /apiarty/data/Math_17_avata^Ctxt
apiarty> ls
Chart_1  Chart_11  Chart_14  Chart_25  Chart_26  Chart_4  Closure_104  Closure_83  Lang_47  Math_17  Math_4
apiarty> pwd
/avatar/AVATAR/SuspiciousCodePositions
apiarty> cd ..
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> ls
BugPositions.txt  FLFix.sh	   LineFix.sh	 OUTPUT     SuspiciousCodePositions  figure  logs     src
D4J		  FailedTestCases  MethodFix.sh  README.md  compile.sh		     lib     pom.xml  target
apiarty> cd /apiarty
apiarty> cd ..
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> mkdir simfix
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	simfix	srv  sys  tmp  usr  var
apiarty> cd simfix/
apiarty> git clone ^C
apiarty> ls
apiarty> cd ..
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	simfix	srv  sys  tmp  usr  var
apiarty> rm -r simfix/
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 451.00 KiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix	apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> cd SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    d4j_integration  docker   killmap  sbfl.sh	 stats
analysis   cluster_scripts  data.zip	     gzoltar  lib      setup.sh  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 20, done.
remote: Counting objects: 100% (20/20), done.
remote: Compressing objects: 100% (16/16), done.
remote: Total 22414 (delta 6), reused 6 (delta 3), pack-reused 22394
Receiving objects: 100% (22414/22414), 140.38 MiB | 479.00 KiB/s, done.
Resolving deltas: 100% (14409/14409), done.
Checking connectivity... done.
Checking out files: 100% (10653/10653), done.
apiarty> cd defects4j/
apiarty> cpanm --installdeps .
--> Working on .
Configuring /SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init
bash: ./init: No such file or directory
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0   454k      0  0:15:43  0:15:43 --:--:--  604k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.2/randoop-4.2.2.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> ./setup.sh 
Adding environment variables to bashrc...
fatal: destination path '/SimFix/sbfl/defects4j' already exists and is not an empty directory.
unable to clone Defects4J
apiarty> vi setup.sh 
apiarty> vi setup.sh 
apiarty> ./setup.sh 
Adding environment variables to bashrc...
2020-12-09 08:28:35 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 2 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> defects4j
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> unzip data
Archive:  data.zip
   creating: data/
  inflating: data/.DS_Store          
   creating: __MACOSX/
   creating: __MACOSX/data/
  inflating: __MACOSX/data/._.DS_Store  
  inflating: data/blacklist.csv      
   creating: data/data_massaging/
  inflating: data/data_massaging/amend-scores  
  inflating: data/data_massaging/clean_up_scores.pl  
  inflating: data/data_massaging/get_all_real.pl  
  inflating: data/data_massaging/README.md  
  inflating: data/data_massaging/split_scores_by_category.sh  
  inflating: data/num_tests.csv      
  inflating: data/num_tests.sh       
  inflating: data/README.md          
  inflating: data/sbfl_runtimes.csv  
  inflating: data/scores_artificial_vs_real.csv  
  inflating: data/scores_for_muse_with_each_killdefn.csv  
  inflating: data/scores_real_exploration.csv  
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd data
apiarty> ls
README.md      data_massaging  num_tests.sh	  scores_artificial_vs_real.csv		  scores_real_exploration.csv
blacklist.csv  num_tests.csv   sbfl_runtimes.csv  scores_for_muse_with_each_killdefn.csv
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd d4j-info/
apiarty> ls
all_tests  failed_tests  failed_tests_ori  location  project.json  src_path
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> mkdir projects
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> cd projects/
apiarty> mkdir closure
apiarty> cd closure/
apiarty> mkdir closure_104_buggy
apiarty> ls
closure_104_buggy
apiarty> pwd
/SimFix/sbfl/projects/closure
apiarty> cd closure_104_buggy/
apiarty> pwd
/SimFix/sbfl/projects/closure/closure_104_buggy
apiarty> cd ../../..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> defects4j checkout -p Closure -v 104b -w projects/closure/closure_104_buggy/
Checking out 67289ae4 to /SimFix/sbfl/projects/closure/closure_104_buggy... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 67289ae4:1be1c263..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-104b.................................... OK
apiarty> cd projects/closure/closure_104_buggy/
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
apiarty> ls
COPYING  all_tests  build.xml  defects4j.build.properties  failing_tests  javadoc  src	 tools
README	 build	    contrib    externs			   gen		  lib	   test
apiarty> cd ..
apiarty> ls
closure_104_buggy
apiarty> cd ..
apiarty> ls
closure
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
D4J_HOME is not set!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> ./sbfl.sh Closure 104 /SimFix/sbfl/projects/closure/closure_104_buggy/
D4J_HOME is not set!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   stats
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104
/SimFix/sbfl/projects/
=================================================
Project : closure_104	start : 20/12/09 08:52

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : Type and JSType
Field type inconsistancy 'THIS' with types : Token and int
^Capiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104
bash: j: command not found
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104
/SimFix/sbfl/projects/
=================================================
Project : closure_104	start : 20/12/09 08:54

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : Type and JSType
Field type inconsistancy 'THIS' with types : Token and int
TIMEOUT : 18000000
com.google.javascript.rhino.jstype.UnionType,287
========
if(alternate.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(otherAlternate.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(element.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(alt.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(type.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(t.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(that.isSubtype(this)){
restricted.addAlternate(that);
}

========
========
if(anyObjectType.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(thisType.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(current.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(propA.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(thatParamType.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(greatestSubtype.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(ownerTypeOfThis.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(currentClass.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(switchType.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(that.canTestForShallowEqualityWith(this)){
builder.addAlternate(that);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(caseType.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(thatType.isSubtype(this)){
builder.addAlternate(that);
}

========
com.google.javascript.rhino.jstype.JSType,592
========
if(thisType.isObject()&&that.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thatType.isObject()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()||thisType.isAllType()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thisType.isAllType()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thatType.isObject()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thatType.isObject()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thisType.isAllType()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thatType.isObject()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()||thisType.isAllType()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thatType.isObject()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thisType.isAllType()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()||thisType.isAllType()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thisType.isAllType()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thatType.isObject()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thisType.isAllType()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thisType.isAllType()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isObject()&&thisType.isAllType()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thisType.isAllType()){
return thatType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isEmptyType()&&thisType.isAllType()){
return thisType.getLeastSupertype(thisType);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.equals(getNativeType(UNKNOWN_TYPE))&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return getNativeType(CHECKED_UNKNOWN_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(CHECKED_UNKNOWN_TYPE);
}

========
========
if(that.isObject()&&that.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thisType.isSubtype(getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thisType.isSubtype(getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&that.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(this)||thisType.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(this)&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thisType.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thisType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thisType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
========
if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thatType.isSubtype(thisType)){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&ownerTypeOfThis.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.equals(registry.getNativeType(UNKNOWN_TYPE))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&propType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isObject()&&thatType.restrictByNotNullOrUndefined().isTemplateType()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isObject()&&thatType.restrictByNotNullOrUndefined().isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isObject()&&thisType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thisType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isUnionType()){
return thatType.getLeastSupertype(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return ((UnionType)thatType).getNativeType(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(jsType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(paramType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(anyObjectType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return getNativeType(CHECKED_UNKNOWN_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(functionType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return thatType.getLeastSupertype(this);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return ((UnionType)thatType).getNativeType(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.equals(thisType)){
return that;
}else if(functionInstance.equals(this)){
return this;
}
if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.equals(thisType)){
return this;
}else if(functionInstance.equals(this)){
return that;
}
if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(leftType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(rightType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(ownerTypeOfThis.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.restrictByNotNullOrUndefined().isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(constructorType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(newType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return getNativeType(JSTypeNative.BOOLEAN_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(thisType.isUnionType()){
return thatType.getLeastSupertype(thisType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isUnionType()){
return thatType.getLeastSupertype(thisType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(paramType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return thatType.getLeastSupertype(this);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(jsType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(anyObjectType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return getNativeType(CHECKED_UNKNOWN_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(alt.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(functionType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(thatType.equals(thisType)){
return thisType;
}else if(thatType.equals(this)){
return this;
}
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
if(thatType.equals(thisType)){
return thisType;
}else if(thatType.equals(this)){
return this;
}

return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(thatType.equals(thisType)){
return this;
}else if(thatType.equals(this)){
return thisType;
}
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
if(thatType.equals(thisType)){
return this;
}else if(thatType.equals(this)){
return thisType;
}

return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).getNativeType(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
if(equals(thisType)){
return this;
}
return ((UnionType)thisType).getNativeType(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(leftType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(rightType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(ownerTypeOfThis.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(that.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(that.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType instanceof UnionType){
UnionType (UnionType)thisType=(UnionType)that;
for(JSType thatType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.restrictByNotNullOrUndefined().isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(constructorType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(newType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.restrictByNotNullOrUndefined().isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).getNativeType(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return getNativeType(JSTypeNative.BOOLEAN_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return getNativeType(JSTypeNative.NUMBER_TYPE);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).getNativeType(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnionType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
com.google.javascript.rhino.jstype.UnionType,274
========
if(alternate.isSubtype(that)){
builder.addAlternate(that);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(alternate.isSubtype(alternate)){
builder.addAlternate(alternate);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(alternate.isSubtype(that)){
restricted.addAlternate(alternate);
}

========
========
if(alternate.isSubtype(that.returnType)){
builder.addAlternate(alternate);
}

========
========
for(JSType alternate : alternates){
if(alternate.isSubtype(alternate)){
builder.addAlternate(alternate);
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
restricted.addAlternate(alternate);
}
}

========
========
alternates.add(alternate);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
if(that.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return UNKNOWN;
}else {
return FALSE;
}
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
for(JSType alternate : alternates){
canAssign&=alternate.canAssignTo(that);
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
new TreeSet<JSType>(ALPHA).addAll(alternates);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.isSubtype(alternate)){
builder.addAlternate(alternate);
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
restricted.addAlternate(alternate);
}
}

========
========
alternates.add(alternate);
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
if(that.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return UNKNOWN;
}else {
return FALSE;
}
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
canAssign&=alternate.canAssignTo(that);
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.findPropertyType(registry)==null){
continue;
}
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(that==null){
propertyType=alternate.findPropertyType(registry);
}else {
propertyType=that.getLeastSupertype(alternate.findPropertyType(registry));
}
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
for(JSType alternate : alternates){
if(alternate.findPropertyType(registry)==null){
continue;
}
if(that==null){
propertyType=alternate.findPropertyType(registry);
}else {
propertyType=that.getLeastSupertype(alternate.findPropertyType(registry));
}

if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
========
UnionTypeBuilder builder=new UnionTypeBuilder(registry);
new TreeSet<JSType>(ALPHA).addAll(registry);
for(JSType alternate : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}

========
com.google.javascript.rhino.jstype.UnionType,275
com.google.javascript.rhino.jstype.UnionType,276
com.google.javascript.rhino.jstype.UnionType,279
Find no block!
com.google.javascript.rhino.jstype.UnionType,281
========
if(otherAlternate.isSubtype(this)){
restricted.addAlternate(otherAlternate);
}

========
========
if(otherAlternate.canTestForShallowEqualityWith(this)){
builder.addAlternate(otherAlternate);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.autoboxesTo().isSubtype(this)){
builder.addAlternate(otherAlternate);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.autoboxesTo().canTestForShallowEqualityWith(this)){
builder.addAlternate(otherAlternate);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
restricted.addAlternate(otherAlternate);
}
}

========
========
if(that.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return UNKNOWN;
}else {
return FALSE;
}
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}

========
========
for(JSType otherAlternate : ((UnionType)that).alternates){
greatestSubtype=that.getLeastSupertype(builder.build());
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}

========
========
for(JSType otherAlternate : ((UnionType)that).alternates){
canAssign&=otherAlternate.canAssignTo(that);
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}

========
========
new TreeSet<JSType>(ALPHA).addAll(alternates);
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that instanceof RecordType){
return RecordType.isSubtype(this,(RecordType)that);
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}

========
========
if(that.toObjectType()==null?null:thatObj.getConstructor()!=null&&thatCtor.isInterface()){
Iterable<ObjectType> getCtorImplementedInterfaces()=getCtorImplementedInterfaces();
for(ObjectType otherAlternate : thisInterfaces){
if(thisInterface.isSubtype(that)){
return true;
}
}
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}

========
com.google.javascript.rhino.jstype.UnionType,290
========
for(JSType result : alternates){
if(alternate.isSubtype(that)){
builder.addAlternate(alternate);
}
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}
JSType result=builder.build();

========
========
if(that instanceof RecordType){
return RecordType.isSubtype(this,(RecordType)that);
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}
JSType result=builder.build();

========
========
if(that.toObjectType()==null?null:thatObj.getConstructor()!=null&&thatCtor.isInterface()){
Iterable<ObjectType> getCtorImplementedInterfaces()=getCtorImplementedInterfaces();
for(ObjectType otherAlternate : thisInterfaces){
if(thisInterface.isSubtype(that)){
return true;
}
}
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}
JSType result=builder.build();

========
========
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}
setResolvedTypeInternal(this);
JSType result=builder.build();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(false){
alternates=ImmutableSet.builder().build();
}
if(that instanceof UnionType){
for(JSType otherAlternate : ((UnionType)that).alternates){
if(otherAlternate.isSubtype(this)){
builder.addAlternate(otherAlternate);
}
}
}else if(that.isSubtype(this)){
builder.addAlternate(that);
}
JSType result=builder.build();

========
com.google.javascript.rhino.jstype.UnionType,291
========
if(this.isObject()&&thatType.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(this.isObject()&&that.isObject()){
return result.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return result.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
return result.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isSubtype(getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN))){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else error

========
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isFunctionType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(CHECKED_UNKNOWN_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else error

========
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isNoType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isVoidType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isNullable()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&that.isSubtype(result)){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(this.isObject()&&ownerTypeOfThis.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(this.isObject()&&propType.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(this.isObject()&&altPropType.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(varType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(result==null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(resolveResult!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(jsType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(jsType==null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(varType==null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(type!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(propVarType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(returnType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(result!=null){
return type;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(that!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(result!=null&&that.isSubtype(result)){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(delegateType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
========
if(result!=null&&(that.isUnknownType()||result.isUnknownType())){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
if(altPropType!=null){
return result;
}else if(this.isObject()&&that.isObject()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else {
return getNativeType(JSTypeNative.NO_TYPE);
}

========
com.google.javascript.rhino.jstype.UnionType,292
com.google.javascript.rhino.jstype.UnionTypeBuilder,157
========
skipEOLs();
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(step==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(size==MAX_UNION_SIZE){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(size==1){
continue retry;
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(size==1){
result=alternates.iterator().next();
}else {
continue retry;
result=registry.getNativeType(NO_TYPE);
}

========
========
if(v==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(EXPR_RESULT==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(size==FIELDS_STORE_SIZE){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(len==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(mode==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if((size==1)){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(parentType==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(LABEL==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(getInitializingReference()==null){
return false;
}
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
newChild.parent=this;
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
newChild.next=node.next;
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
child.next=null;
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
child.parent=null;
if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
default :

if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
case Token.ERROR :

if(size==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
========
if(size!=1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(null==1){
result=alternates.iterator().next();
}else {
result=registry.getNativeType(NO_TYPE);
}

========
com.google.javascript.rhino.jstype.NoObjectType,342
com.google.javascript.rhino.jstype.NoType,129
com.google.javascript.rhino.jstype.JSType,591
com.google.javascript.rhino.jstype.PrototypeObjectType,370
========
if(that instanceof UnionType){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.jstype.JSType,589
========
if(thisType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thisType)){
return thatType.getLeastSupertype(thisType);
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(anyObjectType.isSubtype(thisType)){
return anyObjectType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(anyObjectType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thisType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thisType)){
return anyObjectType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return TRUE;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(paramType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return thatType;
}else if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType instanceof UnionType){
UnionType (UnionType)thisType=(UnionType)that;
for(JSType thatType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType.getLeastSupertype(this);
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return thatType.getLeastSupertype(this);
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alt.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thatType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(type.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return UNKNOWN;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(current.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return UNKNOWN;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(alt.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(jsType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(ownerTypeOfThis.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(functionType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);

return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);

return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
if(equals(thatType)){
return this;
}
return that;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(functionInstance.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isSubtype(thisType)){
return type;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return type;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(otherAlternate.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(leftType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(rightType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(t.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(typeB)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propA.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(element.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(constructorType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.restrictByNotNullOrUndefined().isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(currentClass.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(newType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(switchType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.autoboxesTo().isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.autoboxesTo().isSubtype(thatType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isSubtype(thatType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(altPropType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatParamType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
thatType=(nameType==null)?getNativeType(UNKNOWN_TYPE):nameType;
if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(that.returnType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType instanceof UnionType){
UnionType (UnionType)thisType=(UnionType)that;
for(JSType thatType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType instanceof UnionType){
UnionType (UnionType)thisType=(UnionType)that;
for(JSType thatType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(thatType.isSubtype(thisType)){
return thatType;
}else if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType instanceof UnionType){
UnionType (UnionType)thisType=(UnionType)that;
for(JSType thatType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(that.isSubtype(thisType)){
return thatType;
}else if(that.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return getNativeType(JSTypeNative.NUMBER_TYPE);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).getNativeType(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
com.google.javascript.rhino.jstype.JSType,587
========
if(thatType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isSubtype(thatType)){
return thisType.getLeastSupertype(thatType);
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thatType)){
return thisType.getLeastSupertype(thatType);
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(anyObjectType.isSubtype(thatType)){
return anyObjectType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thatType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(anyObjectType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isSubtype(thatType)){
return anyObjectType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thatType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return TRUE;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thisType;
}else if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType instanceof UnionType){
UnionType (UnionType)thatType=(UnionType)that;
for(JSType thisType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alt.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thisType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(type.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(current.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return UNKNOWN;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return UNKNOWN;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(paramType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(ownerTypeOfThis.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(leftType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(rightType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thatType.getLeastSupertype(this);
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thatType.getLeastSupertype(this);
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(otherAlternate.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isSubtype(thisType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propA.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(element.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(alt.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(t.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(jsType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(functionType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thisType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);

return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thisType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);

return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isSubtype(thatType)){
if(equals(thisType)){
return this;
}
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(functionInstance.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(currentClass.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatParamType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(that.returnType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(switchType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.autoboxesTo().isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.autoboxesTo().isSubtype(thisType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thisType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(type.isSubtype(thatType)){
return type;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isSubtype(thatType)){
return type;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(altPropType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(constructorType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.restrictByNotNullOrUndefined().isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(newType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType instanceof UnionType){
UnionType (UnionType)thatType=(UnionType)that;
for(JSType thisType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(that.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType instanceof UnionType){
UnionType (UnionType)thatType=(UnionType)that;
for(JSType thisType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(thisType.isSubtype(thatType)){
return thisType;
}else if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType instanceof UnionType){
UnionType (UnionType)thatType=(UnionType)that;
for(JSType thisType : union.alternates){
if(this.isSubtype(element)){
return true;
}
}
}
if(that.isSubtype(thatType)){
return thisType;
}else if(that.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
com.google.javascript.rhino.jstype.JSType,566
========
if(that.isRecordType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
return getNativeType(JSTypeNative.NO_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return that.getLeastSupertype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(element.isRecordType()){
return that.getGreatestSubtype(this);
}

========
========
if(alternate.isRecordType()){
return that.getGreatestSubtype(this);
}

========
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
return type.getGreatestSubtype(this);
}

========
========
if(t.isRecordType()){
return that.getGreatestSubtype(this);
}

========
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}

========
========
if(that.isRecordType()){
return new RecordTypeBuilder(registry).build();
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
for(String NOT_A_TYPE : thatRecord.properties.keySet()){
if(!hasProperty(NOT_A_TYPE)){
new RecordTypeBuilder(registry).addProperty(NOT_A_TYPE,(RecordType)that.getPropertyType(property));
}
}
return that.getGreatestSubtype(this);
}

========
========
if(greatestSubtype.isRecordType()){
return that.getGreatestSubtype(this);
}

========
com.google.javascript.rhino.jstype.JSType,570
========
if(that.isRecordType()){
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return getNativeType(JSTypeNative.NO_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(element.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return that.getLeastSupertype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return that.getGreatestSubtype(this);
}
return getLeastSupertype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return that.getLeastSupertype(this);
}
return getLeastSupertype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(JSType.isSubtype(this,that)){
return true;
}
if(that.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(!that.isRecordType()){
return false;
}
if(that.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return this;
}else if(that.equals(this)){
return that;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(alternate.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return type.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(t.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}
if(equals(that)){
return this;
}
if(that.equals(that)){
return that;
}else if(that.equals(this)){
return this;
}

return that.getNativeType(this);
}
return getGreatestSubtype(this,that);

========
========
if(that.isRecordType()){
return that.getGreatestSubtype(this);
}
return new UnionTypeBuilder(this).build().getGreatestSubtype(typeB);

========
========
if(that.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
return new RecordTypeBuilder(registry).build();
}
return getGreatestSubtype(this,that);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isRecordType()){
for(String NOT_A_TYPE : thatRecord.properties.keySet()){
if(!hasProperty(NOT_A_TYPE)){
new RecordTypeBuilder(registry).addProperty(NOT_A_TYPE,(RecordType)that.getPropertyType(property));
}
}
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
========
if(greatestSubtype.isRecordType()){
return that.getGreatestSubtype(this);
}
return getGreatestSubtype(this,that);

========
com.google.javascript.rhino.jstype.JSType,578
========
if(thatType.isEmptyType()||thatType.isAllType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isAllType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isUnknownType()||thatType.isAllType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(leftType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(rightType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(this)||thatType.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(this)||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.NULL_TYPE))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propA.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(propA.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propA.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||propB.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(propA.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return that;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thatType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return that;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(functionInstance.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(functionInstance.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||propType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||altPropType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.equals(getNativeType(UNKNOWN_TYPE))||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(varType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)||thisType.isSubtype(thatType)){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thisType)||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thisType.isSubtype(thatType)){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(alt.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||type.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()&&thisType.isSubtype(thatType)){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(t.isUnknownType()||t.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(t.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||t.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||ownerTypeOfThis.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.matchesNumberContext()&&thisType.matchesNumberContext()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.matchesNumberContext()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thisType.matchesNumberContext()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(leftType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||rightType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.matchesNumberContext()&&thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()&&thisType.matchesNumberContext()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.matchesNumberContext()||thisType.matchesNumberContext()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isUnknownType()||thatType.isNullable()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isNullable()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isUnknownType()||thatType.isNullable()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||type.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(type.isSubtype(thatType)){
return type;
}else if(type.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(type.isSubtype(thatType)){
return type;
}else if(type.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return type;
}else if(type.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(type.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return type;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(type.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(jsType.isUnknownType()||jsType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isUnknownType()||thatType.isEmptyType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isEmptyType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(jsType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||jsType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isUnknownType()||type.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||currentClass.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(switchType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thisType.autoboxesTo().isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thisType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatParamType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(objType.isSubtype(thatType)){
return thisType;
}else if(objType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(objType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(objType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||restrictedLeftType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||newType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isAllType()||thatType.isNoType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isAllType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thisType.isUnknownType()||thatType.isNoType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(that.isUnknownType()||thatType.isNoType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isAllType()||that.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thisParamType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(that.isUnknownType()||thatType.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
return thatType.getLeastSupertype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(leftType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||rightType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||that.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(isFunctionType()&&thatType.isFunctionType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isFunctionType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thatType.isAllType()){
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(thatType)){
return thatType;
}else if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(this)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(thatType)){
return thatType;
}else if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(this)){
return this;
}

return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isFunctionType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()&&that.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(thatType)){
return this;
}else if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(this)){
return thatType;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(thatType)){
return this;
}else if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(this)){
return thatType;
}

return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isFunctionType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||that.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isFunctionType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&that.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isAllType()){
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()&&thatType.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||thatType.isFunctionType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(isFunctionType()||that.isAllType()){
if(equals(thatType)){
return this;
}
return thatType.getNativeType(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(propA.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||propB.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||propType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||altPropType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isSubtype(thisType)||thisType.isSubtype(thatType)){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(thisType)||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thisType.isSubtype(thatType)){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(alt.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||type.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(alternate.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()&&thisType.isSubtype(thatType)){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(t.isEmptyType()||t.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thisType.isUnknownType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(t.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||t.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||ownerTypeOfThis.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.matchesNumberContext()&&thisType.matchesNumberContext()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.matchesNumberContext()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thisType.matchesNumberContext()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(leftType.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||rightType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.matchesNumberContext()&&thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()&&thisType.matchesNumberContext()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.matchesNumberContext()||thisType.matchesNumberContext()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||currentClass.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isEmptyType()||type.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(type.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(switchType.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thisType.autoboxesTo().isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isEmptyType()||thisType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(jsType.isEmptyType()||thatType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thatParamType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||restrictedLeftType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||newType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
========
if(thatType.isEmptyType()||thisParamType.isAllType()){
return thatType.getGreatestSubtype(thisType);
}else if(thisType.isUnknownType()||thatType.isUnknownType()){
return thisType.equals(thatType)?thisType:thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
}else if(thisType.isSubtype(thatType)){
return thisType;
}else if(thatType.isSubtype(thisType)){
return thatType;
}else if(thisType.isUnionType()){
return ((UnionType)thisType).meet(thatType);
}else if(thatType.isUnionType()){
return ((UnionType)thatType).meet(thisType);
}else if(thisType.isObject()&&thatType.isObject()){
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
}

========
com.google.javascript.rhino.jstype.JSType,582
com.google.javascript.rhino.jstype.JSType,249
com.google.javascript.rhino.jstype.UnionType,394
========
if(!that.isSubtype(that)){
return false;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(!propA.isSubtype(that)){
return false;
}

========
========
if(!thatParamType.isSubtype(that)){
return false;
}

========
========
if(!element.isSubtype(that.returnType)){
return false;
}

========
========
if(!anyObjectType.isSubtype(that)){
return false;
}

========
========
if(!type.isSubtype(that)){
return false;
}

========
========
if(!t.isSubtype(that)){
return false;
}

========
========
if(!currentClass.isSubtype(that)){
return false;
}

========
========
if(!switchType.isSubtype(that)){
return false;
}

========
========
if(!caseType.isSubtype(that)){
return false;
}

========
com.google.javascript.rhino.jstype.NoObjectType,285
com.google.javascript.rhino.jstype.UnionType,392
========
for(JSType element : alternates){
if(!alternate.isSubtype(that)){
return false;
}
}

========
========
if(that.isSubtype(getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))){
return UNKNOWN;
}else {
return FALSE;
}
for(JSType element : alternates){
if(!element.isSubtype(that)){
return false;
}
}

========
========
for(JSType element : alternates){
if(!t.isSubtype(that)){
return false;
}
}

========
========
new TreeSet<JSType>(ALPHA).addAll(alternates);
for(JSType element : alternates){
if(!element.isSubtype(that)){
return false;
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.jstype.UnionType,393
com.google.javascript.rhino.testing.BaseJSTypeTestCase,388
========
return NUMBER_OBJECT_FUNCTION_TYPE.getLeastSupertype(NUMBER_OBJECT_FUNCTION_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
return registry.createNullableType(variants);

========
========
return registry.createOptionalType(variants);

========
========
return registry.getNativeType(JSTypeNative.NO_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
return registry.getNativeType(variants);

========
========
return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
TESTING : closure_104
========
return createUnionType(variants,getNativeType(JSTypeNative.NULL_TYPE));

========
========
return createUnionType(NUMBER_OBJECT_FUNCTION_TYPE,getNativeType(JSTypeNative.VOID_TYPE));

========
========
return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
return new UnionTypeBuilder(this).build();

========
========
for(JSType NUMBER_OBJECT_FUNCTION_TYPE : variants){
new UnionTypeBuilder(this).addAlternate(type);
}
return registry.createUnionType(variants);

========
========
return new UnionTypeBuilder(registry).build();

========
com.google.javascript.rhino.jstype.UnionType,321
com.google.javascript.rhino.jstype.NamedType,104
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=name;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=number;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=exportPropertyFunction;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=exportSymbolFunction;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
Preconditions.checkNotNull(sourceName);
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
Preconditions.checkNotNull(reference);
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
Preconditions.checkNotNull(sourceName);
Preconditions.checkNotNull(reference);
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=className;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=str;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
if(null==sourceName){
throw new IllegalArgumentException("StringNode: str is null");
}
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
Preconditions.checkNotNull(sourceName);
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=name;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=templateTypeName;
this.lineno=lineno;
this.charno=charno;

========
========
recordErrorOrigin(sourceName,charno,reference,charno);
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
U2U_FUNCTION_TYPE=registry.getNativeFunctionType(JSTypeNative.U2U_FUNCTION_TYPE);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
addNativeProperties(registry);
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=sourceString;
this.sourceName=sourceString;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=sourceString;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceString;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=initCharno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
Preconditions.checkArgument(reference!=null);
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=propName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=nodeType;
this.charno=charno;

========
========
charno=mergeLineCharNo(lineno,charno);
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.getNativeObjectType(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
new StringBuilder().append("Pure functions:\n");
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(parentName.replacementNode);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(null);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
if(!lazyInitDocumentation()){
return true;
}
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
documentation.sees.add(reference);
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
clearAst();
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.report(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.createName(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceURI;
this.lineno=lineno;
this.charno=charno;

========
========
try{
return parse();
}catch (IOException ex) {
  throw new IllegalStateException();
}

super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
recordErrorOrigin(reference,lineno,null,0);
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=errorMessage;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=errorName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.forgiving=forgiving;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.add(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
popScope();
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.registry=config.registry;
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
charno=31*result+(sourceName!=null?sourceName.hashCode():0);
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
charno=31*result+charno;
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=lineno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
sourceName=null;
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
if(sourceName==null)throw new IllegalArgumentException();
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
if(this.sourceName!=null)throw new IllegalStateException();
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
if(sourceName==null)throw new IllegalArgumentException();
if(this.sourceName!=null)throw new IllegalStateException();
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=sourceCursor;

========
========
if(forgiving){
return true;
}
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkNotNull(sourceName);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
Preconditions.checkState(reference);
this.reference=reference;
this.sourceName=sourceName;
this.lineno=lineno;
this.charno=charno;

========
com.google.javascript.rhino.jstype.NamedType,97
Find no block!
com.google.javascript.rhino.jstype.NamedType,106
com.google.javascript.rhino.jstype.NamedType,107
com.google.javascript.rhino.jstype.NamedType,108
com.google.javascript.rhino.jstype.NamedType,109
com.google.javascript.rhino.jstype.NamedType,110
com.google.javascript.rhino.jstype.NamedType,111
Find no block!
com.google.javascript.rhino.jstype.JSType,826
Find no block!
com.google.javascript.rhino.jstype.InstanceObjectType,157
========
if(thatObj==null&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatObj!=Token.NAME&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(thatObj==Token.NAME&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(thatObj!=Token.STRING&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(NAME!=null&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(CALL!=null&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(alt!=null&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
========
if(that==that&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatObj!=that&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatObj==that&&thatObj.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatObj!=null&&objectType.isNominalType()){
return getReferenceName().equals(thatObj.getReferenceName());
}

========
com.google.javascript.rhino.jstype.JSType,821
========
if(thisType.isSubtype(element)){
return false;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(element.isSubtype(element)){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(element.isSubtype(element)){
return false;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(alt.isSubtype(element)){
return true;
}

========
========
if(thisType.isSubtype(thisType)){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(type.isSubtype(element)){
return true;
}

========
========
if(propA.isSubtype(element)){
return true;
}

========
========
if(alternate.isSubtype(element)){
return true;
}

========
========
if(that.isSubtype(element)){
return true;
}

========
========
if(thatParamType.isSubtype(element)){
return true;
}

========
========
if(thisType.isSubtype(that.returnType)){
return true;
}

========
========
if(that.isSubtype(element)){
return false;
}

========
========
if(otherAlternate.isSubtype(element)){
return true;
}

========
========
if(anyObjectType.isSubtype(element)){
return true;
}

========
========
if(ownerTypeOfThis.isSubtype(element)){
return true;
}

========
========
if(t.isSubtype(element)){
return true;
}

========
========
if(currentClass.isSubtype(element)){
return true;
}

========
========
if(switchType.isSubtype(element)){
return true;
}

========
========
if(thatType.autoboxesTo().isSubtype(element)){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(thatType.isSubtype(element)){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(propType.isSubtype(element)){
return true;
}

========
========
if(altPropType.isSubtype(element)){
return true;
}

========
========
for(JSType element : union.alternates){
if(thisType.isSubtype(element)){
return false;
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType element : union.alternates){
if(element.isSubtype(element)){
return true;
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType element : union.alternates){
if(element.isSubtype(element)){
return false;
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.jstype.JSType,822
com.google.javascript.rhino.jstype.JSType,823
com.google.javascript.rhino.jstype.UnionType,257
========
if(t.isUnknownType()){
return false;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(t.getJSType().isUnknownType()){
return true;
}

========
========
for(JSType t : alternates){
if(t.isUnknownType()){
return false;
}
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType t : alternates){
if(t.isUnknownType()){
return true;
}
}
return true;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType t : alternates){
if(t.isUnknownType()){
return false;
}
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
for(JSType t : alternates){
if(t.isUnknownType()){
return false;
}
}
return true;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.jstype.UnionType,256
Find no block!
com.google.javascript.rhino.jstype.UnionType,252
com.google.javascript.rhino.jstype.UnionType,253
com.google.javascript.rhino.testing.BaseJSTypeTestCase,113
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
Node.newString(Token.NAME,"thisType").setOptionalArg(true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
super(registry,null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
super(registry,"enum{"+ALL_NATIVE_EXTERN_TYPES,null);
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
super(registry,ALL_NATIVE_EXTERN_TYPES,registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
Preconditions.checkArgument(ALL_NATIVE_EXTERN_TYPES!=null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
this.ERROR_TYPE=new InstanceObjectType(registry,this);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("multiline",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("multiline",NUMBER_OBJECT_FUNCTION_TYPE,true);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("multiline",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
ERROR_TYPE.defineDeclaredProperty("multiline",NUMBER_OBJECT_FUNCTION_TYPE,true);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
super(registry);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
this.NUMBER_OBJECT_FUNCTION_TYPE=NUMBER_OBJECT_FUNCTION_TYPE;
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
this.ALL_NATIVE_EXTERN_TYPES=name;
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
this.ALL_NATIVE_EXTERN_TYPES=sourceName;
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
super.setUp();
errorReporter=new TestErrorReporter(null,null);
this.ALL_NATIVE_EXTERN_TYPES=sourceString;
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
========
this.errorReporter=errorReporter;
super.setUp();
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
this.errorReporter=errorReporter;
super.setUp();
errorReporter=new TestErrorReporter(null,null);
this.ALL_NATIVE_EXTERN_TYPES=sourceName;
registry=new JSTypeRegistry(errorReporter);
initTypes();

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,114
com.google.javascript.rhino.testing.BaseJSTypeTestCase,115
com.google.javascript.rhino.testing.BaseJSTypeTestCase,116
com.google.javascript.rhino.testing.BaseJSTypeTestCase,117
Find no block!
com.google.javascript.rhino.testing.TestErrorReporter,67
Find no block!
com.google.javascript.rhino.testing.TestErrorReporter,64
Find no block!
com.google.javascript.rhino.testing.TestErrorReporter,65
Find no block!
com.google.javascript.rhino.testing.TestErrorReporter,68
========
errorsIndex=0;
this.errors=errors;
this.warnings=warnings;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
warningsIndex=0;
this.errors=errors;
this.warnings=warnings;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.testing.TestErrorReporter,69
com.google.javascript.rhino.testing.TestErrorReporter,70
Find no block!
com.google.javascript.rhino.jstype.UnionTypeBuilder,154
com.google.javascript.rhino.jstype.ProxyObjectType,62
========
super(registry);
this.referencedType=type;

========
========
setResolvedTypeInternal(referencedType);
super(registry);
this.referencedType=referencedType;

========
com.google.javascript.rhino.jstype.ProxyObjectType,63
com.google.javascript.rhino.jstype.ProxyObjectType,64
Find no block!
com.google.javascript.rhino.testing.BaseJSTypeTestCase,120
com.google.javascript.rhino.testing.BaseJSTypeTestCase,122
com.google.javascript.rhino.testing.BaseJSTypeTestCase,124
com.google.javascript.rhino.testing.BaseJSTypeTestCase,126
com.google.javascript.rhino.testing.BaseJSTypeTestCase,128
com.google.javascript.rhino.testing.BaseJSTypeTestCase,130
com.google.javascript.rhino.testing.BaseJSTypeTestCase,132
com.google.javascript.rhino.testing.BaseJSTypeTestCase,134
com.google.javascript.rhino.testing.BaseJSTypeTestCase,136
com.google.javascript.rhino.testing.BaseJSTypeTestCase,138
com.google.javascript.rhino.testing.BaseJSTypeTestCase,140
com.google.javascript.rhino.testing.BaseJSTypeTestCase,142
com.google.javascript.rhino.testing.BaseJSTypeTestCase,144
com.google.javascript.rhino.testing.BaseJSTypeTestCase,146
com.google.javascript.rhino.testing.BaseJSTypeTestCase,148
com.google.javascript.rhino.testing.BaseJSTypeTestCase,150
com.google.javascript.rhino.testing.BaseJSTypeTestCase,152
com.google.javascript.rhino.testing.BaseJSTypeTestCase,154
com.google.javascript.rhino.testing.BaseJSTypeTestCase,156
com.google.javascript.rhino.testing.BaseJSTypeTestCase,158
com.google.javascript.rhino.testing.BaseJSTypeTestCase,160
com.google.javascript.rhino.testing.BaseJSTypeTestCase,162
com.google.javascript.rhino.testing.BaseJSTypeTestCase,164
com.google.javascript.rhino.testing.BaseJSTypeTestCase,166
com.google.javascript.rhino.testing.BaseJSTypeTestCase,168
com.google.javascript.rhino.testing.BaseJSTypeTestCase,170
com.google.javascript.rhino.testing.BaseJSTypeTestCase,172
com.google.javascript.rhino.testing.BaseJSTypeTestCase,174
com.google.javascript.rhino.testing.BaseJSTypeTestCase,176
com.google.javascript.rhino.testing.BaseJSTypeTestCase,178
com.google.javascript.rhino.testing.BaseJSTypeTestCase,180
com.google.javascript.rhino.testing.BaseJSTypeTestCase,182
com.google.javascript.rhino.testing.BaseJSTypeTestCase,184
com.google.javascript.rhino.testing.BaseJSTypeTestCase,186
com.google.javascript.rhino.testing.BaseJSTypeTestCase,188
com.google.javascript.rhino.testing.BaseJSTypeTestCase,190
com.google.javascript.rhino.testing.BaseJSTypeTestCase,192
com.google.javascript.rhino.testing.BaseJSTypeTestCase,194
com.google.javascript.rhino.testing.BaseJSTypeTestCase,196
com.google.javascript.rhino.testing.BaseJSTypeTestCase,198
com.google.javascript.rhino.testing.BaseJSTypeTestCase,200
com.google.javascript.rhino.testing.BaseJSTypeTestCase,202
com.google.javascript.rhino.testing.BaseJSTypeTestCase,204
com.google.javascript.rhino.testing.BaseJSTypeTestCase,206
com.google.javascript.rhino.testing.BaseJSTypeTestCase,208
com.google.javascript.rhino.testing.BaseJSTypeTestCase,210
com.google.javascript.rhino.testing.BaseJSTypeTestCase,212
com.google.javascript.rhino.testing.BaseJSTypeTestCase,214
com.google.javascript.rhino.testing.BaseJSTypeTestCase,216
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addInvalidatingType(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
super.setUp();
addNativeProperties(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
errorReporter=new TestErrorReporter(null,null);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
registry=new JSTypeRegistry(errorReporter);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
Node.newString(Token.NAME,"thisType").setOptionalArg(true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ALL_NATIVE_EXTERN_TYPES="right side of comparison";
addNativeProperties(registry);

========
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE.defineDeclaredProperty("lastIndex",NUMBER_OBJECT_FUNCTION_TYPE,true);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
newParameterFromNode(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.POS :

addNativeProperties(registry);

========
========
case Token.NULL :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.BITNOT :

addNativeProperties(registry);

========
========
case Token.LP :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.STRING :

addNativeProperties(registry);

========
========
case Token.LT :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.TRUE :

addNativeProperties(registry);

========
========
case Token.GETELEM :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
case Token.ARRAYLIT :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
========
case Token.REGEXP :

URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,219
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addInvalidatingType(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
super.setUp();
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
errorReporter=new TestErrorReporter(null,null);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
registry=new JSTypeRegistry(errorReporter);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
errorReporter=new TestErrorReporter(null,null);
registry=new JSTypeRegistry(errorReporter);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ALL_NATIVE_EXTERN_TYPES="right side of comparison";
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
Node.newString(Token.NAME,"thisType").setOptionalArg(true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"hasOwnProperty",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"isPrototypeOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"propertyIsEnumerable",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUTCString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toGMTString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"charAt",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"charAt",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"charAt",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype(),"charAt",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toPrecision",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype(),"exec",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleLowerCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleUpperCase",NUMBER_OBJECT_FUNCTION_TYPE);
ERROR_TYPE.defineDeclaredProperty("length",NUMBER_OBJECT_FUNCTION_TYPE,true);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"concat",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"join",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"push",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"reverse",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"shift",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toDateString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"toLocaleString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"toLocaleTimeString",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"valueOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getFullYear",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMonth",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getDate",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCDate",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCDay",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"getSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"getUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setTime",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMilliseconds",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setSeconds",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"setMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCMinutes",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setHours",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"setUTCHours",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"search",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"slice",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"split",ERROR_TYPE);
addMethod(registry,ERROR_TYPE,"substring",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
newParameterFromNode(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,ERROR_TYPE,"indexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"lastIndexOf",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"localeCompare",NUMBER_OBJECT_FUNCTION_TYPE);
addMethod(registry,ERROR_TYPE,"match",registry.createNullableType(ERROR_TYPE));
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.POS :

addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.NULL :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.BITNOT :

addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.LP :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.STRING :

addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.LT :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
case Token.TRUE :

addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.GETELEM :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.ARRAYLIT :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
========
case Token.REGEXP :

VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addNativeProperties(registry);
NATIVE_PROPERTIES_COUNT=OBJECT_TYPE.getPropertiesCount();

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,221
com.google.javascript.rhino.testing.BaseJSTypeTestCase,222
Find no block!
com.google.javascript.rhino.jstype.PrototypeObjectType,118
========
if(implicitPrototype!=null){
return this.properties.size();
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(implicitPrototype==-1){
return this.properties.size();
}

========
========
if(implicitPrototype==null){
return implicitPrototype.hasProperty(className);
}

========
========
if(properties.get(className)!=null){
return true;
}
if(implicitPrototype==null){
return this.properties.size();
}

========
========
if(implicitPrototype==null){
return implicitPrototype.getPropertyType(className);
}

========
========
if(implicitPrototype==null){
return implicitPrototype.isPropertyTypeDeclared(className);
}

========
========
if(implicitPrototype==null){
return false;
return this.properties.size();
}

========
========
if(implicitPrototype==null){
return implicitPrototype.isPropertyTypeInferred(className);
}

========
========
if(e.tracer==null){
return this.properties.size();
}

========
========
if(tracer==null){
return this.properties.size();
}

========
========
if(inExterns)throw onSeledMutation();
if(implicitPrototype==null){
return this.properties.size();
}

========
========
if(LABEL==null){
return this.properties.size();
}

========
========
if(!typeA.hasProperty(property)){
localCount++;
}

========
========
if(!type.hasProperty(property)){
localCount++;
}

========
========
if(!objectType.hasProperty(property)){
localCount++;
}

========
========
if(!instance.hasProperty(property)){
localCount++;
}

========
========
for(String property : properties.keySet()){
if(!typeA.hasProperty(property)){
localCount++;
}
}

========
========
for(String property : properties.keySet()){
if(!reachingDef.hasProperty(property)){
localCount++;
}
}

========
========
type=this.getRestrictedWithoutNull(jsType);
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
type=this.getRestrictedWithoutUndefined(jsType);
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
if(implicitPrototype!=null){
return implicitPrototype.getPropertyType(property);
}
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
if(implicitPrototype!=null){
return implicitPrototype.isPropertyInExterns(property);
}
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
inExterns=foundInterfaceProperty||type.toObjectType().getConstructor().getPrototype().hasProperty(property);
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
for(String property : properties.keySet()){
if(!typesToSkip.hasProperty(property)){
localCount++;
}
}

========
========
for(String property : properties.keySet()){
if(!implicitPrototype.contains(property)){
localCount++;
}
}

========
========
properties.put(property,new Property(type,inferred,inExterns));
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return implicitPrototype.hasProperty(property);
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return implicitPrototype.getPropertyType(property);
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!typeA.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.getPropertyType(property).isUnknownType()&&!type.isUnknownType()){
if(implicitPrototype.isPropertyTypeDeclared(property)){
if(!implicitPrototype.getPropertyType(property).equals(type)){
return false;
}
}else {
if(!implicitPrototype.getPropertyType(property).isSubtype(type)){
return false;
}
}
}
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(objType==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
this.properties=Maps.newHashMap();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
this.className=className;
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
this.nativeType=nativeType;
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(type==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!instance.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(objSkipType==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(proto==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
for(T property : Sets.newHashSet()){
addTypeToSkip(newType);
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(objType!=null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
properties.put(property,new Property(type,inferred,inExterns));
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
Preconditions.checkState(isConstructor()||isInterface());
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
Preconditions.checkArgument(getPrototype().hasProperty(property));
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!reachingDef.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null||implicitPrototype.isNativeObjectType()){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitProto==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==info.initialValue){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
if(className==null)Kit.codeBug();
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitProto!=null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
boolean localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!typesToSkip.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.contains(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
mapping.sourceFile=sourceFile.toString();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
inExterns=foundInterfaceProperty||localCount;
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
if(!inExterns){
continue;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(objectType==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
trimCanidatesNotMeetingMinimumRequirements();
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
trimCanidatesUsingOnCost();
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(baseInterfaceObj==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(maybeSuperInstanceType==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
Preconditions.checkArgument(isConstructor()||isInterface());
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
if(inExterns)throw onSeledMutation();
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
result.liveSet.andNot(new BitSet(input.liveSet.size()));
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
result.liveSet.or(new BitSet(input.liveSet.size()));
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
if(N==0)throw onEmptyStackTopRead();
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
if(nodeA.rank==nodeB.rank){
nodeB.rank++;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
========
nodeB.size+=nodeA.size;
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return this.properties.size();
}
int localCount=0;
for(String property : properties.keySet()){
if(!implicitPrototype.hasProperty(property)){
localCount++;
}
}
return implicitPrototype.getPropertiesCount()+localCount;

========
com.google.javascript.rhino.jstype.PrototypeObjectType,119
com.google.javascript.rhino.jstype.PrototypeObjectType,120
com.google.javascript.rhino.jstype.PrototypeObjectType,122
com.google.javascript.rhino.jstype.PrototypeObjectType,123
com.google.javascript.rhino.jstype.PrototypeObjectType,124
com.google.javascript.rhino.jstype.PrototypeObjectType,125
com.google.javascript.rhino.jstype.PrototypeObjectType,127
Find no block!
com.google.javascript.rhino.jstype.PrototypeObjectType,128
com.google.javascript.rhino.jstype.PrototypeObjectType,140
========
if(properties.get(r.namespace)!=null){
return true;
}

========
========
if(properties.get(propertyName)==null){
return true;
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(externMethods.get(propertyName)!=null){
return true;
}

========
========
if(properties.get(propertyName)!=Token.NEW){
return true;
}

========
========
if(!inExterns&&!inExterns){
return ;
}
if(properties.get(propertyName)!=null){
return true;
}

========
========
if(objectType!=null){
return implicitPrototype.hasProperty(propertyName);
}

========
========
if(implicitPrototype!=null){
return implicitPrototype.getPropertyType(propertyName);
}

========
========
if(implicitPrototype==null){
return implicitPrototype.hasProperty(propertyName);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(implicitPrototype!=null){
return this.properties.size();
}

========
========
if(implicitPrototype!=null){
return implicitPrototype.isPropertyTypeDeclared(propertyName);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(implicitPrototype!=null){
return implicitPrototype.isPropertyTypeInferred(propertyName);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(implicitPrototype!=null&&!implicitPrototype.isUnknownType()&&implicitPrototype.hasProperty(propertyName)){
return implicitPrototype.hasProperty(propertyName);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(objType!=null){
return implicitPrototype.hasProperty(propertyName);
}

========
========
if(implicitPrototype!=null&&!implicitPrototype.isNativeObjectType()){
return implicitPrototype.hasProperty(propertyName);
}

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(autoboxObjType!=null){
return implicitPrototype.hasProperty(propertyName);
}

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.getPropertyType(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return this.properties.size();
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(objectType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return true;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null&&implicitPrototype.getImplicitPrototype()!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(objType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(proto!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(instanceType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(objSkipType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype==null){
return implicitPrototype.hasProperty(propertyName);
}
return true;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(autoboxObjType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null&&!implicitPrototype.isNativeObjectType()){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
buildCharacterMappings(info.mappings.values());
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(r.namespace)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(record.name.isEmpty()){
str="<anonymous>";
}
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return false;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)==null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitProto!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(type.getOwnPropertyJSDocInfo(propertyName)!=null&&info.isDeprecated()){
if(info.getDeprecationReason()!=null){
return info.getDeprecationReason();
}
return "";
}
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=this.isFunctionType()?getImplicitPrototype():null;
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=-1){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(!inferred){
properties.put(propertyName,type);
}
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(!propertyName.equals(className)){
throw new RuntimeException(passName+" is not running.");
}
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(symbolMap!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
properties.put(propertyName,new Property(type,inferred,inExterns));
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(maybeSuperInstanceType!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(properties.get(propertyName)!=null){
return true;
}
Preconditions.checkArgument(isConstructor()||isInterface());
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(!inExterns&&!inExterns){
return ;
}
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
========
if(!inExterns){
return ;
}
if(properties.get(propertyName)!=null){
return true;
}
ObjectType implicitPrototype=getImplicitPrototype();
if(implicitPrototype!=null){
return implicitPrototype.hasProperty(propertyName);
}
return false;

========
com.google.javascript.rhino.jstype.PrototypeObjectType,136
com.google.javascript.rhino.jstype.PrototypeObjectType,137
com.google.javascript.rhino.jstype.PrototypeObjectType,133
com.google.javascript.rhino.testing.BaseJSTypeTestCase,226
========
JSType booleanType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
if(booleanType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return that;
}else if(functionInstance.equals(this)){
return this;
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
if(booleanType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}else if(functionInstance.equals(this)){
return that;
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType booleanType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
JSType booleanType=registry.getNativeType(NO_OBJECT_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
JSType booleanType=typeRegistry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
JSType booleanType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType booleanType=typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
Preconditions.checkNotNull(ALL_NATIVE_EXTERN_TYPES);
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
booleanType=origType==null?getNativeType(UNKNOWN_TYPE):origType;
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
numberType=(nameType==null)?getNativeType(UNKNOWN_TYPE):nameType;
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(UNKNOWN_TYPE);

========
========
JSType booleanType=registry.getNativeType(JSTypeNative.GLOBAL_THIS);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if((PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS).isUnknownType()){
ObjectType ObjectType.cast(booleanType)=ObjectType.cast(booleanType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
if(ALL_NATIVE_EXTERN_TYPES!=null&&booleanType.restrictByNotNullOrUndefined().isTemplateType()){
if(numberType){
reportError(TEMPLATE_TYPE_DUPLICATED,ALL_NATIVE_EXTERN_TYPES);
}
foundTemplateType=true;
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
if(isNative()){
return false;
}
JSType booleanType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
========
JSType booleanType=registry.getNativeType(JSTypeNative.ARRAY_TYPE);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.testing.BaseJSTypeTestCase,227
com.google.javascript.rhino.testing.BaseJSTypeTestCase,228
========
JSType numberType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.STRING_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
if(numberType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return that;
}else if(functionInstance.equals(this)){
return this;
}
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
if(numberType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}else if(functionInstance.equals(this)){
return that;
}
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType numberType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
JSType numberType=typeRegistry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
JSType numberType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType numberType=registry.getNativeType(NO_OBJECT_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
Preconditions.checkNotNull(ALL_NATIVE_EXTERN_TYPES);
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
numberType=origType==null?getNativeType(UNKNOWN_TYPE):origType;
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
stringType=(nameType==null)?getNativeType(UNKNOWN_TYPE):nameType;
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(UNKNOWN_TYPE);

========
========
JSType numberType=registry.getNativeType(JSTypeNative.GLOBAL_THIS);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if((PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS).isUnknownType()){
ObjectType ObjectType.cast(numberType)=ObjectType.cast(numberType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
if(isNative()){
return false;
}
JSType numberType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
========
JSType numberType=registry.getNativeType(JSTypeNative.ARRAY_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.testing.BaseJSTypeTestCase,229
========
JSType stringType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType stringType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.NUMBER_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",ERROR_TYPE);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
if(stringType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return that;
}else if(functionInstance.equals(this)){
return this;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
if(stringType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}else if(functionInstance.equals(this)){
return that;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType stringType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);

========
========
if(isNative()){
return false;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=typeRegistry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType stringType=registry.getNativeType(JSTypeNative.GLOBAL_THIS);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if((PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS).isUnknownType()){
ObjectType objectType=ObjectType.cast(stringType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(NO_OBJECT_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
if(objectType!=null){
return implicitPrototype.getPropertyType(ALL_NATIVE_EXTERN_TYPES);
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
Preconditions.checkNotNull(ALL_NATIVE_EXTERN_TYPES);
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
numberType=origType==null?getNativeType(UNKNOWN_TYPE):origType;
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
unknownType=(nameType==null)?getNativeType(UNKNOWN_TYPE):nameType;
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(stringType instanceof FunctionType){
objectType=(FunctionType)rightType;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);

========
========
if(ERROR_TYPE==null){
return ;
}
JSType stringType=registry.getNativeType(JSTypeNative.STRING_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
========
JSType stringType=registry.getNativeType(JSTypeNative.ARRAY_TYPE);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
com.google.javascript.rhino.testing.BaseJSTypeTestCase,231
========
JSType unknownType=registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",objectType);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(isNative()){
return false;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(unknownType instanceof FunctionType){
arrayType=(FunctionType)rightType;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(unknownType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return that;
}else if(functionInstance.equals(this)){
return this;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(unknownType.equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}else if(functionInstance.equals(this)){
return that;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(equals(NUMBER_OBJECT_FUNCTION_TYPE)){
return this;
}
JSType unknownType=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.GLOBAL_THIS);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if((PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS).isUnknownType()){
ObjectType arrayType=ObjectType.cast(unknownType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(NO_OBJECT_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(arrayType!=null){
return implicitPrototype.getPropertyType(ALL_NATIVE_EXTERN_TYPES);
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
Preconditions.checkNotNull(ALL_NATIVE_EXTERN_TYPES);
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
numberType=origType==null?getNativeType(UNKNOWN_TYPE):origType;
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
numberType=(nameType==null)?getNativeType(UNKNOWN_TYPE):nameType;
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
if(ALL_NATIVE_EXTERN_TYPES!=null&&unknownType.restrictByNotNullOrUndefined().isTemplateType()){
if(arrayType){
reportError(TEMPLATE_TYPE_DUPLICATED,ALL_NATIVE_EXTERN_TYPES);
}
foundTemplateType=true;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
========
JSType unknownType=registry.getNativeType(JSTypeNative.ARRAY_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(objectType==null){
return ;
}
JSType unknownType=registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,233
========
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectType,"constructor",objectType);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
addMethod(registry,objectType,"toString",stringType);
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
if(isNative()){
return false;
}
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
arrayType=(FunctionType)rightType;
}
ObjectType objectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
========
ObjectType objectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,235
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,regexpType,"constructor",objectType);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
addMethod(registry,regexpType,"toString",stringType);
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType arrayType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
if(isNative()){
return false;
}
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
ObjectType arrayType=typeRegistry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
arrayType=(FunctionType)rightType;
}
ObjectType arrayType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
========
ObjectType arrayType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,237
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,regexpType,"constructor",objectType);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
addMethod(registry,regexpType,"toString",stringType);
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType dateType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.DATE_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
if(isNative()){
return false;
}
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
ObjectType dateType=typeRegistry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
dateType=(FunctionType)rightType;
}
ObjectType dateType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
========
ObjectType dateType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,239
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,regexpType,"constructor",objectType);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
addMethod(registry,regexpType,"toString",stringType);
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType regexpType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
if(isNative()){
return false;
}
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
ObjectType regexpType=typeRegistry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
regexpType=(FunctionType)rightType;
}
ObjectType regexpType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
========
ObjectType regexpType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,241
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.ARRAY_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.DATE_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,booleanObjectType,"constructor",objectType);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
addMethod(registry,booleanObjectType,"toString",stringType);
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType booleanObjectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
if(isNative()){
return false;
}
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
ObjectType booleanObjectType=typeRegistry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
numberObjectType=(FunctionType)rightType;
}
ObjectType booleanObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
========
ObjectType booleanObjectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,243
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.REGEXP_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
if(isNative()){
return false;
}
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"constructor",booleanObjectType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"toString",stringType);
addMethod(registry,registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype(),"valueOf",booleanType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("multiline",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",stringObjectType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
addMethod(registry,objectPrototype,"toString",stringType);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("multiline",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("multiline",booleanType,true);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("multiline",booleanType,true);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectType,"valueOf",unknownType);
addMethod(registry,objectType,"hasOwnProperty",booleanType);
addMethod(registry,objectType,"isPrototypeOf",booleanType);
addMethod(registry,objectType,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,dateType,"setFullYear",numberType);
addMethod(registry,dateType,"setUTCFullYear",numberType);
addMethod(registry,dateType,"toUTCString",stringType);
addMethod(registry,dateType,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType numberObjectType=typeRegistry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
numberObjectType=(FunctionType)rightType;
}
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
OBJECT_FUNCTION_TYPE.defineDeclaredProperty("prototype",TOP_LEVEL_PROTOTYPE,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE,OBJECT_FUNCTION_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.OBJECT_PROTOTYPE,OBJECT_PROTOTYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE,FUNCTION_FUNCTION_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE,FUNCTION_PROTOTYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE,BOOLEAN_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE,DATE_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE,REGEXP_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.ARRAY_TYPE,ARRAY_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,BOOLEAN_OBJECT_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.URI_ERROR_TYPE,URI_ERROR_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE,NUMBER_OBJECT_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.REGEXP_TYPE,REGEXP_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE,STRING_OBJECT_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
if(numberObjectType==null){
return false;
}
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
if(numberObjectType.isUnknownType()){
return true;
}
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE,ARRAY_FUNCTION_TYPE);
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
Preconditions.checkArgument(isConstructor()||isInterface());
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
========
if(numberObjectType==null){
return null;
}
ObjectType numberObjectType=registry.getNativeObjectType(JSTypeNative.NUMBER_OBJECT_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,246
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.BOOLEAN_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"propertyIsEnumerable",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"setUTCFullYear",numberType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,objectPrototype,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
regexpType.defineDeclaredProperty("lastIndex",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"concat",objectType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"join",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toDateString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleTimeString",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"valueOf",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getTime",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getFullYear",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getMonth",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCMonth",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getDate",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCDate",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCDay",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getHours",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCHours",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getMinutes",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getSeconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCSeconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getMilliseconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setTime",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setMilliseconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setSeconds",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setMinutes",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setUTCMinutes",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setHours",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"setUTCHours",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"search",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"slice",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"split",objectType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"substring",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"exec",registry.createNullableType(arrayType));
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
addMethod(registry,numberObjectType,"toPrecision",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"indexOf",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"lastIndexOf",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"localeCompare",numberType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toUpperCase",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
stringObjectType.defineDeclaredProperty("length",numberType,true);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=this.isFunctionType()?registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE):registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(isNative()){
return false;
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
objectPrototype=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
super.setUp();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
errorReporter=new TestErrorReporter(null,null);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
registry=new JSTypeRegistry(errorReporter);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
Node.newString(Token.NAME,"thisType").setOptionalArg(true);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=typeRegistry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
if(numberType instanceof FunctionType){
stringObjectType=(FunctionType)rightType;
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
OBJECT_FUNCTION_TYPE.defineDeclaredProperty("prototype",TOP_LEVEL_PROTOTYPE,true);
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.OBJECT_PROTOTYPE,OBJECT_PROTOTYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE,FUNCTION_FUNCTION_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE,FUNCTION_PROTOTYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE,DATE_FUNCTION_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
ObjectType stringObjectType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,BOOLEAN_OBJECT_FUNCTION_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE,NUMBER_OBJECT_FUNCTION_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE,STRING_OBJECT_FUNCTION_TYPE);
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(stringObjectType==null){
return false;
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(stringObjectType.isUnknownType()){
return true;
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(!OBJECT_FUNCTION_TYPE.hasEqualCallType(OBJECT_FUNCTION_TYPE)){
reportWarning(TYPE_REDEFINITION,ALL_NATIVE_EXTERN_TYPES,fnType.toString(),existingFn.toString());
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
Preconditions.checkArgument(isConstructor()||isInterface());
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
========
if(stringObjectType==null){
return null;
}
ObjectType stringObjectType=registry.getNativeObjectType(JSTypeNative.STRING_OBJECT_TYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,249
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"concat",objectType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"join",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"toDateString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getTime",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"split",objectType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"substring",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"isPrototypeOf",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"propertyIsEnumerable",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.ARRAY_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMonth",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getDate",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getUTCDate",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getHours",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getMinutes",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getUTCSeconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setMilliseconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setSeconds",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setUTCMinutes",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setHours",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"setUTCHours",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toUTCString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"toGMTString",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);
addMethod(registry,objectPrototype,"toString",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",numberType);
addMethod(registry,objectPrototype,"toString",numberType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"valueOf",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"lastIndexOf",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"exec",registry.createNullableType(arrayType));
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"constructor",objectType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.REGEXP_FUNCTION_TYPE).getPrototype();
addMethod(registry,numberObjectType,"toExponential",stringType);
addMethod(registry,numberObjectType,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toUpperCase",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
stringObjectType.defineDeclaredProperty("length",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",numberType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("global",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("global",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("global",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("global",booleanType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("global",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("global",booleanType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("global",booleanType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
regexpType.defineDeclaredProperty("global",booleanType,true);
regexpType.defineDeclaredProperty("ignoreCase",booleanType,true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
super.setUp();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
errorReporter=new TestErrorReporter(null,null);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
registry=new JSTypeRegistry(errorReporter);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
objectPrototype=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
Node.newString(Token.NAME,"thisType").setOptionalArg(true);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
OBJECT_FUNCTION_TYPE.defineDeclaredProperty("prototype",TOP_LEVEL_PROTOTYPE,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
========
registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE,FUNCTION_PROTOTYPE);
ObjectType objectPrototype=registry.getNativeFunctionType(JSTypeNative.OBJECT_FUNCTION_TYPE).getPrototype();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,250
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",objectType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",numberType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",numberType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",numberType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",numberType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",objectType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",objectType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",numberType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(objectType));
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",numberType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",numberType,true);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",numberType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",numberType,true);
addMethod(registry,objectPrototype,"constructor",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"constructor",regexpType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
objectType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
objectType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
errorReporter=new TestErrorReporter(null,null);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
registry=new JSTypeRegistry(errorReporter);
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
stringType=originalType==null?type:originalType.getLeastSupertype(type);
}
addMethod(registry,objectPrototype,"constructor",objectType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,251
========
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toString",objectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toString",dateType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",stringType);
addMethod(registry,objectPrototype,"getFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toString",numberObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"toString",stringObjectType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",stringType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",stringType);
addMethod(registry,objectPrototype,"getUTCDate",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",stringType);
addMethod(registry,objectPrototype,"getMinutes",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",stringType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",stringType);
addMethod(registry,objectPrototype,"setSeconds",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",stringType);
addMethod(registry,objectPrototype,"setUTCHours",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",stringType);
addMethod(registry,objectPrototype,"setFullYear",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",stringType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toString",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",unknownType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",unknownType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",unknownType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",unknownType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",regexpType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toString",regexpType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toString",regexpType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toString",regexpType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",stringType,true);
addMethod(registry,objectPrototype,"toString",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
errorReporter=new TestErrorReporter(null,null);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
registry=new JSTypeRegistry(errorReporter);
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
stringType=originalType==null?type:originalType.getLeastSupertype(type);
}
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,252
========
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",objectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",unknownType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",dateType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",numberObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"toFixed",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringObjectType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",stringType);
addMethod(registry,objectPrototype,"charCodeAt",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"split",arrayType);
addMethod(registry,objectPrototype,"substring",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",booleanType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"localeCompare",booleanType);
addMethod(registry,objectPrototype,"match",registry.createNullableType(arrayType));
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleUpperCase",stringType);
stringObjectType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",stringType);
addMethod(registry,objectPrototype,"hasOwnProperty",stringType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",regexpType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
addMethod(registry,objectPrototype,"toLocaleString",regexpType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toLocaleString",regexpType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toString",stringType);
regexpType.defineDeclaredProperty("source",stringType,true);
addMethod(registry,objectPrototype,"toLocaleString",regexpType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
arrayType.defineDeclaredProperty("length",booleanType,true);
addMethod(registry,objectPrototype,"toLocaleString",arrayType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
UNKNOWN_TYPE=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
URI_ERROR_FUNCTION_TYPE=registry.getNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
URI_ERROR_TYPE=registry.getNativeObjectType(JSTypeNative.URI_ERROR_TYPE);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
VOID_TYPE=registry.getNativeType(JSTypeNative.VOID_TYPE);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
objectType=registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
super.setUp();
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
errorReporter=new TestErrorReporter(null,null);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
registry=new JSTypeRegistry(errorReporter);
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
========
if(hasProperty(ALL_NATIVE_EXTERN_TYPES)){
JSType getPropertyType(ALL_NATIVE_EXTERN_TYPES)=getPropertyType(propertyName);
NUMBER_OBJECT_FUNCTION_TYPE=originalType==null?type:originalType.getLeastSupertype(type);
}
addMethod(registry,objectPrototype,"toLocaleString",stringType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);

========
com.google.javascript.rhino.testing.BaseJSTypeTestCase,253
========
addMethod(registry,objectPrototype,"valueOf",objectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"valueOf",objectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"valueOf",objectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"valueOf",objectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"shift",booleanType);
addMethod(registry,objectPrototype,"slice",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",arrayType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"join",booleanType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"concat",arrayType);
addMethod(registry,objectPrototype,"join",booleanType);
addMethod(registry,objectPrototype,"valueOf",arrayType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",dateType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",booleanType);
addMethod(registry,objectPrototype,"valueOf",dateType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",dateType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toTimeString",booleanType);
addMethod(registry,objectPrototype,"toLocaleString",booleanType);
addMethod(registry,objectPrototype,"valueOf",dateType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getTime",booleanType);
addMethod(registry,objectPrototype,"getFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",unknownType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getDate",booleanType);
addMethod(registry,objectPrototype,"getUTCDate",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCHours",booleanType);
addMethod(registry,objectPrototype,"getMinutes",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"getMilliseconds",booleanType);
addMethod(registry,objectPrototype,"getUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMilliseconds",booleanType);
addMethod(registry,objectPrototype,"setSeconds",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setHours",booleanType);
addMethod(registry,objectPrototype,"setUTCHours",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"setUTCMonth",booleanType);
addMethod(registry,objectPrototype,"setFullYear",booleanType);
addMethod(registry,objectPrototype,"valueOf",booleanType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",numberObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"valueOf",numberObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"toFixed",booleanType);
addMethod(registry,objectPrototype,"valueOf",numberObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"toFixed",booleanType);
addMethod(registry,objectPrototype,"valueOf",numberObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"valueOf",stringObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",booleanType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"valueOf",unknownType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charAt",booleanType);
addMethod(registry,objectPrototype,"valueOf",stringObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
TESTING : com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
========
addMethod(registry,objectPrototype,"charCodeAt",unknownType);
addMethod(registry,objectPrototype,"valueOf",stringObjectType);
addMethod(registry,objectPrototype,"hasOwnProperty",booleanType);
addMethod(registry,objectPrototype,"isPrototypeOf",booleanType);

========
^C
real	213m26.900s
user	328m39.194s
sys	31m25.206s
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104^C
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure
apiarty> cd closure/
apiarty> ls
closure_104_buggy
apiarty> mkdir closure_2_buggy
apiarty> defects4j checkout -p Closure -v 2b -w .
Cannot open config file (/SimFix/sbfl/projects/closure/.defects4j.config): No such file or directory
Directory exists but is not a previously used working directory: /SimFix/sbfl/projects/closure at /avatar/AVATAR/D4J/defects4j/framework/core/Vcs.pm line 285.
Compilation failed in require at /avatar/AVATAR/D4J/defects4j/framework/bin/defects4j line 195.
apiarty> ls
closure_104_buggy  closure_2_buggy
apiarty> cd closure_2_buggy/
apiarty> defects4j checkout -p Closure -v 2b -w .
Checking out d1cfe679 to /SimFix/sbfl/projects/closure/closure_2_buggy..... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff d1cfe679:61095090..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-2b...................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeCheckTest::testBadInterfaceExtendsNonExistentInterfaces
apiarty> ls
CONTRIBUTORS  README	 build	    closure-compiler.pom  defects4j.build.properties  failing_tests  javadoc  src   tools
COPYING       all_tests  build.xml  contrib		  externs		      gen	     lib      test
apiarty> cd ..
apiarty> ls
closure_104_buggy  closure_2_buggy
apiarty> cd ..
apiarty> ls
closure
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Closure 2 projects/closure/closure_2_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Closure/2/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/2/spectra'
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> cd /SimFix/sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Closure 2 projects/closure/closure_2_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Closure/2/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/2/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure
apiarty> closure/
bash: closure/: Is a directory
apiarty> cd closure/
apiarty> ls
closure_104_buggy  closure_2_buggy
apiarty> mkdir closure_83_buggy
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd closure_83_buggy
apiarty> ls
apiarty> defects4j checkout -p Closure -v 83b -w .
Checking out 43c245f0 to /SimFix/sbfl/projects/closure/closure_83_buggy.... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 43c245f0:840ddca5..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-83b..................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
apiarty> ls
CONTRIBUTORS  README	 build	    closure-compiler.pom  defects4j.build.properties  failing_tests  javadoc  src   tools
COPYING       all_tests  build.xml  contrib		  externs		      gen	     lib      test
apiarty> cd ..
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd ..
apiarty> ls
closure
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=83
/SimFix/sbfl/projects/
=================================================
Project : closure_83	start : 20/12/09 13:37

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : Type and JSType
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : Name and String
Field type inconsistancy 'THIS' with types : Token and int
TIMEOUT : 18000000
com.google.javascript.jscomp.CommandLineRunner,432
Find no block!
com.google.javascript.jscomp.CommandLineRunner,433
========
TRUES=extractList(config.getString("jsdoc.annotations"));
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
System.err.println();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
varsToDeclareInExterns.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.add("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
props.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=false;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(debug&&!isConfigValid){
if(version){
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+output_wrapper);
}
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,configResource);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).flush();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).close();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
new FileOutputStream(configResource).flush();
new FileOutputStream(configResource).close();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.valueOf("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
cssNames.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
parts[i]=output_wrapper;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkState("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
quotedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externPropertyNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reservedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
callNodeToParentMap.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
symbolGraph.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add("get ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
add("set ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
stringNodesToRename.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
countPropertyOccurrence(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
consumeToken();
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
type=getNativeType(UNKNOWN_TYPE);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
globals.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
summary_detail_level++;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkNotNull("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=isConfigValid;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
expectedConst=false;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(null.isConstant()){
expectedConst=true;
}else {
expectedConst=false;
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
expectedConst=false;
if(null.isConstant()){
expectedConst=true;
}else {
expectedConst=false;
}

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
mustMatchToken(Token.LP,"msg.no.paren.catch");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
mustMatchToken(Token.NAME,"msg.bad.catchcond");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
reportCodeChange();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.append("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
replacement=p.newName;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkArgument("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
unknownNameUse.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
config.setUnknown(true);
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
allInstantiatedTypes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
Node.newString(null).copyInformationFrom(config);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
Node.newString(null).copyInformationFrom(config);
reportCodeChange();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

Preconditions.checkState(summary_detail_level==2,"Bad GETPROP: expected 2 children, but got %s",childCount);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(isConfigValid){
add(")");
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
add(".");
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externMethodsWithoutSignatures.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethods.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

Preconditions.checkArgument(output_wrapper!=null&&output_wrapper!=null);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reads.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

prop.readCount++;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
prop.writes=null;
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setDesc("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setIsHidden("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(!config.isDeclared(output_wrapper,false)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
defineSlot(stub.node,stub.node.getParent(),processedArgs.getNativeObjectType(UNKNOWN_TYPE),true);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
writes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

prop.writeCount++;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
prop.reads=null;
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
renameMap.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
token=next();
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
typesToSkip.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
TRUES.remove(output_wrapper);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(!isPrototypeMethodDefinition(defSite.node)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
rewriteDefinition(defSite.node,getRewrittenMethodName(defSite.node.getLastChild().getString()));
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
Preconditions.checkState(args.getType()==Token.LP);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(!processedArgs.equals(configResource)){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
compiler.flush();
}

========
========
if(output_wrapper.length()==0){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.GETPROP :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
compiler.flush();
}

========
========
case Token.THIS :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
if(config!=TernaryValue.UNKNOWN){
int (config.toBoolean(true))?Token.TRUE:Token.FALSE=(config.toBoolean(true))?Token.TRUE:Token.FALSE;
reportCodeChange();
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
config.setJSType(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(match(JsDocToken.LT)){
next();
skipEOLs();
Node parseTypeExpressionList(next())=parseTypeExpressionList(next());
if(memberType!=null){
config.addChildToFront(memberType);
skipEOLs();
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}
next();
}
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.FUNCTION :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
default :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getNext().getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getNext().getQualifiedName()==null){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getNext().getNext().getType()!=Token.STRING){
return ;
}
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethodsWithoutSignatures.flush();
}

========
========
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

case Token.GETPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.OBJECTLIT :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.CALL :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.ADD :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.NULL :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.NUMBER :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.SET :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case VAR_DECL_SIMPLE_ASSIGNMENT :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.CATCH :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.NEG :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.DELPROP :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.SHEQ :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.SHNE :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.ASSIGN :

isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
com.google.javascript.jscomp.CommandLineRunner,434
com.google.javascript.jscomp.CommandLineRunner,447
========
if(!isConfigValid&&flags.display_help){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(ref.module!=declaration.module){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}

========
========
Compiler.setLoggingLevel(Level.OFF);
if(!isConfigValid||flags.display_help){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!isConfigValid||d.module){
isConfigValid=false;
parser.printUsage(err);
}else {
getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party?new DefaultCodingConvention():new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
}

========
com.google.javascript.jscomp.CommandLineRunner,448
com.google.javascript.jscomp.CommandLineRunner,355
com.google.javascript.jscomp.CommandLineRunner,334
========
if(stripNameSuffixes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(stripNamePrefixes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externMethods.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(nonMethodProperties.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(goodFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(implementedInterfaces.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(reservedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(tryNodesContainingReturnStatements.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(variable_map_output_file)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
TRUES.add(variable_map_output_file);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
TRUES.add(variable_map_output_file);
setter.addValue(true);
return 0;
}

========
========
if(unflowableVarNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externMethodsWithoutSignatures.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(namesNeedingTemps.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(badFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(phNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(referencedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(usedPlaceholders.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(depends.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(parameters.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(assertionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externedNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
if(!getSubTypes(lowerParam,setter)){
return false;
}
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
if(!getSubTypes(lowerParam,setter)){
return false;
}
setter.addValue(true);
return 0;
}

========
========
if(noSideEffectFunctionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.set(false);
}else {
setter.set(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.set(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.set(true);
return 0;
}

========
========
if(taintedLocals.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(suppressionNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.checkNotNull(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
countPropertyOccurrence(lowerParam);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
countPropertyOccurrence(lowerParam);
setter.addValue(true);
return 0;
}

========
========
if(REGEXP_METHODS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(varsToDeclareInExterns.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(dirtySymbols.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(globalNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(File.separator)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
Preconditions.checkState(!setter.isEmpty());
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
Preconditions.checkState(setter.contains(lowerParam));
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(modifiesAnnotationKeywords.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(prototypeObjLits.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externalNoShadowVariableNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
continue;
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(names.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.isFunctionObjectCallOrApply(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(a.oldName);
setter.addValue(true);
return 0;
}

========
========
if(reservedNames.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(ALLOWED_DIRECTIVES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.setDirectives(setter.getDirectives());
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.setDirectives(setter.getDirectives());

setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(namesToAlias.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.add(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(true);
return 0;
}

========
========
if(oldName.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externNames.contains(a.oldName)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(typesToSkip.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(whitelist.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(nonNullableTypeNames.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
if(debug||!debug||!debug){
return debug;
}
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
if(debug||!debug||!debug){
return debug;
}
setter.addValue(true);
return 0;
}

========
========
if(stripNameSuffixes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(stripNamePrefixes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externMethods.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(nonMethodProperties.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(goodFunctionNodes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(badFunctionNodes.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
if(setter.contains(lowerParam)){
return ;
}
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
TRUES.add(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(implementedInterfaces.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(reservedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(tryNodesContainingReturnStatements.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(unflowableVarNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externMethodsWithoutSignatures.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(namesNeedingTemps.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(badFunctionNodes.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(phNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(referencedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(usedPlaceholders.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(depends.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(parameters.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(assertionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externedNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.set(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(noSideEffectFunctionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(taintedLocals.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(module)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
countPropertyOccurrence(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(suppressionNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.checkNotNull(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(dirtySymbols.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(REGEXP_METHODS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(STRING_REGEXP_METHODS.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(globalNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(File.separator)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(varsToDeclareInExterns.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.isFunction(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(modifiesAnnotationKeywords.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.add(true);
}else if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.add(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.add(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.add(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.add(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.add(true);
return 0;
}

========
========
if(names.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(prototypeObjLits.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externalNoShadowVariableNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
continue;
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(reservedNames.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(oldName.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(externNames.contains(a.oldName)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
Preconditions.checkState(!setter.isEmpty());
if(TRUES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(namesToAlias.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.isFunctionObjectCallOrApply(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(typesToSkip.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(ALLOWED_DIRECTIVES.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.setDirectives(setter.getDirectives());
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
setter.getDirectives().add(lowerParam);
setter.setDirectives(setter.getDirectives());

setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(whitelist.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(TRUES.contains(lowerParam)){
if(debug||!debug||!debug){
return debug;
}
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
========
if(nonNullableTypeNames.contains(lowerParam)){
setter.addValue(true);
}else if(FALSES.contains(lowerParam)){
setter.addValue(false);
}else {
setter.addValue(true);
return 0;
}

========
com.google.javascript.jscomp.AbstractCommandLineRunner,1188
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1189
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1197
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1208
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1219
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1227
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1235
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1247
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1258
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1269
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1279
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1295
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1306
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1317
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1328
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1342
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1353
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1363
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1377
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1388
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1399
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1413
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1425
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1439
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1450
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1461
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1472
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1483
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1494
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1509
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1523
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1533
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1543
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1554
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1566
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,113
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,98
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,99
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,100
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,101
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,102
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,107
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,114
UNKNOWN ASTNode type : catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

UNKNOWN ASTNode type : catch (AbstractCommandLineRunner.FlagUsageException e) {
  System.err.println(e.getMessage());
  result=-1;
}

========
outputCharset=options.outputCharset=getOutputCharset();
this.config=new CommandLineConfig();
this.out=out;
this.err=err;

========
========
inputCharset=getInputCharset();
this.config=new CommandLineConfig();
this.out=out;
this.err=err;

========
========
this.config=new CommandLineConfig();
this.out=sourceMapDetailLevel;
this.err=err;

========
========
this.config=new CommandLineConfig();
this.out=out;
this.err=sourceMapFormat;

========
========
this.config=new CommandLineConfig();
this.out=out;
this.err=jsOutputFile;

========
com.google.javascript.jscomp.AbstractCommandLineRunner,115
com.google.javascript.jscomp.AbstractCommandLineRunner,116
com.google.javascript.jscomp.AbstractCommandLineRunner,117
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1134
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1135
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1136
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1137
Find no block!
com.google.javascript.jscomp.AbstractCommandLineRunner,1138
Find no block!
com.google.javascript.jscomp.CommandLineRunner,83
Find no block!
com.google.javascript.jscomp.CommandLineRunner,84
Find no block!
com.google.javascript.jscomp.CommandLineRunner,89
Find no block!
com.google.javascript.jscomp.CommandLineRunner,94
Find no block!
com.google.javascript.jscomp.CommandLineRunner,100
Find no block!
com.google.javascript.jscomp.CommandLineRunner,106
Find no block!
com.google.javascript.jscomp.CommandLineRunner,112
Find no block!
com.google.javascript.jscomp.CommandLineRunner,119
Find no block!
com.google.javascript.jscomp.CommandLineRunner,125
Find no block!
com.google.javascript.jscomp.CommandLineRunner,130
Find no block!
com.google.javascript.jscomp.CommandLineRunner,134
Find no block!
com.google.javascript.jscomp.CommandLineRunner,139
Find no block!
com.google.javascript.jscomp.CommandLineRunner,148
Find no block!
com.google.javascript.jscomp.CommandLineRunner,153
Find no block!
com.google.javascript.jscomp.CommandLineRunner,158
Find no block!
com.google.javascript.jscomp.CommandLineRunner,163
Find no block!
com.google.javascript.jscomp.CommandLineRunner,172
Find no block!
com.google.javascript.jscomp.CommandLineRunner,177
Find no block!
com.google.javascript.jscomp.CommandLineRunner,184
Find no block!
com.google.javascript.jscomp.CommandLineRunner,192
Find no block!
com.google.javascript.jscomp.CommandLineRunner,197
Find no block!
com.google.javascript.jscomp.CommandLineRunner,202
Find no block!
com.google.javascript.jscomp.CommandLineRunner,209
Find no block!
com.google.javascript.jscomp.CommandLineRunner,215
Find no block!
com.google.javascript.jscomp.CommandLineRunner,223
Find no block!
com.google.javascript.jscomp.CommandLineRunner,228
Find no block!
com.google.javascript.jscomp.CommandLineRunner,233
Find no block!
com.google.javascript.jscomp.CommandLineRunner,238
Find no block!
com.google.javascript.jscomp.CommandLineRunner,247
Find no block!
com.google.javascript.jscomp.CommandLineRunner,252
Find no block!
com.google.javascript.jscomp.CommandLineRunner,258
Find no block!
com.google.javascript.jscomp.CommandLineRunner,263
Find no block!
com.google.javascript.jscomp.CommandLineRunner,268
Find no block!
com.google.javascript.jscomp.CommandLineRunner,273
Find no block!
com.google.javascript.jscomp.CommandLineRunner,279
Find no block!
com.google.javascript.jscomp.CommandLineRunner,285
Find no block!
com.google.javascript.jscomp.CommandLineRunner,294
Find no block!
com.google.javascript.jscomp.CommandLineRunner,304
Find no block!
com.google.javascript.jscomp.CommandLineRunner,313
Find no block!
com.google.javascript.jscomp.CommandLineRunner,320
Find no block!
com.google.javascript.jscomp.DefaultCodingConvention,32
Find no block!
com.google.javascript.jscomp.CommandLineRunner,382
Find no block!
com.google.javascript.jscomp.CommandLineRunner,387
Find no block!
com.google.javascript.jscomp.CommandLineRunner,400
UNKNOWN ASTNode type : catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}

UNKNOWN ASTNode type : catch (AbstractCommandLineRunner.FlagUsageException e) {
  System.err.println(e.getMessage());
  result=-1;
}

========
super(out,err);
initConfigFromFlags(args,System.err);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
com.google.javascript.jscomp.CommandLineRunner,401
com.google.javascript.jscomp.CommandLineRunner,402
Find no block!
com.google.javascript.jscomp.CommandLineRunner,408
========
Lists.newArrayList().add("goog.exportSymbol");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
processedArgs.add("goog.exportProperty");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.newArrayList("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(debug){
processedArgs.add("extern");
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(debug){
processedArgs.add("pure");
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(options.runtimeTypeCheck){
Lists.newArrayList().add(runtimeTypeCheck);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(argPattern.matcher(variable_map_output_file).matches()){
DEFAULT_EXTERNS_NAMES.add(quotesMatcher.group(1));
}else {
processedArgs.add(variable_map_output_file);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().addAll(getCodeRemovingPasses());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
generateHtmlReportHeader(new StringBuilder());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
new StringBuilder().append("<h1>Name Reference Graph Dump</h1>\n");
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new StringBuilder().append("<h1>Name Reference Graph Dump</h1>\n");
Pattern argPattern=Pattern.newArrayList("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Collections.sort(Lists.newArrayList(getAllModules()),new DepthComparator());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Collections.sort(Lists.newArrayList());
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.newArrayList("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if((variable_map_output_file.indexOf('[')==-1)||(variable_map_output_file.lastIndexOf(']')==-1)){
throw new ParseException("Syntax error when parsing JS array",true);
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
for(JSModule module : getDependencies()){
Lists.newArrayList().add(module.getName());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Joiner.on("\n").compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
for(JSModule module : getAllModulesInDependencyOrder()){
Lists.newArrayList().addAll(module.getInputs());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.newArrayListWithExpectedSize("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(debug){
Lists.newArrayList().add(new FindAbstractMethods());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
if(debug){
Lists.newArrayList().add(new FindAssertionCalls());
}
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_FALSE,Token.FALSE));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_NULL,Token.NULL));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(new KeywordAliasSpecification(ALIAS_TRUE,Token.TRUE));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(new ThrowAliasSpecification(ALIAS_THROW));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Joiner.on(".").compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.join("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
========
Lists.newArrayList().add(symbols.get(0));
Pattern argPattern=Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern=Pattern.compile("^[\'\"](.*)[\'\"]$");
List<String> processedArgs=Lists.newArrayList();

========
com.google.javascript.jscomp.CommandLineRunner,409
com.google.javascript.jscomp.CommandLineRunner,410
com.google.javascript.jscomp.CommandLineRunner,411
UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

UNKNOWN ASTNode type : catch (Exception e) {
  Result r=new Result(true);
  r.exceptions.add(e);
  return r;
}

========
case Token.SCRIPT :

if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
module.setDepth(summary_detail_level);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
requires.add(quotesMatcher.group(1));
}else {
requires.add(value);
}

========
========
if(quotesMatcher.matches()){
requires.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
requires.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
TRUES.add(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
processedArgs.add("google_exportSymbol");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
processedArgs.add("google_exportSymbol");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
processedArgs.add("google_exportSymbol");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
DEFAULT_EXTERNS_NAMES.add("goog.exportProperty");
processedArgs.add("google_exportSymbol");
DEFAULT_EXTERNS_NAMES.add("google_exportProperty");
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
TRUES.add(a.oldName);
processedArgs.add(value);
}

========
========
processedArgs.add(quotesMatcher.group(1)!=null?valueMatcher.group(1):valueMatcher.group(2));
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.hitEnd()){
break;
}
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
quotesMatcher.reset(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(quotesMatcher.matches()){
assertionCalls.add(quotesMatcher.group(1));
}else {
assertionCalls.add(value);
}

========
========
if(quotesMatcher.matches()){
assertionCalls.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
assertionCalls.add(value);
}

========
========
if(quotesMatcher.matches()){
break;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
break;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
hasChanged=true;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
hasChanged=true;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
externPropertyNames.add(quotesMatcher.group(1));
}else {
externPropertyNames.add(value);
}

========
========
if(quotesMatcher.matches()){
externPropertyNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
externPropertyNames.add(value);
}

========
========
if(quotesMatcher.matches()){
externalNoShadowVariableNames.add(quotesMatcher.group(1));
}else {
externalNoShadowVariableNames.add(value);
}

========
========
if(quotesMatcher.matches()){
externalNoShadowVariableNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
externalNoShadowVariableNames.add(value);
}

========
========
if(quotesMatcher.matches()){
stringNodesToRename.add(quotesMatcher.group(1));
}else {
stringNodesToRename.add(value);
}

========
========
if(quotesMatcher.matches()){
stringNodesToRename.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
stringNodesToRename.add(value);
}

========
========
if(quotesMatcher.matches()){
countPropertyOccurrence(output_wrapper);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
countPropertyOccurrence(output_wrapper);
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
noSideEffectFunctionNames.add(quotesMatcher.group(1));
}else {
noSideEffectFunctionNames.add(value);
}

========
========
if(quotesMatcher.matches()){
noSideEffectFunctionNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
noSideEffectFunctionNames.add(value);
}

========
========
if(quotesMatcher.matches()){
allInstantiatedTypes.add(quotesMatcher.group(1));
}else {
allInstantiatedTypes.add(value);
}

========
========
if(quotesMatcher.matches()){
allInstantiatedTypes.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
allInstantiatedTypes.add(value);
}

========
========
if(quotesMatcher.matches()){
recordProperty(output_wrapper,value);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
recordProperty(output_wrapper,value);
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
allFunctionCalls.add(quotesMatcher.group(1));
}else {
allFunctionCalls.add(value);
}

========
========
if(quotesMatcher.matches()){
allFunctionCalls.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
allFunctionCalls.add(value);
}

========
========
if(quotesMatcher.matches()){
orderedWorkSet.add(quotesMatcher.group(1));
}else {
orderedWorkSet.add(value);
}

========
========
if(quotesMatcher.matches()){
orderedWorkSet.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
orderedWorkSet.add(value);
}

========
========
if(quotesMatcher.matches()){
reservedNames.add(quotesMatcher.group(1));
}else {
reservedNames.add(value);
}

========
========
if(quotesMatcher.matches()){
reservedNames.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
reservedNames.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
return Lists.newArrayList();
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
reads.add(quotesMatcher.group(1));
}else {
reads.add(value);
}

========
========
if(quotesMatcher.matches()){
reads.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
reads.add(value);
}

========
========
if(quotesMatcher.matches()){
writes.add(quotesMatcher.group(1));
}else {
writes.add(value);
}

========
========
if(quotesMatcher.matches()){
writes.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
writes.add(value);
}

========
========
if(quotesMatcher.matches()){
knownLocals.add(quotesMatcher.group(1));
}else {
knownLocals.add(value);
}

========
========
if(quotesMatcher.matches()){
knownLocals.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
knownLocals.add(value);
}

========
========
if(quotesMatcher.matches()){
localVar=true;
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
localVar=true;
processedArgs.add(value);
}

========
========
lazyInitInfo();
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(info.implementedInterfaces==null){
info.implementedInterfaces=Lists.newArrayListWithCapacity(2);
}
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(output_wrapper);
}

========
========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
TRUES.add(output_wrapper);
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
TRUES.add(output_wrapper);
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(iVar.name);
}

========
========
global.uses.add(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
refInfo.add(quotesMatcher.group(1));
}else {
refInfo.add(value);
}

========
========
if(quotesMatcher.matches()){
refInfo.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
refInfo.add(value);
}

========
========
processedArgs.reportCodeChange();
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
compiler.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
return ;
processedArgs.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
processedArgs.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}

========
========
if(quotesMatcher.matches()){
return ;
compiler.add(quotesMatcher.group(1));
}else {
return ;
compiler.add(value);
}

========
========
if(options.runtimeTypeCheck){
Lists.newArrayList().add(runtimeTypeCheck);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(options.optimizeArgumentsArray){
Lists.newArrayList().add(optimizeArgumentsArray);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(options.collapseProperties){
Lists.newArrayList().add(collapseProperties);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
add(quotesMatcher.getChildAtIndex(1));
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
case Token.SCRIPT :

if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
matcher.add("goog.exportSymbol");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
processedArgs.add("goog.exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
matcher.add("google_exportSymbol");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
processedArgs.add("google_exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
processedArgs.add("goog.exportProperty");
processedArgs.add("google_exportProperty");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
hasDependencies=true;
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasDependencies=true;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!matcher.matches()){
throw new ParseException("Invalid arguments to goog.addDependency(). Found: "+quotesMatcher.group(1),true);
}
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasDependencies=true;
if(!matcher.matches()){
throw new ParseException("Invalid arguments to goog.addDependency(). Found: "+quotesMatcher.group(1),true);
}

processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(value);
}

========
========
if(matcher.matches()){
requires.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
requires.add(arg);
}

========
========
if(matcher.matches()){
requires.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
requires.add(arg);
}

========
========
if(debug){
add("(");
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
add("{");
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return Lists.newArrayList();
processedArgs.add(arg);
}

========
========
matcher.reset(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(matcher.matches()){
prop.typesToSkip.add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
prop.typesToSkip.add(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.add(a.oldName);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
DEFAULT_EXTERNS_NAMES.add(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!debug){
throw new FlagUsageException("Can\'t specify stdin.");
}
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(debug){
throw new FlagUsageException("Can\'t specify stdin twice.");
}
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
usingStdin=true;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(!debug){
throw new FlagUsageException("Can\'t specify stdin.");
}
if(debug){
throw new FlagUsageException("Can\'t specify stdin twice.");
}
usingStdin=true;

processedArgs.add(arg);
}

========
========
if(matcher.matches()){
assertionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
assertionCalls.add(arg);
}

========
========
if(matcher.matches()){
assertionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
assertionCalls.add(arg);
}

========
========
if(matcher.matches()){
hasChanged=true;
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
hasChanged=true;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
break;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
externPropertyNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externPropertyNames.add(arg);
}

========
========
if(matcher.matches()){
externPropertyNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externPropertyNames.add(arg);
}

========
========
if(matcher.matches()){
stringNodesToRename.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
stringNodesToRename.add(arg);
}

========
========
if(matcher.matches()){
stringNodesToRename.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
stringNodesToRename.add(arg);
}

========
========
if(matcher.matches()){
countPropertyOccurrence(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
countPropertyOccurrence(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
noSideEffectFunctionNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
noSideEffectFunctionNames.add(arg);
}

========
========
if(matcher.matches()){
noSideEffectFunctionNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
noSideEffectFunctionNames.add(arg);
}

========
========
if(matcher.matches()){
allFunctionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allFunctionCalls.add(arg);
}

========
========
if(matcher.matches()){
allFunctionCalls.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allFunctionCalls.add(arg);
}

========
========
if(matcher.matches()){
externalNoShadowVariableNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externalNoShadowVariableNames.add(arg);
}

========
========
if(matcher.matches()){
externalNoShadowVariableNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
externalNoShadowVariableNames.add(arg);
}

========
========
if(matcher.matches()){
allInstantiatedTypes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allInstantiatedTypes.add(arg);
}

========
========
if(matcher.matches()){
allInstantiatedTypes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
allInstantiatedTypes.add(arg);
}

========
========
if(matcher.matches()){
reads.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reads.add(arg);
}

========
========
if(matcher.matches()){
reads.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reads.add(arg);
}

========
========
if(matcher.matches()){
writes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
writes.add(arg);
}

========
========
if(matcher.matches()){
writes.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
writes.add(arg);
}

========
========
if(matcher.matches()){
orderedWorkSet.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
orderedWorkSet.add(arg);
}

========
========
if(matcher.matches()){
orderedWorkSet.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
orderedWorkSet.add(arg);
}

========
========
if(matcher.matches()){
reservedNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reservedNames.add(arg);
}

========
========
if(matcher.matches()){
reservedNames.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
reservedNames.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
knownLocals.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
knownLocals.add(arg);
}

========
========
if(matcher.matches()){
knownLocals.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
knownLocals.add(arg);
}

========
========
if(matcher.matches()){
localVar=true;
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
localVar=true;
processedArgs.add(arg);
}

========
========
lazyInitInfo();
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(info.implementedInterfaces==null){
info.implementedInterfaces=Lists.newArrayListWithCapacity(2);
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
info.implementedInterfaces.add(value);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
compiler.add(arg);
}

========
========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
compiler.add(arg);
}

========
========
if(matcher.matches()){
TRUES.add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
TRUES.add(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(iVar.name);
}

========
========
if(matcher.matches()){
refInfo.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
refInfo.add(arg);
}

========
========
if(matcher.matches()){
refInfo.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
refInfo.add(arg);
}

========
========
if(matcher.matches()){
Preconditions.checkNotNull(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
matcher.add(candidate.alias);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
matcher.add(candidate.alias);

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkNotNull(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.add(candidate.alias);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkNotNull(value);
inlineWellDefinedVariable(candidate.alias,value,candidate.refInfo.references);
matcher.add(candidate.alias);

processedArgs.add(arg);
}

========
========
if(matcher.matches()){
if(matcher.get(value)==null){
moduleFunctions=Lists.newArrayList();
matcher.put(value,matcher.get(value));
}
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
if(matcher.get(value)==null){
moduleFunctions=Lists.newArrayList();
matcher.put(value,matcher.get(value));
}
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
matcher.getDirectives().add(value);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
matcher.setDirectives(matcher.getDirectives());
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
matcher.getDirectives().add(value);
matcher.setDirectives(matcher.getDirectives());

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.getType()!=Token.CALL){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(quotesMatcher.getType()!=Token.GETPROP){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
mapping.start=new Position(getCurrentLineIndex(),getCurrentCharIndex());
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
mapping.start=new Position(getCurrentLineIndex(),getCurrentCharIndex());
processedArgs.add(arg);
}

========
========
if(quotesMatcher==null||var.isLocal()||var.isExtern()){
return ;
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
quotesMatcher.add(value);
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
Preconditions.checkState(matcher.get(output_wrapper)!=null);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
matcher.remove(output_wrapper);
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
quotesMatcher.add(value);
Preconditions.checkState(matcher.get(output_wrapper)!=null);
matcher.remove(output_wrapper);

processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
quotesMatcher.add(value);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
Preconditions.checkState(matcher.get(output_wrapper)!=null);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
matcher.remove(output_wrapper);
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
quotesMatcher.add(value);
Preconditions.checkState(matcher.get(output_wrapper)!=null);
matcher.remove(output_wrapper);

processedArgs.add(arg);
}

========
========
matcher.reportCodeChange();
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
processedArgs.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
compiler.add(arg);
}

========
========
if(matcher.matches()){
compiler.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
return ;
compiler.add(arg);
}

========
========
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.getNativeType(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
if(summary_detail_level>0){
matcher.appendStringPart(output_wrapper.substring(0,phBegin));
}
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
matcher.appendPlaceholderReference(value);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}

========
========
Lists.newArrayList().add(createEmptyPass("beforeStandardOptimizations"));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(options.optimizeArgumentsArray){
Lists.newArrayList().add(optimizeArgumentsArray);
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(options.collapseProperties){
Lists.newArrayList().add(collapseProperties);
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("function");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getChildAtIndex(1));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
hasFunctions=true;
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.find();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("if(");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(")");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(debug){
quotesMatcher.endBlock();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("{");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.reset(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
module.setDepth(summary_detail_level);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
quotesMatcher.put(arg,value);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(value==null)Kit.codeBug();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.add(value);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
this.quotesMatcher=options;
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(quotesMatcher.getWarningsGuard()!=null){
matcher.add(quotesMatcher.getWarningsGuard());
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(!options.checkSymbols&&(quotesMatcher.getWarningsGuard()==null||!warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))){
matcher.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES,CheckLevel.OFF));
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
this.quotesMatcher.getWarningsGuard()=new ComposeWarningsGuard(matcher);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
quotesMatcher.add(null);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
processedArgs.add(symbols.get(0));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
if(matcher.getType()!=Token.RETURN||matcher.getFirstChild()==null||matcher.getFirstChild().getType()!=Token.THIS){
return ;
}
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
jsName.externallyDefined=true;
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
quotesPattern.add(ns.name);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
jsName.externallyDefined=true;
quotesPattern.add(ns.name);

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
lazyInitInfo();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
info.suppressions.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
info.modifies.add(modifies);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
DEFAULT_EXTERNS_NAMES.add(formatDetailedMessage(output_wrapper,value,summary_detail_level,arg,summary_detail_level));
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
Lists.newArrayList().add(value);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(documentation.sees==null){
documentation.sees=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
documentation.sees.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(documentation.authors==null){
documentation.authors=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
documentation.authors.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(documentation.markers==null){
documentation.markers=Lists.newArrayList();
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
documentation.markers.add(new Marker());
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
if(quotesMatcher.get(value)==null){
builder=ImmutableSet.builder();
quotesMatcher.put(value,quotesMatcher.get(value));
}
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
quotesMatcher.get(value).add(elem.element);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
if(quotesMatcher.get(value)==null){
builder=ImmutableSet.builder();
quotesMatcher.put(value,quotesMatcher.get(value));
}
quotesMatcher.get(value).add(elem.element);

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
node=quotesMatcher.addProperty(output_wrapper.substring(summary_detail_level+1),arg);
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(matcher.getType()!=Token.STRING){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
argPattern.add(arg);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.endFile();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(matcher.getQualifiedName()==null){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(quotesMatcher.getType()!=Token.STRING){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(quotesMatcher.getType()!=Token.CALL){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(matcher.getType()!=Token.GETPROP){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
Matcher matcher=typeRegistry.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
quotesMatcher.addRequiredParams(getNativeType(U2U_CONSTRUCTOR_TYPE));
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
argPattern.add(matcher.getPrototype());
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
quotesMatcher.addRequiredParams(getNativeType(U2U_CONSTRUCTOR_TYPE));
argPattern.add(matcher.getPrototype());

Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(quotesMatcher==null||var.isLocal()||var.isExtern()){
return ;
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
matcher.reportCodeChange();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(debug)throw onSeledMutation();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
summary_detail_level=N+1;
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case STRING :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
for(String arg : args){
Matcher matcher=argPattern.getNativeType(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case NULL :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(summary_detail_level<0)Kit.codeBug();
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case 1 :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case 3 :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getChildAtIndex(1));
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getChildAtIndex(1));
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add(quotesMatcher.getChildAtIndex(1));
add(quotesMatcher.getLastChild(),Context.PRESERVE_BLOCK);
case Token.SCRIPT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.FUNCTION :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.GETPROP :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.OBJECTLIT :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.STRING :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.GETELEM :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
add("function");
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("function");
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("function");
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
add("function");
if(debug){
add(")");
}
for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
add("function");
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
add("function");
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
Preconditions.checkState(summary_detail_level==3);
add("function");
if(debug){
add(")");
}
case Token.GET :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
========
case Token.SETNAME :

for(String arg : args){
Matcher matcher=argPattern.matcher(arg);
if(matcher.matches()){
processedArgs.add(matcher.group(1));
String value=matcher.group(2);
Matcher quotesMatcher=quotesPattern.matcher(value);
if(quotesMatcher.matches()){
processedArgs.add(quotesMatcher.group(1));
}else {
processedArgs.add(value);
}
}else {
processedArgs.add(arg);
}
}

========
com.google.javascript.jscomp.CommandLineRunner,412
com.google.javascript.jscomp.CommandLineRunner,413
com.google.javascript.jscomp.CommandLineRunner,424
com.google.javascript.jscomp.CommandLineRunner,428
========
if(flags.version){
ResourceBundle ResourceBundle.getBundle(configResource)=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}
CmdLineParser parser=new CmdLineParser(flags);
isConfigValid=true;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}


========
========
CmdLineParser parser=new CmdLineParser(flags);
isConfigValid=false;
try{
parser.parseArgument(processedArgs.toArray(new String[]{}));
}catch (CmdLineException e) {
  err.println(e.getMessage());
  isConfigValid=false;
}


========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
com.google.javascript.jscomp.CommandLineRunner,429
com.google.javascript.jscomp.CommandLineRunner,431
com.google.javascript.jscomp.CommandLineRunner,437
========
TRUES=extractList(config.getString("jsdoc.annotations"));
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
TRUES=extractList(config.getString("jsdoc.suppressions"));
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
if(debug){
break;
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
varsToDeclareInExterns.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.add("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.name("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
System.err.println("length:"+summary_detail_level);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
props.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
new FileOutputStream(configResource).flush();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
new FileOutputStream(configResource).close();
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
new FileOutputStream(configResource).flush();
new FileOutputStream(configResource).close();

ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.substring("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkState("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
add(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
consumeToken();
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
quotedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
externPropertyNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reservedNames.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
stringNodesToRename.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
countPropertyOccurrence(configResource);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.GETPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if("undefined".equals(configResource)){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
callNodeToParentMap.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
newName.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
type=getNativeType(UNKNOWN_TYPE);
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
output_wrapper=config.getString();
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
symbolGraph.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
debug=false;
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(null!=null&&info.isConstant()){
debug=true;
}else {
expectedConst=false;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
summary_detail_level++;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
globals.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getString().startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
li.referenced=true;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
Preconditions.checkState(output_wrapper.length()!=0);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.length()==0){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkNotNull("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
newName.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.append("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(flags.version){
replacement=p.newName;
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getType()!=Token.STRING){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
markerStack.flush();
}

========
========
Preconditions.checkState(args.getType()==Token.LP);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
reads.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
writes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
externMethodsWithoutSignatures.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.checkArgument("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
unknownNameUse.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
config.setUnknown(true);
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
add("get ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
add("set ");
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
allInstantiatedTypes.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
Preconditions.checkState(summary_detail_level==1);
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setDesc("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setIsHidden("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
compiler.report("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
typesToSkip.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
add(".");
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.setOutputManifest("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
isConfigValid=false;
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.THIS :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(flags.version){
if(config!=TernaryValue.UNKNOWN){
int (config.toBoolean(true))?Token.TRUE:Token.FALSE=(config.toBoolean(true))?Token.TRUE:Token.FALSE;
reportCodeChange();
}
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
if(config.getNext().getType()!=Token.STRING){
return ;
}
if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.DELPROP :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
========
case Token.ASSIGN :

if(flags.version){
ResourceBundle config=ResourceBundle.getBundle(configResource);
err.println("Closure Compiler (http://code.google.com/closure/compiler)\n"+"Version: "+config.getString("compiler.version"));
err.flush();
}

========
com.google.javascript.jscomp.CommandLineRunner,446
com.google.javascript.jscomp.CommandLineRunner,484
Find no block!
com.google.javascript.jscomp.CommandLineRunner,610
com.google.javascript.jscomp.CommandLineRunner,329
com.google.javascript.jscomp.CommandLineRunner,330
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,111
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,112
========
this.numUseWithinUseCfgNode=0;
this.compiler=compiler;

========
========
this.varName=logFunction;
this.compiler=compiler;

========
========
setErrorManager(compiler.getErrorManager());
this.compiler=compiler;

========
========
this.varName=Preconditions.checkNotNull(varName);
this.compiler=compiler;

========
========
Preconditions.checkArgument(compiler.getLifeCycleStage().isNormalized());
this.compiler=compiler;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
this.compiler=compiler;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(compiler);
this.compiler=compiler;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.varName=exportSymbolFunction;
this.compiler=compiler;

========
========
this.varName=startMarkerName;
this.compiler=compiler;

========
========
this.varName=endMarkerName;
this.compiler=compiler;

========
========
this.def=externsRoot;
this.compiler=compiler;

========
========
this.def=root;
this.compiler=compiler;

========
========
this.varName=reportPath;
this.compiler=compiler;

========
========
Preconditions.checkArgument(numUseWithinUseCfgNode>0);
this.compiler=compiler;

========
========
this.numUseWithinUseCfgNode=numWorkers;
this.compiler=compiler;

========
========
this.varName=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
this.compiler=compiler;

========
========
super(cfg,new LiveVariableJoinOp());
this.compiler=compiler;

========
========
super(cfg,new ReachingUsesJoinOp());
this.compiler=compiler;

========
========
super(cfg,new MustDefJoin());
this.compiler=compiler;

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,113
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,118
UNKNOWN ASTNode type : catch (DataFlowAnalysis.MaxIterationsExceededException e) {
  compiler.report(t.makeError(n,DATAFLOW_ERROR));
}

========
if(t.inGlobalScope()){
compiler.report(t.makeError(def,NON_GLOBAL_ID_GENERATOR_CALL));
return ;
}

========
========
if(NodeUtil.containsFunction(t.getScopeRoot().getLastChild())){
return ;
}
if(t.inGlobalScope()){
return ;
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(def.getType()==Token.GETPROP&&n==def.getFirstChild()&&NodeUtil.isAssignmentOp(parent)){
return false;
}
if(t.inGlobalScope()){
return ;
}

========
========
if(t.inGlobalScope()){
compiler.report(t.makeError(def,QUALIFIED_NAME_EXPECTED_ERROR,Token.name(firstArgument.getType())));
return ;
}

========
========
if(t.inGlobalScope()){
ensureTyped(t,def);
return ;
}

========
========
ensureTyped(t,def,NUMBER_TYPE);
if(t.inGlobalScope()){
return ;
}

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
if(t.inGlobalScope()){
return ;
}

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,119
com.google.javascript.jscomp.FlowSensitiveInlineVariables,123
========
cfa.process(null,t.getScopeRoot().getLastChild());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
compiler.report(t.makeError(def,NON_GLOBAL_ID_GENERATOR_CALL));
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(explicitReturnExpected(t.getScopeRoot())==null){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.containsFunction(t.getScopeRoot().getLastChild())){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.getScope().getRootNode().getFirstChild().getNext().getChildCount()==2){
new LiveVariablesAnalysis(cfg,t.getScope(),compiler).markAllParametersEscaped();
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.SET :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
numUseWithinUseCfgNode=numUseWithinUseCfgNode;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses.analyze();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(defCfgNode==null){
reportBadBaseClassUse(t,def,"Could not find goog.inherits for base class");
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(report.success,COMPILATION_UNSUCCESSFUL_MSG);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.RETURN :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
compiler.report(t.makeError(def,QUALIFIED_NAME_EXPECTED_ERROR,Token.name(firstArgument.getType())));
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.setString(varName);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.report(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
ensureTyped(t,def);
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!NodeUtil.isFunction(t.getScopeRoot())){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(def.getType()==Token.GETPROP&&n==def.getFirstChild()&&NodeUtil.isAssignmentOp(parent)){
return false;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
process(cfa);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
stopTracer(newTracer("computeCFG"),"computeCFG");
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!NodeUtil.has(def,SIDE_EFFECT_PREDICATE,Predicates.alwaysTrue())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
tryRemoveDeadAssignments(t,cfg);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def.getType()==Token.STRING,"Bad GETPROP: RHS should be STRING");
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if((def.getType()==Token.NUMBER)){
add("(");
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def.getString().isEmpty()){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(NodeUtil.isFunctionObjectCallOrApply(site.node.getParent())){
return false;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(!definitionSite.inExterns);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(definitionSite.definition.getRValue()==def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.POS :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.removeChild(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def.getType()==Token.FUNCTION);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!(def!=null)&&NodeUtil.isFunctionExpression(def)){
traverseBranch(def.getFirstChild(),def);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def.getParent()!=null);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def==null||def.getParent().hasChild(externsRoot));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def!=null){
check(externsRoot,true);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
check(def,false);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(varName==null||!enclosingQname.endsWith(varName)){
reportBadBaseClassUse(t,def,"Enclosing method does not match "+varName);
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",defCfgNode.getFirstChild().getFirstChild().getQualifiedName(),varName),callee,"goog.base"));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.removeChild(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.add(NodeUtil.isFunction(t.getScopeRoot()));

========
========
compiler.reportCodeChange();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(defCfgNode.getType()!=Token.NAME){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(t.getScope().getVar(defCfgNode.getString())==null||var.isLocal()||var.isExtern()){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,this);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
replaceStringsWithAliases();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
addAliasDeclarationNodes();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.removeChild(this);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!varName.isEmpty()&&NodeUtil.isFunctionExpression(def)){
declareVar(defCfgNode);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(config.parameter!=Config.REPLACE_ALL_VALUE){
Node def=def.getChildAtIndex(config.parameter);
if(arg!=null){
replaceExpression(t,arg,n);
}
}else {
Node def.getFirstChild().getNext()=n.getFirstChild().getNext();
for(Node arg=firstParam;arg!=null;arg=arg.getNext()){
arg=replaceExpression(t,arg,n);
}
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
defCfgNode.replaceChild(def,def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(decl.node.getParent().getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
decl.node.getParent().detachFromParent();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.addChildToFront(decl.node.getParent());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkArgument(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
compiler.getTypeRegistry().checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.resolveTypesInScope(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case OVERRIDE_DEFAULT_VALUE :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,namespace),createNamespaceLiteral())).putBooleanProp(Node.IS_NAMESPACE,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,namespace),createNamespaceLiteral())).copyInformationFromForTree(def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def.getFirstChild()==null||addingRoot.getFirstChild().getType()!=Token.SCRIPT);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
if(NodeUtil.isAssign(def)&&NodeUtil.isPrototypeProperty(def.getFirstChild())){
pushContainingFunction(recordPrototypePropDefinition(t,def.getFirstChild(),getType(def),parent,def.getParent(),def.getParent().getParent()));
}else {
pushContainingFunction(recordStaticNameDefinition(t,NodeUtil.getFunctionName(def),getType(def),def,def,def.getParent(),root.getLastChild()));
}
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getFirstChild()==null){
return def;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if((FunctionType)def.getJSType()==null){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getParent().getParent()==null){
return null;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def.getString().length()==0){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isStatement(defCfgNode)){
return true;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
ensureTyped(t,def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!NodeUtil.isStatementBlock(def.getParent())){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkArgument(NodeUtil.isFunction(defCfgNode));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(getAstRoot(compiler)==null){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
new DepsFinder().visitTree(getAstRoot(compiler));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeUtil.removeChild(def.getParent(),n);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(isVariableReadBeforeKill(def.getNext(),varName)==VariableLiveness.READ){
return state;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isGetOrSetKey(def.getParent())){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isExpressionNode(def)){
t.removeChild(def,parent);
}else {
changeProxy.replaceWith(parent,def,new Node(Token.VOID,Node.newNumber(0)));
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.putBooleanProp(Node.IS_NAMESPACE,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(compiler.getCodingConvention().isConstant(varName)){
def.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.copyInformationFromForTree(defCfgNode);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!NodeUtil.hasFinally(defCfgNode)){
tryNode.addChildrenToBack(new Node(Token.BLOCK).copyInformationFrom(tryNode));
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
NodeUtil.removeChild(def.getParent(),n);
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
compiler.reportCodeChange();
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.inGlobalScope()){
NodeUtil.removeChild(def.getParent(),n);
compiler.reportCodeChange();

return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.getParent().replaceChild(n,Node.newNumber(numUseWithinUseCfgNode));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
reportCodeChange();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.getArgumentForFunction(def,numUseWithinUseCfgNode)!=null){
def.getFirstChild().getNext().removeChild(formalArgPtr);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(defCfgNode!=null){
return defaultValueNode;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(registerCall.valueNode!=null){
return registerCall.valueNode;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.replaceChild(def,Node.newString(varName));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.addEntry(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def.getType()!=Token.FUNCTION){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(numUseWithinUseCfgNode<0){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def=def;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
numUseWithinUseCfgNode++;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!NodeUtil.isFunctionExpression(def)&&!NodeUtil.isHoistedFunctionDeclaration(n)){
rewriteFunctionDeclaration(n);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.setString(coalescedVar.name);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isExprAssign(def)){
return n.getFirstChild().getFirstChild();
}else {
return n.getFirstChild();
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.addChildToBack(def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
compiler.addToDebugLog("JS property assignments:");
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
resolveInlineConflicts();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
removeInlinedFunctions();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.replaceChild(def,Node.newNumber(0));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
compiler.reportCodeChange();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
compiler.getTypeRegistry().checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
trimCanidatesNotMeetingMinimumRequirements();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.THIS :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(getInitializingReference()==null){
return false;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(NodeUtil.isExprCall(def)){
parent.getParent().replaceChild(parent,new Node(Token.EMPTY));
}else {
Node def=def;
parent.replaceChild(call,NodeUtil.newUndefinedNode(srcLocation));
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.getParent().addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE))),nodeToInsertAfter);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.getBooleanValue(def)!=TernaryValue.FALSE){
return def;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.getParent().replaceChild(n,def.removeFirstChild());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(parts.length==2){
return varName.split("\\.prototype\\.")[1];
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(parts.length==2){
return varName.split("\\.prototype\\.")[0];
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def.getQualifiedName()==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getJSDocInfo()!=null&&def.getType()==Token.FUNCTION){
value.setJSDocInfo(key.getJSDocInfo());
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.addChildToFront(Node.newString(Token.NAME,varName).copyInformationFrom(def));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
skipEOLs();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(getLabelInfo(defCfgNode.getString())!=null){
String getNameForId(li.id)=getNameForId(li.id);
li.referenced=true;
if(!defCfgNode.getString().equals(newName)){
defCfgNode.setString(newName);
compiler.reportCodeChange();
}
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
addIdentifier(def.getString());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.addAll(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
this.compiler=compiler;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!Strings.isEmpty(varName)&&!Strings.isEmpty(varName)){
throw new IllegalArgumentException("Cannot pass in both unaliasable and aliasable globals; you must "+"choose one or the other.");
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
nameObj.type=type;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
getOrCreateName(varName).addRef(new Ref(t,def,Ref.Type.SET_FROM_GLOBAL));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(!NodeUtil.isGet(def.getFirstChild())){
def.putBooleanProp(Node.FREE_CALL,true);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getFirstChild().getType()==Token.NAME&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkArgument(defCfgNode!=def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def!=null||def!=null){
throw new IllegalStateException("It is illegal to call PureFunctionIdentifier.process "+"twice the same instance.  Please use a new ");
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
propagateSideEffects();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
markPureFunctionCalls();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!(def.getType()==Token.SCRIPT||def.getParent()!=null&&grandparent.getType()==Token.FUNCTION&&parent.getType()==Token.BLOCK)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getJSDocInfo()==null&&NodeUtil.isFunctionExpression(def)){
Node def.getParent()=n.getParent();
if(parent.getType()==Token.ASSIGN){
fnInfo=parent.getJSDocInfo();
}else if(parent.getType()==Token.NAME){
fnInfo=parent.getParent().getJSDocInfo();
}
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
assertDefinitionNode(def,Token.FUNCTION);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(NodeUtil.isFunctionDeclaration(def)){
defineSlot(n.getFirstChild(),n,getFunctionType(def.getFirstChild().getString(),def,def.getJSDocInfo(),null));
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
this.numUseWithinUseCfgNode=lineLengthThreshold;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getFirstChild().getType()==Token.NAME&&def.getLastChild().getType()==Token.NAME&&left.getString().equals(right.getString())){
def.getParent().replaceChild(subtree,right.detachFromParent());
reportCodeChange();
return right;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(NodeUtil.isExpressionNode(def)){
parent.getParent().removeChild(parent);
}else {
Node def.getFirstChild().getNext()=def.getFirstChild().getNext();
if(firstArg==null){
parent.replaceChild(call,NodeUtil.newUndefinedNode(call));
}else {
parent.replaceChild(call,firstArg.detachFromParent());
}
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
ref.node.getParent().checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
defCfgNode.addChildToBack(defCfgNode);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
current.renameMap.put(def.getFirstChild().getString(),new LabelInfo(numUseWithinUseCfgNode));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
new PrepareAst(compiler,true).process(null,def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(compiler.getLifeCycleStage().isNormalized()){
(new Normalize(compiler,true)).process(def,def);
if(compiler.getLifeCycleStage().isNormalizedUnobfuscated()){
boolean true=true;
CompilerPass new Normalize.VerifyConstants(compiler,true)=new Normalize.VerifyConstants(compiler,checkUserDeclarations);
pass.process(externs,root);
}
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def==null||n==defCfgNode){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(state.out.size()==state.out.size());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(def.getType()==Token.BLOCK);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def=child.getFirstChild();
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
recordReplacement(def,varName,varName);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.replaceChild(def,def);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def==null||compiler.hasHaltingErrors()){
root=new Node(Token.BLOCK);
}else {
compiler.prepareAst(root);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
swtich (def.getParent().getType()){
case Token.SCRIPT :

case Token.BLOCK :

case Token.LABEL :
return true;

default :
return false;

}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getType()==Token.VAR||parent.getType()==Token.FUNCTION){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getType()==Token.CALL&&parent.getFirstChild()==def){
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def!=null){
def.addChildAfter(def,nameToAddAfter);
}else {
varParent.addChildBefore(newVar,defCfgNode);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def=def;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(def.getJSType()!=null){
NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName).setJSType(type);
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
this.varName=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
aliasRefs.references.get(numUseWithinUseCfgNode).getParent().checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
def.replaceChild(alias.node,new Node(Token.NULL));
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
NodeTraversal.traverse(compiler,def,new GlobalGatherer());
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.GETPROP :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.FUNCTION :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.BITNOT :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.NEG :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.GET :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Pattern.compile(varName).checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.NAME :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case SIMPLE_CALL :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
this.varName=fnName==null?"":fnName;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
this.def=errorRoot;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
this.varName=sourceName;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
this.compiler=compiler;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.TYPEOF :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
this.varName=prefix==null?"":prefix;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.FALSE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.CONTINUE :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.RETURN :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.SCRIPT :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.SHEQ :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
case Token.SHNE :

if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
numUseWithinUseCfgNode=numUseWithinUseCfgNode;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
numUseWithinUseCfgNode=numUseWithinUseCfgNode;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
numUseWithinUseCfgNode=numUseWithinUseCfgNode;
if(t.inGlobalScope()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,125
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(t.inGlobalScope()){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfg=cfa.getCfg();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
stopTracer(newTracer("computeCFG"),"computeCFG");
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.push(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(t.inGlobalScope()){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(fastAllPathsReturnCheck(t.getControlFlowGraph())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getParent()!=null);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getType()==Token.FUNCTION);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getLastChild().getNext()==null&&body.getType()==Token.BLOCK);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
t.traverse(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
endTraversal(t);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
new FunctionNames(compiler).process(null,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(defCfgNode==def||executingCase.getType()!=Token.DEFAULT);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getLastChild().getType()==Token.BLOCK);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(defCfgNode.getParent().getLastChild()!=defCfgNode&&def!=null){
Node def.getLastChild()=previousCase.getLastChild();
if(!previousBlock.hasChildren()||!isExit(previousBlock.getLastChild())){
return false;
}
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,this);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(compiler.getLifeCycleStage().isNormalized()){
(new Normalize(compiler,true)).process(def,def);
if(compiler.getLifeCycleStage().isNormalizedUnobfuscated()){
boolean true=true;
CompilerPass new Normalize.VerifyConstants(compiler,true)=new Normalize.VerifyConstants(compiler,checkUserDeclarations);
pass.process(externs,root);
}
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.SET :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.TRUE :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.REF_SPECIAL :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.NULL :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(!NodeUtil.isFunction(t.getScopeRoot())){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
process(def,def,null);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getParent().hasChild(def));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
this.compiler=compiler;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.GETPROP :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getFirstChild().getString().isEmpty());
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
compiler.reportCodeChange();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
numUseWithinUseCfgNode++;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ensureTyped(t,def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new FindCandidateFunctions());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
process(def,def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
def.detachFromParent();
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getType()==numUseWithinUseCfgNode);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(insideGetUniqueIdCall(def,def)){
continue;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(insideAssignmentToIdConstant(def,def)){
continue;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.report(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(numUseWithinUseCfgNode>=0);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(NodeUtil.isFunction(def)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
def.copyInformationFromForTree(def);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(report.success,COMPILATION_UNSUCCESSFUL_MSG);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getType()==Token.INSTANCEOF);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(!NodeUtil.isExprAssign(def)){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def==null||def.getParent().hasChild(externsRoot));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!NodeUtil.has(def,SIDE_EFFECT_PREDICATE,Predicates.alwaysTrue())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
ref.node.getParent().checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getFirstChild()==null||addingRoot.getFirstChild().getType()!=Token.SCRIPT);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
var.name=name;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getType()==Token.STRING,"Bad GETPROP: RHS should be STRING");
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getParent()!=null);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.DEC :

cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.POS :

cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.removeChild(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(numUseWithinUseCfgNode>=2&&childCount<=3);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
add(def,Context.PRESERVE_BLOCK);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.add(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,this);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
addAliasDeclarationNodes();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
getInfo(graph.MAIN).markReference(null);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(!definitionSite.inExterns);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(definitionSite.definition.getRValue()==def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkArgument(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.compiler=compiler;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkArgument(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.addEntry(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(numUseWithinUseCfgNode<0){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
this.defCfgNode=assignNode;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
this.defCfgNode=nameNode;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
compiler.getNodeForCodeInsertion(null).checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def=def;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
markPureFunctionCalls();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
compiler.getTypeRegistry().checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.resolveTypesInScope(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ShadowDeclarationCheckingCallback());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
super.visit(t,def,def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new DefinitionGatheringCallback(false));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new UseSiteGatheringCallback());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,namespace),createNamespaceLiteral())).copyInformationFromForTree(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
this.compiler=compiler;
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
this.compiler=compiler;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,new AddChecks());
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.copyInformationFromForTree(defCfgNode);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
process(new ExternExportsPass(this));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
varName=new ExternExportsPass(this).getGeneratedExterns();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
endPass();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
process(new RemoveTryCatch(this));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.getNativeType(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
UNKNOWN=new Name("{UNKNOWN}",true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
UNKNOWN.isAliased=true;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
this.createNode(UNKNOWN);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
MAIN=new Name("{Global Main}",true);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,new FindReferences());
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
referenceAliases();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(isValueUsed(useCfgNode)){
return true;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
process(new RecordFunctionInformation(this,getPassConfig().getIntermediateState().compiler));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(!NodeUtil.isName(def)){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
add(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
add("in");
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
addExpr(def,NodeUtil.precedence(numUseWithinUseCfgNode));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case OVERRIDE_DEFAULT_VALUE :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
varName="";
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
defCfgNode=def;
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
traverseBranch(def,null);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
popScope();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isGetOrSetKey(def.getParent())){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(getAstRoot(compiler)==null){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isExpressionNode(def)){
t.removeChild(def,parent);
}else {
changeProxy.replaceWith(parent,def,new Node(Token.VOID,Node.newNumber(0)));
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(!getThreadTrace().isInitialized()){
return 0;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkNotNull(def.getParent());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.addChildToFront(new Node(Token.VAR,defCfgNode));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.detachFromParent();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(!NodeUtil.isStatementBlock(def.getParent())){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
reportCodeChange();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def=def.getFirstChild();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
aliasGlobals(def,def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
removeInlinedFunctions();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if((FunctionType)def.getJSType()==null){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
execute().notifyCompiler(compiler);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(def.getParent().getParent()==null){
return null;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkNotNull(def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
traverseBranch(def.getNext(),def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(defCfgNode.getJSType()==null||type.isUnknownType()){
return "";
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new NonExternChecks());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
fillInFunctionInformation(constructDefinitionProvider(def,def));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
mapping.node=node;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,def.cloneTree());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(isVariableReadBeforeKill(def.getNext(),varName)==VariableLiveness.READ){
return state;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
varName="";
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
defCfgNode=def;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
compiler.reportCodeChange();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
compiler.getTypeRegistry().checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(def.getFirstChild()==null){
return def;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkArgument(getPrototype().hasProperty(varName));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkArgument(NodeUtil.isName(def));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkArgument(NodeUtil.isFunction(defCfgNode));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def=def;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
fixFunctionType(defCfgNode);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.removeChild(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(hasErrors()){
return ;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
info.isAliased=true;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.THIS :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isStatement(defCfgNode)){
return true;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.removeChild(def.getFirstChild());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
defCfgNode.removeChild(defCfgNode);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,def.getLastChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(hasBreakOrContinue(def)){
return n;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
varName=null;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
maybeSanityCheck();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(def.getFirstChild().getType()==Token.NAME&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.addChildToBack(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.addChildToBack(def.removeChildAfter(outerBlock));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
try{
def=new Reader().parse(compiler);
}catch (JsonMLException e) {
}

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isExprAssign(def)){
return n.getFirstChild().getFirstChild();
}else {
return n.getFirstChild();
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(NodeUtil.isStatementBlock(def.getParent()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
renameProperties();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.getParent().replaceChild(def,def.getLastChild());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.getParent().addChildBefore(def,def);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.setType(Token.ASSIGN);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(isVar(def.getParent())){
return def.getFirstChild();
}else if(isAssign(parent)&&parent.getFirstChild()==n){
return n.getNext();
}else {
return null;
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.removeChild(def.getLastChild());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,def.getFirstChild());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(def.getJSDocInfo()==null&&NodeUtil.isFunctionExpression(def)){
Node def.getParent()=n.getParent();
if(parent.getType()==Token.ASSIGN){
fnInfo=parent.getJSDocInfo();
}else if(parent.getType()==Token.NAME){
fnInfo=parent.getParent().getJSDocInfo();
}
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
super(cfg,new LiveVariableJoinOp());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
super(cfg,new ReachingUsesJoinOp());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getType()==Token.BLOCK);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
def=child.getFirstChild();
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(def==null||compiler.hasHaltingErrors()){
root=new Node(Token.BLOCK);
}else {
compiler.prepareAst(root);
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
current.renameMap.put(def.getFirstChild().getString(),new LabelInfo(numUseWithinUseCfgNode));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(!(def.getType()==Token.SCRIPT||def!=null&&grandparent.getType()==Token.FUNCTION&&parent.getType()==Token.BLOCK)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkArgument(defCfgNode!=def);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
numUseWithinUseCfgNode=0;
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
def.replaceChild(def,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
if(def==null||n==defCfgNode){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
if(isExpressionTreeUnsafe(def,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(compiler==null){
return null;
}
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
numUseWithinUseCfgNode=-1;
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
this.def=new Node(Token.BLOCK);
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
aliasRefs.references.get(numUseWithinUseCfgNode).getParent().checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.NAME :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.VAR :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ReferenceCollectingCallback(compiler,ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR));
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.AND :

cfa.process(null,t.getScopeRoot().getLastChild());

========
========
case Token.TYPEOF :

ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
========
ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
case Token.FALSE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,126
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef.analyze();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfg=cfa.getCfg();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.push(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(t.inGlobalScope()){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
stopTracer(newTracer("computeCFG"),"computeCFG");
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(fastAllPathsReturnCheck(t.getControlFlowGraph())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(defCfgNode==def||executingCase.getType()!=Token.DEFAULT);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getLastChild().getType()==Token.BLOCK);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(defCfgNode.getParent().getLastChild()!=defCfgNode&&def!=null){
Node def.getLastChild()=previousCase.getLastChild();
if(!previousBlock.hasChildren()||!isExit(previousBlock.getLastChild())){
return false;
}
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(!NodeUtil.isFunction(t.getScopeRoot())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(def.getParent()!=null);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
ensureTyped(t,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.SET :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.TRUE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.REF_SPECIAL :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.NULL :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
t.traverse(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
endTraversal(t);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getLastChild().getNext()==null&&body.getType()==Token.BLOCK);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.GETPROP :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getType()==numUseWithinUseCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(!NodeUtil.isExprAssign(def)){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.report(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(NodeUtil.isFunction(def)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(compiler.getLifeCycleStage().isNormalized()){
(new Normalize(compiler,true)).process(def,def);
if(compiler.getLifeCycleStage().isNormalizedUnobfuscated()){
boolean true=true;
CompilerPass new Normalize.VerifyConstants(compiler,true)=new Normalize.VerifyConstants(compiler,checkUserDeclarations);
pass.process(externs,root);
}
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getType()==Token.INSTANCEOF);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(report.success,COMPILATION_UNSUCCESSFUL_MSG);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
Preconditions.checkState(numUseWithinUseCfgNode>=0);
cfg=cfa.getCfg();

========
========
case Token.VAR :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case GET_NUMBER :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
new FunctionNames(compiler).process(null,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(varName!=null);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.varName=key;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.varName=id;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.add(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def==null||def.getParent().hasChild(externsRoot));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getParent().hasChild(def));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
compiler.reportCodeChange();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
super.visit(t,def,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
process(def,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkArgument(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
var.name=name;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getType()==Token.FUNCTION);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getFirstChild()==null||addingRoot.getFirstChild().getType()!=Token.SCRIPT);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.removeChild(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.WHILE :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.FOR :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(!definitionSite.inExterns);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(definitionSite.definition.getRValue()==def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getParent()!=null);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
this.defCfgNode=assignNode;
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
this.defCfgNode=nameNode;
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.DEC :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.POS :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(insideGetUniqueIdCall(def,def)){
continue;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(insideAssignmentToIdConstant(def,def)){
continue;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.FUNCTION :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.addEntry(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.LP :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
super.visit(t,def,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,this);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(def.getType()==Token.STRING,"Bad GETPROP: RHS should be STRING");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.compiler=compiler;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case OVERRIDE_DEFAULT_VALUE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(numUseWithinUseCfgNode>=2&&childCount<=3);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
add(def,Context.PRESERVE_BLOCK);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(!NodeUtil.isName(def)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.detachFromParent();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
endPass();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
process(new ExternExportsPass(this));
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
varName="";
cfg=cfa.getCfg();

========
========
traverseBranch(def,null);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
popScope();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,namespace),createNamespaceLiteral())).copyInformationFromForTree(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def=def.getFirstChild();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
aliasGlobals(def,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.copyInformationFromForTree(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(NodeUtil.isGetOrSetKey(def.getParent())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkArgument(getPrototype().hasProperty(varName));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkArgument(NodeUtil.isName(def));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkNotNull(def.getParent());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new FindCandidateFunctions());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
nameObj.type=type;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkArgument(NodeUtil.isFunction(defCfgNode));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
if(def.getType()!=Token.GETPROP){
return ;
}
cfg=cfa.getCfg();

========
========
if(hasErrors()){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
reportCodeChange();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
mapping.node=node;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(!getThreadTrace().isInitialized()){
return 0;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(!NodeUtil.isStatementBlock(def.getParent())){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.removeChild(def.getFirstChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
defCfgNode.removeChild(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
addExpr(def,NodeUtil.precedence(numUseWithinUseCfgNode));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(hasBreakOrContinue(def)){
return n;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.ASSIGN :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
fixFunctionType(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if((FunctionType)def.getJSType()==null){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(NodeUtil.isExpressionNode(def)){
t.removeChild(def,parent);
}else {
changeProxy.replaceWith(parent,def,new Node(Token.VOID,Node.newNumber(0)));
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(NodeUtil.isExprAssign(def)){
return n.getFirstChild().getFirstChild();
}else {
return n.getFirstChild();
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
traverseBranch(def.getNext(),def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getFirstChild()==null){
return def;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
fillInFunctionInformation(constructDefinitionProvider(def,def));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
process(new RemoveTryCatch(this));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
new SimpleFunctionAliasAnalysis().analyze(new SimpleDefinitionFinder(compiler));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(isValueUsed(useCfgNode)){
return true;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.getParent().replaceChild(def,def.getLastChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
super(cfg,new LiveVariableJoinOp());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
super(cfg,new ReachingUsesJoinOp());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.replaceChild(def,def.getLastChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
this.compiler=compiler;
cfg=cfa.getCfg();

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.setIn(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.varName=t.getSourceName();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(NodeUtil.isStatementBlock(def.getParent()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(isVariableReadBeforeKill(def.getNext(),varName)==VariableLiveness.READ){
return state;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.defCfgNode=nameNode;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.removeChild(def.getLastChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.replaceChild(def,def.getFirstChild());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.getParent().addChildBefore(def,def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.MUL :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.BITXOR :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
getInfo(graph.MAIN).markReference(null);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(NodeUtil.isStatement(defCfgNode)){
return true;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(def.getType()==Token.BLOCK);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def=child.getFirstChild();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(isVar(def.getParent())){
return def.getFirstChild();
}else if(isAssign(parent)&&parent.getFirstChild()==n){
return n.getNext();
}else {
return null;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
this.varName=newName;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getParent().getParent()==null){
return null;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
current.renameMap.put(def.getFirstChild().getString(),new LabelInfo(numUseWithinUseCfgNode));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
if(!def.hasChildren()){
return ;
}
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
defCfgNode=def;
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkState(decl.node.getParent().getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
decl.node.getParent().detachFromParent();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
Preconditions.checkArgument(defCfgNode!=def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
numUseWithinUseCfgNode++;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
cache.dirtySymbols.add(varName);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
add(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
add("in");
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
varName="right side of comparison";
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(defCfgNode.getJSType()==null||type.isUnknownType()){
return "";
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
traverseNodes(def);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
formatConclusion();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getJSDocInfo()==null&&NodeUtil.isFunctionExpression(def)){
Node def.getParent()=n.getParent();
if(parent.getType()==Token.ASSIGN){
fnInfo=parent.getJSDocInfo();
}else if(parent.getType()==Token.NAME){
fnInfo=parent.getParent().getJSDocInfo();
}
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
varName=null;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
maybeSanityCheck();
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
cfg.createNode(defCfgNode);
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
varName=varName;
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
super(cfg,new MustDefJoin());
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.append(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
for(Node def : def.getAncestors()){
if(ancestor.getType()==Token.SCRIPT){
info.parentForNewVarDecl=ancestor;
info.siblingToInsertVarDeclBefore=def;
break;
}
prev=ancestor;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def==null||n==defCfgNode){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(isExpressionTreeUnsafe(def,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getFirstChild().getType()==Token.NAME&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(defCfgNode!=null){
return defaultValueNode;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(registerCall.valueNode!=null){
return registerCall.valueNode;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
this.numUseWithinUseCfgNode=lineLengthThreshold;
cfg=cfa.getCfg();

========
========
if(!(def.getType()==Token.SCRIPT||def!=null&&grandparent.getType()==Token.FUNCTION&&parent.getType()==Token.BLOCK)){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
compiler.getTypeRegistry().checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getType()==Token.VAR||parent.getType()==Token.FUNCTION){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(def.getType()==Token.CALL&&parent.getFirstChild()==def){
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.NAME :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(parts.length==2){
return varName.split("\\.prototype\\.")[1];
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
if(parts.length==2){
return varName.split("\\.prototype\\.")[0];
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
process(new Normalize(this,false));
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.TYPEOF :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
case Token.GT :

cfg=cfa.getCfg();

========
========
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
case Token.AND :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case AGGRESSIVE_HEURISTIC :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
default :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.FALSE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.COMMA :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
Preconditions.checkState(numUseWithinUseCfgNode<numUseWithinUseCfgNode||numUseWithinUseCfgNode<numUseWithinUseCfgNode);
if(numUseWithinUseCfgNode==numUseWithinUseCfgNode&&numUseWithinUseCfgNode==numUseWithinUseCfgNode){
Preconditions.checkState(false);
return ;
}
Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.SHEQ :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.SHNE :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.RETURN :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
========
case Token.SCRIPT :

Preconditions.checkState(NodeUtil.isFunction(t.getScopeRoot()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,127
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
reachingDef.analyze();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
stopTracer(newTracer("computeCFG"),"computeCFG");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkNotNull(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
new FunctionNames(compiler).process(null,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
t.traverse(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
endTraversal(t);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(t.inGlobalScope()){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
ensureTyped(t,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
compiler.reportCodeChange();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeTraversal.traverse(compiler,def,this);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkNotNull(def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.copyInformationFromForTree(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
numUseWithinUseCfgNode++;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(!NodeUtil.isExprAssign(def)){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
getInfo(graph.MAIN).markReference(null);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
ref.node.getParent().removeChild(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(true));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkArgument(NodeUtil.isFunction(def),"Node must be a function.");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
traverseNodes(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
formatConclusion();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(def.getLastChild().getNext()==null&&body.getType()==Token.BLOCK);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case GET_NUMBER :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),defCfgNode);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
super.visit(t,def,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.GETPROP :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
if(def.getType()!=Token.GETPROP){
return ;
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def=tryMinimizeCondition(right);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
if(!def.hasChildren()){
return ;
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
defCfgNode=def;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.TRUE :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.REF_SPECIAL :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.NULL :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeUtil.copyNameAnnotations(def.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.removeChild(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.removeChild(def.getFirstChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
defCfgNode.removeChild(defCfgNode);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.DEC :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.POS :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new Traversal());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.getParent().replaceChild(def,def.getLastChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.compiler=compiler;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
defCfgNode=tryMinimizeCondition(falseNode);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherCallSites());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.getLastChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(def.getLastChild().getType()==Token.BLOCK){
NodeUtil.tryMergeBlock(newChild);
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.VAR :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.removeChild(def.getLastChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.getFirstChild());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(!NodeUtil.isName(def)){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new Callback());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
new PrepareAst(this).process(null,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case OVERRIDE_DEFAULT_VALUE :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case GET_BOOLEAN :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
process(new ExternExportsPass(this));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
endPass();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
nameObj.type=type;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
execute().notifyCompiler(compiler);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
process(new RecordFunctionInformation(this,getPassConfig().getIntermediateState().compiler));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
fixFunctionType(defCfgNode);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(true));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
markPureFunctionCalls();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkState(NodeUtil.isAssignmentOp(defCfgNode));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.defCfgNode=assignNode;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.defCfgNode=nameNode;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.varName=t.getSourceName();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new AddMarkers(compiler));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new AddChecks());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
addAliasDeclarationNodes();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(NodeUtil.isName(def)||NodeUtil.isGet(expr));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def.getLastChild(),new Node(NodeUtil.getOpFromAssignmentOp(def)).copyInformationFrom(parent));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(true));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(hasErrors()){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.LP :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkArgument(def.getLastChild().getType()==Token.RETURN);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.ASSIGN :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
compiler.setCssRenamingMap(new CssRenamingMap(){
  public String get(  String value){
    if (cssNames.containsKey(value)) {
      return cssNames.get(value);
    }
 else {
      return value;
    }
  }
}
);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
removeInlinedFunctions();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(findExpressionRoot(def)!=null);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.compiler=Preconditions.checkNotNull(compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(def.getParent().getFirstChild()==var.getLastChild(),"AST should be normalized first");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.VAR,defCfgNode));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindAliasableNodes());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(def.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.detachFromParent();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
compiler.addToDebugLog("JS property assignments:");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeTraversal.traverse(compiler,def,new FindDependencyScopes());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new HoistVariableAndFunctionDeclarations());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindReferences());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.cloneTree());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherExtractionInfo());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.WHILE :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.FOR :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
occurrence.parent.replaceChild(occurrence.node,Node.newString(Token.NAME,varName));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildToBack(def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildToBack(def.removeChildAfter(outerBlock));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
varName="right side of comparison";
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
process(new RemoveTryCatch(this));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.def=new Node(Token.BLOCK);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindExternProperties());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
renameProperties();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.removeChild(defCfgNode);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
for(Node def : def.getAncestors()){
if(ancestor.getType()==Token.SCRIPT){
info.parentForNewVarDecl=ancestor;
info.siblingToInsertVarDeclBefore=def;
break;
}
prev=ancestor;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.MUL :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.BITXOR :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.copyInformationFromForTree(def);
compiler.reportCodeChange();
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
defCfgNode.replaceChild(def,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
Preconditions.checkState(def.getParent()!=null);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(def.getFirstChild()),"Cannot unfold compound assignment if LHS can have side effects");
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.setType(Token.ASSIGN);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
UNKNOWN=new Name("{UNKNOWN}",true);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
UNKNOWN.type=compiler.getTypeRegistry().getNativeType(JSTypeNative.NO_TYPE);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.createNode(UNKNOWN);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
MAIN=new Name("{Global Main}",true);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.varName=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
compiler.addToDebugLog("Unreferenced var: "+var.name);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
this.compiler=compiler;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
def=def;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkNotNull(compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkNotNull(compiler);
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.defCfgNode=rootNode;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new CollectTweaks());
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.varName=fnName==null?"":fnName;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.def=errorRoot;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
instance.parent.addChildBefore(new Node(first.node.getType(),new Node(Token.ASSIGN,Node.newString(Token.NAME,varName),NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),first.qualifiedClassName+".prototype",instance.parent,className+".prototype"))).copyInformationFromForTree(first.node),first.node);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
if(compiler==null){
return null;
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
numUseWithinUseCfgNode=-1;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkArgument(compiler!=null);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
Preconditions.checkArgument(compiler!=null);
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.def=null;
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
compiler.report(JSError.make(RhinoErrorReporter.PARSE_ERROR,"Error reading instrumentation template protobuf at "+varName));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
this.varName="";
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.NAME :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.HOOK :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.TYPEOF :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
case Token.AND :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
case Token.GT :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.AND :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
this.varName="";
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
case Token.COMMA :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
========
default :

cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,128
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfa.process(null,t.getScopeRoot().getLastChild());
candidates=Lists.newLinkedList();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
tryRemoveDeadAssignments(t,cfg);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new LiveVariableJoinOp());
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new ReachingUsesJoinOp());
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
cfa.process(null,t.getScope().getRootNode());
reachingDef.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new MustDefJoin());
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.compiler=compiler;
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,this);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
formatPreamble();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
traverseNodes(def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
formatConclusion();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg.createNode(defCfgNode);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
orderedWorkSet.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
badFunctionNodes.analyze();

========
========
cfa.add(t.getScopeRoot());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
setErrorManager(compiler.getErrorManager());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.copyInformationFromForTree(def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.getParent().addChildBefore(def,parent);
reachingDef.analyze();

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.compiler=compiler;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(insideGetUniqueIdCall(def,def)){
continue;
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(insideAssignmentToIdConstant(def,def)){
continue;
}
reachingDef.analyze();

========
========
if(MAKE_LOCAL_NAMES_UNIQUE){
MakeDeclaredNamesUnique new MakeDeclaredNamesUnique()=new MakeDeclaredNamesUnique();
NodeTraversal t=new NodeTraversal(compiler,renamer);
t.traverseRoots(def,def);
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
process(cfa);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
stopTracer(newTracer("computeCFG"),"computeCFG");
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.removeChild(def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(defCfgNode==null){
reportBadBaseClassUse(t,def,"Could not find goog.inherits for base class");
return ;
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
reachingDef.analyze();

========
========
this.varName=Preconditions.checkNotNull(varName);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ShadowDeclarationCheckingCallback());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
Preconditions.checkNotNull(def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
compiler.analyze();

========
========
NodeTraversal.traverse(compiler,def,new NonExternChecks());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new AddChecks());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
addBoilerplateCode();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.setString(coalescedVar.name);
reachingDef.analyze();

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(new Node(Token.VAR,Node.newString(Token.NAME,EXTERN_OBJECT_PROPERTY_STRING)));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,def.cloneTree());
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
fixFunctionType(defCfgNode);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reads.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
writes.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
parent.analyze();

========
========
info.isAliased=true;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
compiler.reportCodeChange();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
trimCanidatesNotMeetingMinimumRequirements();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def=def;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
propagateSideEffects();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
exposeExpression(findExpressionRoot(def),def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.def.setIsSyntheticBlock(true);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
if(new GatherExtractionInfo().shouldExtract()){
doExtraction(extractionInfo);
compiler.reportCodeChange();
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.varName=exportSymbolFunction;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
defCfgNode.addChildToFront(def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,defCfgNode));
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new DefinitionGatheringCallback(false));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new UseSiteGatheringCallback());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
resolveInlineConflicts();
reachingDef.analyze();

========
========
removeInlinedFunctions();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindDependencyScopes());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new HoistVariableAndFunctionDeclarations());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
replaceStringsWithAliases();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
addAliasDeclarationNodes();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
declareNativeFunctionType(new Scope(def,compiler),ARRAY_FUNCTION_TYPE);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
new NameReferenceGraphConstruction(compiler).process(def,def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
getInfo(graph.MAIN).markReference(null);
reachingDef.analyze();

========
========
Preconditions.checkState(def.getParent().hasChild(def));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceThis(def.cloneTree(),def.getFirstChild().removeFirstChild());
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def==null){
return ;
}
reachingDef.analyze();

========
========
defCfgNode.replaceChild(def,def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
abstractMethodAssignmentNodes.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(def.removeChildAfter(outerBlock));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.setString(varName);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
callNodeToParentMap.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(!defCfgNode.hasChildren()){
def.removeChild(varNode);
}
reachingDef.analyze();

========
========
Preconditions.checkNotNull(varName);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.varName=exportPropertyFunction;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.compiler=compiler;
this.varName=exportSymbolFunction;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(NodeUtil.isExprCall(def)){
parent.getParent().replaceChild(parent,new Node(Token.EMPTY));
}else {
Node def=def;
parent.replaceChild(call,NodeUtil.newUndefinedNode(srcLocation));
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
quotedNames.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
logger.analyze();

========
========
new FunctionNames(compiler).process(null,def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
recordReplacement(def,varName,varName);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,def);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
if(def.getLastChild().getType()==Token.FUNCTION&&!NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild())){
compiler.report(t.makeError(def,INTERFACE_FUNCTION_NOT_EMPTY,compiler.getCodingConvention().getAbstractMethodName()));
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
props.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
accessors.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
mutators.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,Node.newString(varName));
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
renameProperties();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(Node.newString(Token.NAME,varName).copyInformationFrom(def));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,Node.newString(Token.NAME,varName));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externalNoShadowVariableNames.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
anonFns.analyze();

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceNode(defCfgNode.getParent(),parentNode,new Node(Token.CALL,Node.newString(Token.NAME,getMutatorFor(defCfgNode.getString())),def,def));
reachingDef.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.detachFromParent();
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.addChildToFront(def);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
parentForNewVarDecl.analyze();

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
varsToRemove.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",defCfgNode.getFirstChild().getFirstChild().getQualifiedName(),varName),callee,"goog.base"));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.removeChild(defCfgNode);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.defCfgNode=rootNode;
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def!=null){
def.addChildAfter(def,nameToAddAfter);
}else {
varParent.addChildBefore(newVar,defCfgNode);
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new SimpleDefinitionFinder(compiler).process(def,def);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.cloneTree().setType(NodeUtil.getOpFromAssignmentOp(def));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.setType(Token.ASSIGN);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.getLastChild().addChildToFront(NodeUtil.newVarNode(varName.getQualifiedName(),def.cloneTree()));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
case GET_BOOLEAN :

cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.varName=fnName==null?"":fnName;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.def=errorRoot;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
Node.newString(Token.NAME,getArrayNotationNameFor(varName)).addChildToFront(Node.newString(Token.STRING,varName));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.copyInformationFromForTree(def);
def.addChildToBack(def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
node.analyze();

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(NodeUtil.isExpressionNode(def)){
parent.getParent().removeChild(parent);
}else {
Node def.getFirstChild().getNext()=def.getFirstChild().getNext();
if(firstArg==null){
parent.replaceChild(call,NodeUtil.newUndefinedNode(call));
}else {
parent.replaceChild(call,firstArg.detachFromParent());
}
}
reachingDef.analyze();

========
========
case OVERRIDE_DEFAULT_VALUE :

cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
globals.analyze();

========
========
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
case Token.DEC :

cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
case Token.POS :

cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
varsToDeclareInExterns.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
UNKNOWN=new Name("{UNKNOWN}",true);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
UNKNOWN.isAliased=true;
reachingDef.analyze();

========
========
this.createNode(UNKNOWN);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
MAIN=new Name("{Global Main}",true);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
if(def.getJSType()!=null){
NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName).setJSType(type);
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externPropertyNames.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
initialValueParent.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
initialValue.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(Node.newString(varName));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externMethodsWithoutSignatures.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
knownLocals.analyze();

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
if(!varName.isEmpty()){
Node new Node(Token.CALL,Node.newString(Token.NAME,varName),Node.newString(varName))=new Node(Token.CALL,Node.newString(Token.NAME,appNameSetter),Node.newString(varName));
Node new Node(Token.EXPR_RESULT,new Node(Token.CALL,Node.newString(Token.NAME,varName),Node.newString(varName)))=new Node(Token.EXPR_RESULT,call);
Node compiler.getNodeForCodeInsertion(null)=compiler.getNodeForCodeInsertion(null);
addingRoot.addChildrenToFront(expr);
compiler.reportCodeChange();
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(defCfgNode);
reachingDef.analyze();

========
========
this.def=null;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
def.replaceChild(alias.node,new Node(Token.NULL));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
validator.analyze();

========
========
this.numUseWithinUseCfgNode=numWorkers;
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
compiler.addToDebugLog(p.oldName+" => ");
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(numUseWithinUseCfgNode<0){
return ;
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,new Node(Token.CALL,Node.newString(Token.NAME,STUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode)).copyInformationFromForTree(value));
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
reachingDef.analyze();

========
========
handleGet(t,def,def,varName,Ref.Type.PROTOTYPE_GET);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.getParent().addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE))),nodeToInsertAfter);
reachingDef.analyze();

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
newName.analyze();

========
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
numUseWithinUseCfgNode++;
reachingDef.analyze();

========
========
if(p.refs.get(0).t.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
refNodes.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def!=null){
return root;
}
reachingDef.analyze();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
reachingDef.analyze();

========
========
case Token.SET :

cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
========
this.varName="";
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,129
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
cfa.process(null,t.getScopeRoot().getLastChild());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfa.process(null,t.getScopeRoot().getLastChild());
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.SIDE_EFFECT_PREDICATE=shouldSplit;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.def=root;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
tryRemoveDeadAssignments(t,cfg);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
this.compiler=compiler;
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new LiveVariableJoinOp());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new ReachingUsesJoinOp());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
super(cfg,new MustDefJoin());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.compiler=compiler;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,this);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
setErrorManager(compiler.getErrorManager());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.compiler=compiler;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(!NodeUtil.isFunction(def)){
return ;
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(insideGetUniqueIdCall(def,def)){
continue;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(insideAssignmentToIdConstant(def,def)){
continue;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.copyInformationFromForTree(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.getParent().addChildBefore(def,parent);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(MAKE_LOCAL_NAMES_UNIQUE){
MakeDeclaredNamesUnique new MakeDeclaredNamesUnique()=new MakeDeclaredNamesUnique();
NodeTraversal t=new NodeTraversal(compiler,renamer);
t.traverseRoots(def,def);
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(defCfgNode==null){
reportBadBaseClassUse(t,def,"Could not find goog.inherits for base class");
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.removeChild(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
cfa.process(null,t.getScope().getRootNode());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
cfg=cfa.getCfg();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
cfa.process(null,t.getScope().getRootNode());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeTraversal.traverse(compiler,def,new ShadowDeclarationCheckingCallback());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
Preconditions.checkNotNull(def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
execute().notifyCompiler(compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
compiler.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new NonExternChecks());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(new Node(Token.VAR,Node.newString(Token.NAME,EXTERN_OBJECT_PROPERTY_STRING)));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new AddChecks());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
addBoilerplateCode();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.setString(coalescedVar.name);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,def.cloneTree());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
fixFunctionType(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reads.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
writes.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
parent.analyze();
candidates=Lists.newLinkedList();

========
========
compiler.reportCodeChange();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
trimCanidatesNotMeetingMinimumRequirements();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def=def;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
propagateSideEffects();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
exposeExpression(findExpressionRoot(def),def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.varName=exportSymbolFunction;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new DefinitionGatheringCallback(false));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new UseSiteGatheringCallback());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(new GatherExtractionInfo().shouldExtract()){
doExtraction(extractionInfo);
compiler.reportCodeChange();
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
replaceStringsWithAliases();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
addAliasDeclarationNodes();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
defCfgNode.addChildToFront(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,defCfgNode));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
resolveInlineConflicts();
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
removeInlinedFunctions();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.def.setIsSyntheticBlock(true);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
badFunctionNodes.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new FindDependencyScopes());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new HoistVariableAndFunctionDeclarations());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def==null){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
declareNativeFunctionType(new Scope(def,compiler),ARRAY_FUNCTION_TYPE);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
abstractMethodAssignmentNodes.analyze();
candidates=Lists.newLinkedList();

========
========
Preconditions.checkState(def.getParent().hasChild(def));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceThis(def.cloneTree(),def.getFirstChild().removeFirstChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new NameReferenceGraphConstruction(compiler).process(def,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
getInfo(graph.MAIN).markReference(null);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.setString(varName);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
callNodeToParentMap.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(def.removeChildAfter(outerBlock));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToBack(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
cfg.createNode(defCfgNode);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
defCfgNode.replaceChild(def,def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(!defCfgNode.hasChildren()){
def.removeChild(varNode);
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
Preconditions.checkNotNull(varName);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.varName=exportPropertyFunction;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.compiler=compiler;
this.varName=exportSymbolFunction;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
logger.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(NodeUtil.isExprCall(def)){
parent.getParent().replaceChild(parent,new Node(Token.EMPTY));
}else {
Node def=def;
parent.replaceChild(call,NodeUtil.newUndefinedNode(srcLocation));
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
quotedNames.analyze();
candidates=Lists.newLinkedList();

========
========
new FunctionNames(compiler).process(null,def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
recordReplacement(def,varName,varName);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(Node.newString(Token.NAME,varName).copyInformationFrom(def));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
props.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
accessors.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
mutators.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,Node.newString(varName));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(def.getLastChild().getType()==Token.FUNCTION&&!NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild())){
compiler.report(t.makeError(def,INTERFACE_FUNCTION_NOT_EMPTY,compiler.getCodingConvention().getAbstractMethodName()));
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
renameProperties();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.detachFromParent();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.addChildToFront(def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
anonFns.analyze();
candidates=Lists.newLinkedList();

========
========
checkForFunctionsWithUnknownTypes(def);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeUtil.newFunctionNode("",Lists.newLinkedList(),new Node(Token.BLOCK),-1,-1).setJSType(def.getJSType());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,Node.newString(Token.NAME,varName));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externalNoShadowVariableNames.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
replaceNode(defCfgNode.getParent(),parentNode,new Node(Token.CALL,Node.newString(Token.NAME,getMutatorFor(defCfgNode.getString())),def,def));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
parentForNewVarDecl.analyze();
candidates=Lists.newLinkedList();

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
this.defCfgNode=rootNode;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.varName=t.getSourceName();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
varsToRemove.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",defCfgNode.getFirstChild().getFirstChild().getQualifiedName(),varName),callee,"goog.base"));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.removeChild(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def!=null){
def.addChildAfter(def,nameToAddAfter);
}else {
varParent.addChildBefore(newVar,defCfgNode);
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def=def;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.getLastChild().addChildToFront(NodeUtil.newVarNode(varName.getQualifiedName(),def.cloneTree()));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new SimpleDefinitionFinder(compiler).process(def,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
UNKNOWN=new Name("{UNKNOWN}",true);
candidates=Lists.newLinkedList();

========
========
this.createNode(UNKNOWN);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
MAIN=new Name("{Global Main}",true);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.cloneTree().setType(NodeUtil.getOpFromAssignmentOp(def));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.setType(Token.ASSIGN);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
defCfgNode=defCfgNode.getNext();
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
case GET_BOOLEAN :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
this.varName=fnName==null?"":fnName;
candidates=Lists.newLinkedList();

========
========
this.def=errorRoot;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.copyInformationFromForTree(def);
def.addChildToBack(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
node.analyze();
candidates=Lists.newLinkedList();

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
Node.newString(Token.NAME,getArrayNotationNameFor(varName)).addChildToFront(Node.newString(Token.STRING,varName));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
case OVERRIDE_DEFAULT_VALUE :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(NodeUtil.isExpressionNode(def)){
parent.getParent().removeChild(parent);
}else {
Node def.getFirstChild().getNext()=def.getFirstChild().getNext();
if(firstArg==null){
parent.replaceChild(call,NodeUtil.newUndefinedNode(call));
}else {
parent.replaceChild(call,firstArg.detachFromParent());
}
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
globals.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
varsToDeclareInExterns.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externPropertyNames.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
externMethodsWithoutSignatures.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
moduleGraph.analyze();
candidates=Lists.newLinkedList();

========
========
if(def.getJSType()!=null){
NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName).setJSType(type);
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
initialValueParent.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
initialValue.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(Node.newString(varName));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
knownLocals.analyze();
candidates=Lists.newLinkedList();

========
========
this.def=null;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(!varName.isEmpty()){
Node new Node(Token.CALL,Node.newString(Token.NAME,varName),Node.newString(varName))=new Node(Token.CALL,Node.newString(Token.NAME,appNameSetter),Node.newString(varName));
Node new Node(Token.EXPR_RESULT,new Node(Token.CALL,Node.newString(Token.NAME,varName),Node.newString(varName)))=new Node(Token.EXPR_RESULT,call);
Node compiler.getNodeForCodeInsertion(null)=compiler.getNodeForCodeInsertion(null);
addingRoot.addChildrenToFront(expr);
compiler.reportCodeChange();
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
for(Node def : def.getAncestors()){
if(ancestor.getType()==Token.SCRIPT){
info.parentForNewVarDecl=ancestor;
info.siblingToInsertVarDeclBefore=def;
break;
}
prev=ancestor;
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
validator.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
candidates=Lists.newLinkedList();

========
========
this.numUseWithinUseCfgNode=numWorkers;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def.replaceChild(alias.node,new Node(Token.NULL));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
compiler.addToDebugLog(p.oldName+" => ");
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(numUseWithinUseCfgNode<0){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
numUseWithinUseCfgNode++;
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
if(p.refs.get(0).t.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.replaceChild(def,new Node(Token.CALL,Node.newString(Token.NAME,STUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode)).copyInformationFromForTree(value));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
def.getParent().addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE))),nodeToInsertAfter);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
newName.analyze();
candidates=Lists.newLinkedList();

========
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
if(compiler==null){
return null;
}
candidates=Lists.newLinkedList();

========
========
numUseWithinUseCfgNode=-1;
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
refNodes.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(def!=null){
return root;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
case Token.LP :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
case Token.SET :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
this.varName="";
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
this.varName="";
candidates=Lists.newLinkedList();

========
========
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
case Token.OR :

candidates=Lists.newLinkedList();

========
========
case Token.HOOK :

reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,130
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
t.traverse(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
endTraversal(t);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new DefinitionGatheringCallback(false));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new UseSiteGatheringCallback());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FindReferences());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
referenceAliases();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ShadowDeclarationCheckingCallback());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,this);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new AddChecks());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def=def;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
markPureFunctionCalls();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,this);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
addAliasDeclarationNodes();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new FindCandidateFunctions());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(fastAllPathsReturnCheck(t.getControlFlowGraph())){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addInvalidatingType(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
renameProperties();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkNotNull(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
removeInlinedFunctions();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new NonExternChecks());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
if(t.inGlobalScope()){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addAliasNodes(t.getScopeRoot().getLastChild());

========
========
badFunctionNodes.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
t.add(t.getScopeRoot());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
this.compiler=compiler;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
numUseWithinUseCfgNode++;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.compiler=compiler;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setErrorManager(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
this.compiler=compiler;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(def.getType()==Token.FUNCTION){
decl=decl.getLastChild();
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkArgument(def.getType()==Token.BLOCK);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new CreateScope(this,false));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(!NodeUtil.isFunction(t.getScopeRoot())){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfg=cfa.getCfg();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
ensureTyped(t,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
compiler.reportCodeChange();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
node.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
compiler.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.SIDE_EFFECT_PREDICATE=shouldSplit;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.def=root;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
numUseWithinUseCfgNode=0;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
props.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
accessors.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
def.copyInformationFromForTree(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).report(t.getScopeRoot().getLastChild());

========
========
if(insideGetUniqueIdCall(def,def)){
continue;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(insideAssignmentToIdConstant(def,def)){
continue;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
abstractMethodAssignmentNodes.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
execute().notifyCompiler(compiler);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
def.detachFromParent();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
symbolGraph.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setString(t.getScopeRoot().getLastChild());

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,def.cloneTree());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
quotedNames.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.getLastChild().detachFromParent();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
unknownNameUse.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
externMethodsWithoutSignatures.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
varsToRemove.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
changeProxy.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
if(def.getType()!=Token.GETPROP){
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new CreateScope(this,true));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.SET :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.TRUE :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.REF_SPECIAL :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.NULL :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reads.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
writes.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addChildToFront(t.getScopeRoot().getLastChild());

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
fixFunctionType(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.addChildToBack(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.addChildToBack(def.removeChildAfter(outerBlock));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
callNodeToParentMap.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.removeChild(def.getFirstChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
defCfgNode.removeChild(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.addChildToFront(new Node(Token.VAR,defCfgNode));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
logger.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
externalNoShadowVariableNames.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
if(!NodeUtil.isExprAssign(def)){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
super(cfg,new LiveVariableJoinOp());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
super(cfg,new ReachingUsesJoinOp());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(def==null){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.GETPROP :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverse(compiler,def,new ReferenceCollectingCallback(compiler,ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.removeChild(defCfgNode);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.getParent().replaceChild(def,def.getLastChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
UNKNOWN=new Name("{UNKNOWN}",true);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.createNode(UNKNOWN);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
MAIN=new Name("{Global Main}",true);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.removeChild(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setType(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def.getLastChild(),new Node(NodeUtil.getOpFromAssignmentOp(def)).copyInformationFrom(parent));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,def.getLastChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
new FunctionNames(compiler).process(null,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
refNodes.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
getInfo(graph.MAIN).markReference(null);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.removeChild(def.getLastChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,def.getFirstChild());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getParent().hasChild(def));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
if(!def.hasChildren()){
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
defCfgNode=def;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
anonFns.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
externPropertyNames.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
NodeUtil.newFunctionNode("",Lists.newLinkedList(),new Node(Token.BLOCK),-1,-1).setJSType(def.getJSType());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.setType(Token.ASSIGN);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
compiler.reportCodeChange();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setType(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
this.defCfgNode=assignNode;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
this.defCfgNode=nameNode;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
typesToSkip.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(!varName.equals(compiler.toSource(def))){
compiler.report(JSError.make(GENERATED_BAD_CODE,source,source2));
throw new IllegalStateException("Sanity Check failed");
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
mutators.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
parent.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case GET_NUMBER :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
super.visit(t,def,def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
closeLine();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
this.def=new Node(Token.BLOCK);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
globals.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
varsToDeclareInExterns.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.VAR :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
knownLocals.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
super(cfg,new MustDefJoin());
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case OVERRIDE_DEFAULT_VALUE :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(defCfgNode==def||executingCase.getType()!=Token.DEFAULT);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkState(def.getLastChild().getType()==Token.BLOCK);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
def.replaceChild(def,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addChildToBack(t.getScopeRoot().getLastChild());

========
========
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
closeLine(true);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(def==null||compiler.hasHaltingErrors()){
root=new Node(Token.BLOCK);
}else {
compiler.prepareAst(root);
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
super.visit(t,def,def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.DEC :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.POS :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.varName=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
moduleGraph.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).maybeDecomposeExpression(t.getScopeRoot().getLastChild());

========
========
if(def.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(!NodeUtil.isName(def)){
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
parentForNewVarDecl.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.varName=exportSymbolFunction;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.defCfgNode=rootNode;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.STRING :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.VOID :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.BITNOT :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
Preconditions.checkNotNull(varName);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.varName=exportPropertyFunction;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.compiler=compiler;
this.varName=exportSymbolFunction;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.WHILE :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.FOR :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
initialValueParent.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
initialValue.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.LP :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
nameObj.type=type;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.varName=t.getSourceName();
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
if(compiler==null){
return null;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
numUseWithinUseCfgNode=-1;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
this.varName=fnName==null?"":fnName;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.def=errorRoot;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.ASSIGN :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.AND :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.NAME :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
varName="right side of comparison";
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.TYPEOF :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.LP :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
case Token.GT :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.FUNCTION :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
validator.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
this.varName="";
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
compiler.addToDebugLog(p.oldName+" => ");
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.def=null;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
for(Node def : def.getAncestors()){
if(ancestor.getType()==Token.SCRIPT){
info.parentForNewVarDecl=ancestor;
info.siblingToInsertVarDeclBefore=def;
break;
}
prev=ancestor;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.MUL :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.BITXOR :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
if(def!=null){
return root;
}
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
reachingDef.analyze();
candidates=Lists.newLinkedList();
case Token.AND :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
this.numUseWithinUseCfgNode=numWorkers;
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
default :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
========
case Token.COMMA :

reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,134
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
reachingDef.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingDef.analyze();
reachingUses.analyze();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
t.traverse(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
endTraversal(t);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new HoistVariableAndFunctionDeclarations());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FindReferences());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
referenceAliases();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new AddMarkers(compiler));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new AddChecks());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new Traversal());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
def=def;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(true));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
markPureFunctionCalls();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
Preconditions.checkNotNull(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(true));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(true));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new Callback());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,this);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,this);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
addAliasDeclarationNodes();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
compiler.reportCodeChange();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addInvalidatingType(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindExternProperties());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
renameProperties();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.compiler=compiler;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
removeInlinedFunctions();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addAliasNodes(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new FindAliasableNodes());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
if(t.inGlobalScope()){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cfg=cfa.getCfg();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
def.copyInformationFromForTree(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setErrorManager(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
this.compiler=compiler;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
numUseWithinUseCfgNode++;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
compiler.reportCodeChange();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
ensureTyped(t,def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
ref.node.getParent().removeChild(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkArgument(NodeUtil.isFunction(def),"Node must be a function.");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.SIDE_EFFECT_PREDICATE=shouldSplit;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.def=root;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkState(def.getLastChild().getNext()==null&&body.getType()==Token.BLOCK);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).report(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new CollectTweaks());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
compiler.setCssRenamingMap(new CssRenamingMap(){
  public String get(  String value){
    if (cssNames.containsKey(value)) {
      return cssNames.get(value);
    }
 else {
      return value;
    }
  }
}
);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
execute().notifyCompiler(compiler);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeTraversal.traverse(compiler,def,new Callback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setString(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),defCfgNode);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkState(def.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
def.detachFromParent();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.compiler=Preconditions.checkNotNull(compiler);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
compiler.addToDebugLog("JS property assignments:");
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
Preconditions.checkState(findExpressionRoot(def)!=null);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.cloneTree());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
if(!NodeUtil.isExprAssign(def)){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
NodeUtil.copyNameAnnotations(def.getLastChild(),NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.VAR,defCfgNode));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
UNKNOWN=new Name("{UNKNOWN}",true);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.createNode(UNKNOWN);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
MAIN=new Name("{Global Main}",true);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildToBack(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildToBack(def.removeChildAfter(outerBlock));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addChildToFront(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
occurrence.parent.replaceChild(occurrence.node,Node.newString(Token.NAME,varName));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.TRUE :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.REF_SPECIAL :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.NULL :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case GET_NUMBER :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.GETPROP :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkNotNull(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
new FunctionNames(compiler).process(null,def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeTraversal.traverse(compiler,def,new GatherCallSites());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
getInfo(graph.MAIN).markReference(null);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.removeChild(defCfgNode);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
this.def=new Node(Token.BLOCK);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
super.visit(t,def,def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.removeChild(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
compiler.reportCodeChange();
candidates=Lists.newLinkedList();
def.copyInformationFromForTree(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=compiler.getTypeRegistry().newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).setType(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(def.getFirstChild()),"Cannot unfold compound assignment if LHS can have side effects");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.setType(Token.ASSIGN);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
defCfgNode.replaceChild(def,def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.varName=placeholderToken.isEmpty()?DEFAULT_PLACEHOLDER_TOKEN:placeholderToken;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.VAR :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(def.getType()!=Token.GETPROP){
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.DEC :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.POS :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Pattern.compile("\\b(?:"+varName).newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
compiler.addToDebugLog("Unreferenced var: "+var.name);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.removeChild(def.getFirstChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
defCfgNode.removeChild(defCfgNode);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case OVERRIDE_DEFAULT_VALUE :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.defCfgNode=rootNode;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
super.visit(t,def,def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(!def.hasChildren()){
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
defCfgNode=def;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.getParent().replaceChild(def,def.getLastChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(!NodeUtil.isName(def)){
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
fixFunctionType(defCfgNode);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
Preconditions.checkNotNull(compiler);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(compiler);
this.compiler=compiler;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).maybeDecomposeExpression(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.getLastChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(def.getLastChild().getType()==Token.BLOCK){
NodeUtil.tryMergeBlock(newChild);
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.removeChild(def.getLastChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def,def.getFirstChild());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.compiler=compiler;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def=def;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addChildToBack(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
nameObj.type=type;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkState(NodeUtil.isName(def)||NodeUtil.isGet(expr));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
def.replaceChild(def.getLastChild(),new Node(NodeUtil.getOpFromAssignmentOp(def)).copyInformationFrom(parent));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.varName=t.getSourceName();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
Preconditions.checkState(NodeUtil.isAssignmentOp(defCfgNode));
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.defCfgNode=assignNode;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.defCfgNode=nameNode;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).addModuleInformation(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.varName=fnName==null?"":fnName;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
this.def=errorRoot;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkState(def.getParent().getFirstChild()==var.getLastChild(),"AST should be normalized first");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(compiler==null){
return null;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.LP :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
Preconditions.checkArgument(def.getLastChild().getType()==Token.RETURN);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
for(Node def : NodeUtil.getFnParameters(def).children()){
Lists.newLinkedList().add(param.cloneNode());
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
NodeUtil.newFunctionNode("",Lists.newLinkedList(),new Node(Token.BLOCK),-1,-1).setJSType(def.getJSType());
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
this.cfg=cfg;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
traverseNodes(def);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
formatConclusion();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.ASSIGN :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.def=null;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
instance.parent.addChildBefore(new Node(first.node.getType(),new Node(Token.ASSIGN,Node.newString(Token.NAME,varName),NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),first.qualifiedClassName+".prototype",instance.parent,className+".prototype"))).copyInformationFromForTree(first.node),first.node);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
varName="right side of comparison";
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
compiler.report(JSError.make(RhinoErrorReporter.PARSE_ERROR,"Error reading instrumentation template protobuf at "+varName));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.varName="";
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
Preconditions.checkArgument(compiler!=null);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(compiler!=null);
this.compiler=compiler;
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.MUL :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.BITXOR :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.LP :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.NAME :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.TYPEOF :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.AND :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
(new MappingTraversal()).traverse(this);
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
closeLine();
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.GT :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
candidates=Lists.newLinkedList();
case Token.AND :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
default :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.COMMA :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
========
case Token.FOR :

candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,138
UNKNOWN ASTNode type : catch (MalformedException ex) {
  compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
  return;
}

UNKNOWN ASTNode type : catch (MalformedException e) {
  compiler.report(JSError.make(message.getSourceName(),e.getNode(),MESSAGE_TREE_MALFORMED,e.getMessage()));
  newValue=msgNode;
}

========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses.analyze();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
reachingUses.analyze();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
t.traverse(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
endTraversal(t);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new DefinitionGatheringCallback(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new UseSiteGatheringCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ShadowDeclarationCheckingCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindDeclarationsAndSetters());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindReferences());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
referenceAliases();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,this);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new AddChecks());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def=def;
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
markPureFunctionCalls();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExternedProperties());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(fastAllPathsReturnCheck(t.getControlFlowGraph())){
return ;
}
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessVars(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new GatherNoSideEffectFunctions(false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new ProcessExterns());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
addAliasDeclarationNodes();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindCandidateFunctions());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkNotNull(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
badFunctionNodes.analyze();

========
========
NodeTraversal.traverse(compiler,def,new NonExternChecks());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).addInvalidatingType(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new FindRenameableProperties());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
renameProperties();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
removeInlinedFunctions();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(t.inGlobalScope()){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).addAliasNodes(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(insideGetUniqueIdCall(def,def)){
continue;
}
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(insideAssignmentToIdConstant(def,def)){
continue;
}
reachingUses.analyze();

========
========
cfg=cfa.getCfg();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new GraphReachability<Node,ControlFlowGraph.Branch>(cfg).compute(curCfg.getEntry().getValue());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
numUseWithinUseCfgNode++;
reachingUses.analyze();

========
========
def.copyInformationFromForTree(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
registerAnyProvidedPrefixes(varName,def,t.getModule());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(numUseWithinUseCfgNode>0){
compiler.reportCodeChange();
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.compiler=compiler;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
declareNativeFunctionType(new Scope(def,compiler),BOOLEAN_OBJECT_FUNCTION_TYPE);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).setErrorManager(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
super(cfg,new LiveVariableJoinOp());
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
super(cfg,new ReachingUsesJoinOp());
reachingUses.analyze();

========
========
ensureTyped(t,def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
node.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkArgument(def.getLastChild().getType()==Token.BLOCK,"Node must be a block.");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
compiler.reportCodeChange();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
super(cfg,new LinkedFlowScope.FlowScopeJoinOp());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
props.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
accessors.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).report(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
compiler.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
abstractMethodAssignmentNodes.analyze();

========
========
execute().notifyCompiler(compiler);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
this.compiler=compiler;
reachingUses.analyze();

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).setString(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
for(Node def : Lists.newArrayList()){
Lists.newArrayListWithExpectedSize(Lists.newArrayList().size()).add(NodeUtil.newExpr(subexpression));
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def.detachFromParent();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
super(cfg,new MustDefJoin());
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,def.cloneTree());
reachingUses.analyze();

========
========
if(def.getType()==Token.FUNCTION){
decl=decl.getLastChild();
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkArgument(def.getType()==Token.BLOCK);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(cfg,def,new CreateScope(this,false));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
try{
def=new Reader().parse(compiler);
}catch (JsonMLException e) {
}

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(def.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(!NodeUtil.isExprAssign(def)){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,defCfgNode));
reachingUses.analyze();

========
========
def.replaceChild(def,NodeUtil.newName(compiler.getCodingConvention(),varName,def,varName));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(def==null){
return ;
}
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
logger.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externMethodsWithoutSignatures.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToBack(def);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToBack(def.removeChildAfter(outerBlock));
reachingUses.analyze();

========
========
case Token.SET :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.TRUE :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.REF_SPECIAL :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.NULL :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.varName=Preconditions.checkNotNull(varName);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).addChildToFront(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
for(Node def : Lists.newArrayList()){
if(null!=null){
ret=new Node(Token.COMMA,ret,part).copyInformationFrom(def);
}else {
ret=part;
}
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.GETPROP :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externalNoShadowVariableNames.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
UNKNOWN=new Name("{UNKNOWN}",true);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
UNKNOWN.isAliased=true;
reachingUses.analyze();

========
========
this.createNode(UNKNOWN);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
MAIN=new Name("{Global Main}",true);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new FunctionNames(compiler).process(null,def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkState(def.getParent().hasChild(def));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case GET_NUMBER :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.removeChild(defCfgNode);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
parent.analyze();

========
========
info.isAliased=true;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
getInfo(graph.MAIN).markReference(null);
reachingUses.analyze();

========
========
def.removeChild(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
anonFns.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externPropertyNames.analyze();

========
========
super.visit(t,def,def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
mutators.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).setType(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def.replaceChildAfter(def.getFirstChild(),def.cloneTree());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def.setType(Token.ASSIGN);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(numUseWithinUseCfgNode<0){
return ;
}
reachingUses.analyze();

========
========
process(def,def,new SimpleDefinitionFinder(compiler));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(!varName.equals(compiler.toSource(def))){
compiler.report(JSError.make(GENERATED_BAD_CODE,source,source2));
throw new IllegalStateException("Sanity Check failed");
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
symbolGraph.analyze();

========
========
case Token.VAR :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
this.compiler=compiler;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,def);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.VAR,Node.newString(Token.NAME,getArrayNotationNameFor(varName))));
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
defCfgNode.replaceChild(def,def);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
globals.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildBefore(NodeUtil.newVarNode(varName,def),def);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.getLastChild().detachFromParent();
reachingUses.analyze();

========
========
if(varName==null||!"goog.now".equals(googNowQName)||def.getNext()!=null){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
changeProxy.analyze();

========
========
def.removeChild(def.getFirstChild());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
defCfgNode.removeChild(defCfgNode);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
NodeTraversal.traverse(cfg,def,new CreateScope(this,true));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case OVERRIDE_DEFAULT_VALUE :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.DEC :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.POS :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToFront(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETPROP,def.cloneTree(),Node.newString(Token.STRING,nameInfo.name)),new Node(Token.CALL,Node.newString(Token.NAME,UNSTUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode),def))).copyInformationFromForTree(value));
reachingUses.analyze();

========
========
replaceReferencesToThis(defCfgNode.getLastChild(),varName);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
fixFunctionType(defCfgNode);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
moduleGraph.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
parentForNewVarDecl.analyze();

========
========
def.getParent().replaceChild(def,def.getLastChild());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(def==null||compiler.hasHaltingErrors()){
root=new Node(Token.BLOCK);
}else {
compiler.prepareAst(root);
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new VariableUseDeclarationMap(compiler).mapUses(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(def.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
reachingUses.analyze();

========
========
this.varName=exportSymbolFunction;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).maybeDecomposeExpression(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,def.getLastChild());
reachingUses.analyze();

========
========
def.removeChild(def.getLastChild());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def.replaceChild(def,def.getFirstChild());
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(!NodeUtil.isName(def)){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def.replaceChild(def.getLastChild(),new Node(NodeUtil.getOpFromAssignmentOp(def)).copyInformationFrom(parent));
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).addChildToBack(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName)).addChildToBack(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,testFunctionName));
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
defCfgNode.addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.CALL,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),varName,def,varName))),def);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
refNodes.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).addModuleInformation(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
if(!def.hasChildren()){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
defCfgNode=defCfgNode.getLastChild();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkState(def.getParent().getParent().getType()!=Token.FOR);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
def=def;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(!NodeUtil.isFunction(t.getScopeRoot())){
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(varName);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.varName=exportPropertyFunction;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.compiler=compiler;
this.varName=exportSymbolFunction;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
this.defCfgNode=rootNode;
reachingUses.analyze();

========
========
nameObj.type=type;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.defCfgNode=assignNode;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.defCfgNode=nameNode;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.WHILE :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.FOR :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
initialValueParent.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
initialValue.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
validator.analyze();

========
========
if(compiler==null){
return null;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
numUseWithinUseCfgNode=-1;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.varName=fnName==null?"":fnName;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.def=errorRoot;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.ASSIGN :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkState(defCfgNode==def||executingCase.getType()!=Token.DEFAULT);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
Preconditions.checkState(def.getLastChild().getType()==Token.BLOCK);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.cfg=cfg;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
traverseNodes(def);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
formatConclusion();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
cfg.createNode(defCfgNode);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
varName="right side of comparison";
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
compiler.addToDebugLog(p.oldName+" => ");
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.varName="";
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
this.def=null;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.MUL :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.BITXOR :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(def!=null){
return root;
}
reachingUses.analyze();

========
========
this.numUseWithinUseCfgNode=numWorkers;
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
closeLine();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
closeLine(true);
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.LP :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
case Token.NAME :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
case Token.AND :

reachingUses.analyze();

========
========
case Token.TYPEOF :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
quotedNames.analyze();

========
========
case Token.AND :

new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,139
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
candidates=Lists.newLinkedList();
new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
reachingUses.analyze();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
tryRemoveDeadAssignments(t,cfg);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
new SimpleDefinitionFinder(compiler).process(def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
new SimpleFunctionAliasAnalysis().analyze(new SimpleDefinitionFinder(compiler));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.setString(varName);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(t.getScope().getVar(def.getString())==null||!v.isGlobal()){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
compiler.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
removeDuplicateDeclarations(def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(!compiler.getLifeCycleStage().isNormalized()){
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(c.getCodingConvention(),String.format("%s.superClass_.%s.call",defCfgNode.getFirstChild().getFirstChild().getQualifiedName(),varName),callee,"goog.base"));
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.removeChild(defCfgNode);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reads.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
writes.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
collapseAssign(t,def.getFirstChild(),expr,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
badFunctionNodes.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.setString(coalescedVar.name);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(def);
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
abstractMethodAssignmentNodes.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
callNodeToParentMap.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),this);
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,this);
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
replaceStringsWithAliases();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
addAliasDeclarationNodes();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
props.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
accessors.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
mutators.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
quotedNames.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
super.visit(t,def,def);
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverse(compiler,def,new ProcessProperties());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
logger.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
resolveInlineConflicts();
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
removeInlinedFunctions();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new FindCandidateFunctions());
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
trimCanidatesNotMeetingMinimumRequirements();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
defCfgNode.replaceChild(def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
compiler.reportCodeChange();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
anonFns.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverse(compiler,compiler.parseTestCode(varName),new MakeDeclaredNamesUnique());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externalNoShadowVariableNames.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
varsToDeclareInExterns.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
traverseNode(def,null,new SyntacticScopeCreator(compiler).createScope(def,null));
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
interpretAssigns();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
removeUnreferencedVars();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
Preconditions.checkNotNull(varName);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
recordReplacement(def,varName,varName);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.replaceChild(def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverse(compiler,compiler.parseSyntheticCode(varName),new MakeDeclaredNamesUnique(new BoilerplateRenamer(compiler.getUniqueNameIdSupplier(),varName)));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.replaceChild(def,Node.newNumber(0));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
c.reportCodeChange();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
ensureTyped(t,def,BOOLEAN_TYPE);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
compiler.addToDebugLog("JS property assignments:");
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new TreeSet<Property>(FREQUENCY_COMPARATOR).addAll(c.values());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
varsToRemove.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
globals.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
case OVERRIDE_DEFAULT_VALUE :

reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
defCfgNode=defCfgNode.getNext();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
case GET_BOOLEAN :

reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
this.compiler=compiler;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
parentForNewVarDecl.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToBack(def);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,defCfgNode);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildToFront(Node.newString(Token.NAME,varName).copyInformationFrom(def));
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(compiler.getCodingConvention().isExported(varName)){
return true;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(!NodeUtil.isName(def)){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
case Token.OBJECTLIT :

reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
getSignatureStore().reset();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),new GatherSignatures());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(def,def),getActingCallback());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.replaceChild(def,Node.newString(varName));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
c.reportCodeChange();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
compiler.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def=def;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externPropertyNames.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.replaceChild(def,NodeUtil.newQualifiedNameNode(c.getCodingConvention(),String.format("%s.call",defCfgNode.getQualifiedName()),callee,"goog.base"));
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(c.peek().getGraph().getNode(t.getScope().getVar(def.getString()))==null){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.replaceChild(def,NodeUtil.newName(c.getCodingConvention(),varName,def,varName));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
checkPropertyAccess(getJSType(defCfgNode),def.getString(),t,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
ensureTyped(t,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
this.compiler=compiler;
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(!defCfgNode.hasChildren()){
def.removeChild(varNode);
}
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
knownLocals.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new CombinedCompilerPass(compiler,new ExploitAssigns(),new GatherCollapses()));
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new InstrumentCallback());
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
process(def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
initialValueParent.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
initialValue.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(compiler.getCodingConvention().isExported(def.getLastChild().getString())){
return false;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.addChildAfter(def,def);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def=def;
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
numUseWithinUseCfgNode++;
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
node.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
defCfgNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
defCfgNode.addChildToBack(defCfgNode);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
externMethodsWithoutSignatures.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.putProp(Node.SOURCENAME_PROP,varName);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
c.put("prototype",newSymbolForProperty("prototype"));
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new PropertyGatherer());
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
moduleGraph.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new GlobalGatherer());
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(t.getScope().getVar(c.getString())==null||var.isLocal()||var.isExtern()){
return ;
}
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
NodeTraversal.traverse(compiler,def,new ProcessProperties());
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
annotate(def);
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
validator.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reservedNames.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def.replaceChild(alias.node,new Node(Token.NULL));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.setType(Token.ASSIGN);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.copyInformationFromForTree(def);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
if(def==c.getRootNode())return ;
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
super.visit(t,def,def);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.removeChild(def);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
case Token.RETURN :

reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverse(compiler,def,new BuildGlobalNamespace());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
newName.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
if(c.getFunctionId(def)<0){
return ;
}
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
refNodes.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
info.moduleToContainDecl=t.getModule();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(def.getFirstChild().getType()!=Token.GETPROP){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(def.getFirstChild().getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
visit(t,def,def,def.getFirstChild().getFirstChild().getNext().getString());
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
NodeTraversal.traverse(compiler,def,new FunctionAnalyzer(false));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
propagateSideEffects();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
markPureFunctionCalls();
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
uses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
varName=boilerplateCode.replace("%%LOG%%",varName==null?"function(warning, expr) {}":logFunction);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(compiler.getSourceLine(varName,def.getLineno())==null){
src=MISSING_SOURCE;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
handleGet(t,def,def,varName,Ref.Type.PROTOTYPE_GET);
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
this.compiler=compiler;
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
numUseWithinUseCfgNode=-1;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
def.getParent().addChildAfter(new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE))),nodeToInsertAfter);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
def=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,new Node(Token.GETELEM,new Node(Token.GETPROP,defCfgNode,Node.newString("prototype")),def),new Node(Token.TRUE)));
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
case Token.SET :

reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
this.varName=fnName==null?"":fnName;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
this.def=errorRoot;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
this.varName=sourceName;
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(getEnclosingDeclNameNode(t)==null){
reportBadBaseClassUse(t,def,"Could not find enclosing method.");
return ;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(ref.mode==InliningMode.BLOCK){
numUseWithinUseCfgNode++;
}
if(c.canInline()){
c.inlineVariable();
}
}

========
========
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
this.varName=prefix==null?"":prefix;
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(def.getType()==Token.GETPROP&&n==def.getFirstChild()&&NodeUtil.isAssignmentOp(parent)){
return false;
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
this.varName="";
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
========
if(def!=null&&parent.getType()==Token.NAME){
Node def.getParent()=parent.getParent();
if(gramps!=null&&gramps.getType()==Token.VAR){
return false;
}
}
reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
reachingUses.analyze();
for(Candidate c : candidates){
if(c.canInline()){
c.inlineVariable();
}
}

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,140
com.google.javascript.jscomp.FlowSensitiveInlineVariables,141
com.google.javascript.jscomp.FlowSensitiveInlineVariables,142
com.google.javascript.jscomp.FlowSensitiveInlineVariables,144
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,145
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,148
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,152
========
new NodeTraversal(compiler,this).traverse(root);
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
endTraversal(new NodeTraversal(compiler,this));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,root,new AddMarkers(compiler));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,root,new AddChecks());
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,root,new Callback());
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,externs,new GatherNoSideEffectFunctions(true));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,root,new GatherNoSideEffectFunctions(false));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverse(compiler,root,new SetNoSideEffectCallProperty(new SimpleDefinitionFinder(compiler)));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
(new NodeTraversal(compiler,this)).addAliasNodes(root);

========
========
NodeTraversal.traverse(compiler,root,new FindAliasableNodes());
(new NodeTraversal(compiler,this)).traverse(root);

========
========
NodeTraversal.traverseRoots(compiler,Lists.newArrayList(externs,root),this);
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
(new NodeTraversal(compiler,this)).setLifeCycleStage(root);

========
========
removeUnusedProperties(new AnalyzeNameReferences(compiler).getGraph());
(new NodeTraversal(compiler,this)).traverse(root);

========
========
try{
root=new Reader().parse(compiler);
}catch (JsonMLException e) {
}

(new NodeTraversal(compiler,this)).traverse(root);

========
========
(new NodeTraversal(compiler,this)).setErrorManager(root);

========
========
this.compiler=compiler;
(new NodeTraversal(compiler,this)).traverse(root);

========
========
process(externs,root,new SimpleDefinitionFinder(compiler));
(new NodeTraversal(compiler,this)).traverse(root);

========
========
(new NodeTraversal(compiler,this)).addInvalidatingType(root);

========
========
root=null;
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
(new NodeTraversal(compiler,this)).addChildToBack(root);

========
========
sanityCheckCodeGeneration(root);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
sanityCheckVars(root,root);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
root=new Node(Token.SCRIPT);
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
execute().notifyCompiler(compiler);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
new VariableUseDeclarationMap(compiler).mapUses(root);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
Preconditions.checkState(findExpressionRoot(root)!=null);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
compiler.reportCodeChange();
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
(new NodeTraversal(compiler,this)).setString(root);

========
========
def.replaceChild(root,def.cloneTree());
(new NodeTraversal(compiler,this)).traverse(root);

========
========
new PrepareAst(this).process(null,root);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
def=root.getFirstChild();
(new NodeTraversal(compiler,this)).traverse(root);

========
========
Preconditions.checkState(def.getType()==Token.SCRIPT);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
aliasGlobals(root,root);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
root.addChildToBack(Node.newString(Token.NAME,""));
(new NodeTraversal(compiler,this)).traverse(root);

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
(new MappingTraversal()).traverse(this);
(new NodeTraversal(compiler,this)).traverse(root);

========
========
closeLine();
(new NodeTraversal(compiler,this)).traverse(root);

========
========
closeLine(true);
(new NodeTraversal(compiler,this)).traverse(root);

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,153
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,162
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,448
========
if(pred.apply(cur)){
return true;
}

========
========
if(predicate.apply(cur)){
return false;
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(traverseChildrenPred.apply(cur)){
return true;
}

========
========
if(identifyConstants.apply(cur)){
return true;
}

========
========
if(nodeFilter.apply(cur)){
return true;
}

========
========
for(Node cur=p.getParent().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getParent().getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

if(predicate.apply(cur)){
return true;
}
}

========
========
p=thisParam.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=otherParam.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
traverseBranch(cur,n);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(cur.getNext().getNext()==null&&body.getType()==Token.BLOCK);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getFirstChild().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=block.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return false;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=n.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=n.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return false;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur=p.getFirstChild().getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=cur.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(p.getType()==Token.IF)return ;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=n.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkNotNull(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
addAllChildren(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur==null){
return def;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur==null){
return n;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=start.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=node.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur==null||!NodeUtil.isCall(callGoogNow)||callGoogNow.getNext()!=null){
return ;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=child.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(";");
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(p.getNext());
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(p.getNext().getNext());
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
createEdge(p,Branch.ON_TRUE,computeFallThrough(cur));
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=parameters.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=map.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.reportCodeChange();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=paramName.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=defCfgNode;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
c=cur.getNext();
if(predicate.apply(cur)){
return true;
}
}

========
========
p=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur=current.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.NUMBER){
return false;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(p,Context.PRESERVE_BLOCK);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(NodeUtil.getStringValue(cur)==null){
return false;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(!NodeUtil.isExpressionNode(p)&&!NodeUtil.isVar(n)){
return ;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=typeArray.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(p.getParent().getType()==Token.ASSIGN);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=args.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString()).isVarArgs()){
cur.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
p=trySimpilifyUnusedResult(c);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.STRING){
return ;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=paramsParent.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
addExpr(p,numUseWithinUseCfgNode);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=objLitNode.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
Preconditions.checkState(def!=null,"Cannot find break target.");
if(predicate.apply(cur)){
return true;
}
}

========
========
p=child.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
Preconditions.checkState(def!=null,"Cannot find continue target.");
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(def==null||previousCase.getNext()==cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=key.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(cur.getType()!=Token.STRING){
throw new MalformedException("STRING node expected as OBJLIT key",cur);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(cur.getType()!=Token.STRING){
throw new MalformedException("STRING node expected as OBJLIT key",cur);
}
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}

if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=arg.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=objectLiteral.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=child.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.VAR :

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),compiler.getCodingConvention().getGlobalObject(),def.getLineno(),firstArgument.getCharno()));
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
n.replaceChild(def,cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.GETPROP :

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
try{
return p;
}finally{
  current=current.getNext();
}

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(p.getQualifiedName()==null||p.getNext()!=null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=node;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
traverseBranch(cur,n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getNext()==null&&body.getType()==Token.BLOCK);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=thisParam.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=otherParam.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;s!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getFirstChild().getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=first;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;n!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;n!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
def.removeChild(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=firstParam;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p=p.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur.getFirstChild().getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;c!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case OVERRIDE_DEFAULT_VALUE :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
addAllChildren(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
cur=instance.declarations.getLast().n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
cur=instance.declarations.getLast().n;
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getParent().getType()==Token.ASSIGN);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot==null){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p==null){
return def;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getType()!=Token.STRING){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=first;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=first;c!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;c!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=first;c!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();n!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;n!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();n!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;n!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(p,n.getParent()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(isExpressionTreeUnsafe(p,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
getParameterSlot(numUseWithinUseCfgNode).getType();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getFirstChild();c!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();c!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
c=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;child!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();child!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;child!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();child!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=subExpression;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;parent!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;n2!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
n2clone.parent=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(result.first==null){
result.first=p.cloneTree();
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
result.last=p.cloneTree();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
n2clone.parent=n;
if(result.first==null){
result.first=p.cloneTree();
}
result.last=p.cloneTree();

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=firstInList;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
numUseWithinUseCfgNode++;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
numUseWithinUseCfgNode++;

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(!NodeUtil.isExpressionNode(n)&&!NodeUtil.isVar(n)){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(isUselessCase(p,(expressionRoot==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.getType()!=Token.CALL){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(isName(n));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
normalizeBlocks(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
predicate.reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=paramName.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
expressionRoot=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if((cur==null)||(p.getFirstChild()!=expressionRoot)){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def.getFirstChild();key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=def;key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;arg!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(p.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(p.getString()).isVarArgs()){
p.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;paramNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
compiler.reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getFirstChild();p!=expressionRoot;p=p.getParent()){
c=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p;p!=expressionRoot;p=p.getParent()){
c=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
c=trySimpilifyUnusedResult(p);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
next=p.getNext();
c=trySimpilifyUnusedResult(p);

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;c!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();p!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();c!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;c!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();c!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
createEdge(def,Branch.ON_TRUE,computeFallThrough(cur));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
connectToPossibleExceptionHandler(def,NodeUtil.getConditionExpression(node));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=defCfgNode.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(def==null||previousCase.getNext()==expressionRoot);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;currentParam!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;name!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(NodeUtil.isStatementBlock(p.getParent()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(def!=null,"Cannot find break target.");
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=child.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;propNameNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(def!=null,"Cannot find continue target.");
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur.getFirstChild();key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur;key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur.getFirstChild();key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=cur;key!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot==null){
return null;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.NEW);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!NodeUtil.isName(p)||!"Date".equals(date.getString())){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();name!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;name!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild();name!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.getStringValue(cur)==null){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if((p.getType()!=Token.ARRAYLIT)||!cur.getString().equals("join")){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.ASSIGN);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(mayHaveSideEffects(def)){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
addExpr(p,numUseWithinUseCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=defCfgNode.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=defCfgNode;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
add(p,Context.STATEMENT);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if((cur.getType()!=Token.STRING)||((p.getType()!=Token.STRING))){
return def;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=child.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isName(p)&&NodeUtil.isVar(cur)){
return true;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isExprAssign(cur)&&p.getChildAtIndex(1)==expressionRoot){
return true;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(cur.getType()==Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
swtich (cur.getType()){
case Token.STRING :
return getStringValue(parent);

}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=key.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.hasOneChild());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def=p;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=ancestor.getParent();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;nameNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.removeChild(p);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.getParent().replaceChild(n,p);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.removeChild(cur.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.addChildBefore(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getChildCount()==2);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.getParent().replaceChild(n,defCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur!=null&&NodeUtil.isName(value)&&value.getString().equals(p.getString())){
return true;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;aNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(!isLowerCamelCaseWithNumericSuffixes(p.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+p.getString(),p);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=defCfgNode.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=defCfgNode;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getLastChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument((def.getType()==Token.AND)||(node.getType()==Token.OR),"Expected: AND or OR, Got: "+Token.name(node.getType()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;keyNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=current.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;anc!=anc;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=parent;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;anc!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=anc;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=FUNCTION;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=n;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(p);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.removeChild(p.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getType()==Token.NAME);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(n.hasOneChild());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.isCall(p)&&getElemParent.getFirstChild()==expressionRoot){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getType()==Token.EXPR_RESULT){
JSDocInfo cur=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
varName=new File(varName).getParent()+File.separatorChar;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
moveAllFollowing(defCfgNode,ifNode.getParent(),cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.removeFirstChild();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(def,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p!=null);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(expressionRoot==null||p.hasChild(externsRoot));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
check(cur,false);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(isStorageNode(cur));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=p.getLastChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
tryMinimizeExits(cur,numUseWithinUseCfgNode,varName);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(p.getType()==Token.GET||p.getType()==Token.SET){
add(p);
}else {
if(p.getType()==Token.STRING&&!TokenStream.isKeyword(p.getString())&&TokenStream.isJSIdentifier(p.getString())&&NodeUtil.isLatin(p.getString())){
add(p.getString());
}else {
addExpr(p,1);
}
add(":");
addExpr(p.getFirstChild(),1);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkNotNull(n.getJSType());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
ref.node.getParent().removeChild(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
p.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.removeChild(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
defCfgNode=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
defCfgNode=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.DO);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
defCfgNode=n;
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=addMarker((FunctionType)n.getJSType(),nodeToInsertAfter,null);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=skipFinallyNodes(follow);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.VAR :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.addChildToBack(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur==null){
src=MISSING_SOURCE;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.setJSType(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur==null){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(n.getType()==Token.STRING){
cur="Is there a missing \'+\' on the previous line?";
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot!=null){
cur.addChildToBack(returnRhs);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.addChildToFront(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.mayEffectMutableState(defCfgNode)){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
predicate.add(new CallSite(p,n,defCfgNode,defCfgNode,defCfgNode));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(TWEAK_FUNCTIONS_MAP.get(p.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.AND :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.copyNameAnnotations(p.getLastChild(),cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.replaceChild(p,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
info.occurrences.add(new StringOccurrence(n,p));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
info.numOccurrences++;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.detachFromParent();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.detachFromParent();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.addChildAfter(cur,n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(predicate.get(p.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(def,def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.addChildToFront(new Node(Token.EXPR_RESULT,def).copyInformationFrom(cond));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
res=p.checkTreeEqualsImpl(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
res=p.checkTreeTypeAwareEqualsImpl(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(p,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",expressionRoot.getQualifiedName()),callee,"goog.base"));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cfg.getDirectedGraphNode(cur)==null){
return cur;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeTraversal.traverse(compiler,n,new GatherSideEffectSubexpressionsCallback(compiler,new CopySideEffectSubexpressions(compiler,Lists.newArrayList())));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.replaceChild(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
global.uses.add(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.setString(coalescedVar.name);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isVar(p)){
removeVarDeclaration(cur);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",p.getQualifiedName(),varName),callee,"goog.base"));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(defCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(!areSafeFlagsToFold(p.getString())){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(p);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=new Node(Token.REGEXP,p,p);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,p)){
continue;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideAssignmentToIdConstant(n,p)){
continue;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,p)){
continue;
}
if(insideAssignmentToIdConstant(n,p)){
continue;
}

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.GETPROP :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.copyNameAnnotations(def,def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.removeChild(def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(n,def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(cur.getType()==Token.NEW);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.OBJECTLIT :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.replaceChild(n,cur);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getType()!=Token.CALL){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
tryRemoveUnconditionalBranching(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.setString(varName);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(predicate.getFunctionId(cur)<0){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(n.getJSType()==null&&def.getType()==Token.FUNCTION){
varType=parent.getJSType();
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur==null){
info=p.getJSDocInfo();
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.OR :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(!EXTERN_OBJECT_PROPERTY_STRING.equals(p.getQualifiedName())){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),compiler.getCodingConvention().getGlobalObject(),def.getLineno(),firstArgument.getCharno()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.GET_REF :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.FUNCTION :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.children().iterator().next();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,449
com.google.javascript.jscomp.FlowSensitiveInlineVariables,450
com.google.javascript.jscomp.FlowSensitiveInlineVariables,451
com.google.javascript.jscomp.FlowSensitiveInlineVariables,455
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getNext();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(p.getQualifiedName()==null||p.getNext()!=null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=p.getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=p;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=node;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
traverseBranch(cur,n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getNext()==null&&body.getType()==Token.BLOCK);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=thisParam.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=otherParam.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=def.getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=def;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=def.getFirstChild().getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=def.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(def.getType()==Token.IF)return ;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=n.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=first;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=firstParam;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
def.removeChild(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=p.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur.getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=cur.getFirstChild().getNext();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=def.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=def;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(expressionRoot==null){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
cur=instance.declarations.getLast().n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
cur=instance.declarations.getLast().n;
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
addAllChildren(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()!=Token.STRING){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getNext().getType()==Token.BLOCK&&!first.getNext().hasMoreThanOneChild());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(numUseWithinUseCfgNode>=2&&childCount<=3);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
add("try");
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
add(p,Context.PRESERVE_BLOCK);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=first;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getType()==Token.IF);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(expressionRoot==null){
return def;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(p,n.getParent()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(isExpressionTreeUnsafe(p,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
getParameterSlot(numUseWithinUseCfgNode).getType();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=def.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
c=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=firstInList;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
n2clone.parent=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(result.first==null){
result.first=p.cloneTree();
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
result.last=p.cloneTree();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
n2clone.parent=n;
if(result.first==null){
result.first=p.cloneTree();
}
result.last=p.cloneTree();

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=subExpression;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=cur.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=cur;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkNotNull(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(NodeUtil.isStatementBlock(p.getParent()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
numUseWithinUseCfgNode++;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
numUseWithinUseCfgNode++;

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.getType()!=Token.CALL){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(isUselessCase(def,(expressionRoot==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.getParent().replaceChild(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(isName(n));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p!=null,"Cannot find break target.");
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(p.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(p.getString()).isVarArgs()){
p.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=cur.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=cur;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
predicate.reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=paramName.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
expressionRoot=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(def.getType()==Token.OBJECTLIT);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
c=n;
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(def.getChildCount()==2);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p==null){
return def;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(!NodeUtil.isGet(cur)||!NodeUtil.isImmutableValue(p)){
return def;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
c=trySimpilifyUnusedResult(p);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
next=p.getNext();
c=trySimpilifyUnusedResult(p);

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild();p!=null;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
createEdge(def,Branch.ON_TRUE,computeFallThrough(cur));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
connectToPossibleExceptionHandler(def,NodeUtil.getConditionExpression(node));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=defCfgNode.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case GET_BOOLEAN :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.removeChild(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
compiler.reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(def==null||previousCase.getNext()==expressionRoot);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=p.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(def!=null,"Cannot find continue target.");
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(expressionRoot==null){
return null;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(n.getType()==Token.FUNCTION){
Preconditions.checkState(n.getProp(Node.FUNCTION_PROP)==null);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
normalizeBlocks(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.ASSIGN);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(mayHaveSideEffects(def)){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if((p.getType()!=Token.ARRAYLIT)||!cur.getString().equals("join")){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()!=Token.GETPROP){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getFirstChild().getNext().getType()!=Token.STRING){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
addExpr(def,numUseWithinUseCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
swtich (cur.getType()){
case Token.STRING :
return getStringValue(parent);

}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return true;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.isExprAssign(cur)&&p.getChildAtIndex(1)==expressionRoot){
return true;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
add(p,Context.STATEMENT);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(varName==null){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(cur.getType()==Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=defCfgNode.getFirstChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=defCfgNode;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,p.getString());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=child.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=child.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.removeChild(cur.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(def.getType()==Token.LP);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
scanVars(def,n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.hasOneChild());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.getStringValue(cur)==null){
return false;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.addChildBefore(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=def.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=def;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=ancestor.getParent();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getChildCount()==2);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(!isLowerCamelCaseWithNumericSuffixes(p.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+p.getString(),p);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=defCfgNode.getFirstChild();p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=defCfgNode;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument((def.getType()==Token.AND)||(node.getType()==Token.OR),"Expected: AND or OR, Got: "+Token.name(node.getType()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
defCfgNode.detachChildren();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.getParent().replaceChild(n,defCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=current.getNext();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=parent;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=anc;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=FUNCTION;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getLastChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(n,cur);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=n;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getType()==Token.NAME);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.hasOneChild());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=node;p!=null;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()==Token.EXPR_RESULT){
JSDocInfo cur=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=Token.NAME;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=NAME;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
moveAllFollowing(defCfgNode,ifNode.getParent(),cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.detachFromParent();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.removeFirstChild();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(def,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p!=null);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(expressionRoot==null||p.hasChild(externsRoot));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
check(cur,false);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(cur,new Node(Token.CALL,Node.newString(Token.NAME,STUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode)).copyInformationFromForTree(value));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(isStorageNode(cur));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(p.getType()==Token.GET||p.getType()==Token.SET){
add(p);
}else {
if(p.getType()==Token.STRING&&!TokenStream.isKeyword(p.getString())&&TokenStream.isJSIdentifier(p.getString())&&NodeUtil.isLatin(p.getString())){
add(p.getString());
}else {
addExpr(p,1);
}
add(":");
addExpr(p.getFirstChild(),1);
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=p.getLastChild();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
tryMinimizeExits(cur,numUseWithinUseCfgNode,varName);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
ref.node.getParent().removeChild(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
p.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.DO);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.detachChildren();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
varName=null;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.VAR :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.add(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur==null){
src=MISSING_SOURCE;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
defCfgNode=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
defCfgNode=n;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.addChildToBack(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkNotNull(p.getJSType());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.FUNCTION :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(TWEAK_FUNCTIONS_MAP.get(p.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur==null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(p,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.AND :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(predicate.get(p.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()!=Token.CALL){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.EQUALS :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.replaceChild(n,Node.newNumber(0));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(expressionRoot!=null){
cur.addChildToBack(returnRhs);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.addChildToFront(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.GETPROP :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if((p!=null)&&(p.isNoShadow()||p.isLocal())){
continue;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.setJSType(cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.addChildToFront(new Node(Token.EXPR_RESULT,def).copyInformationFrom(cond));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
res=p.checkTreeEqualsImpl(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
res=p.checkTreeTypeAwareEqualsImpl(cur);
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=addMarker((FunctionType)n.getJSType(),nodeToInsertAfter,null);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Iterables.addAll(Sets.newTreeSet(ALPHA),(FunctionType)n.getJSType().getAllImplementedInterfaces());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.mayEffectMutableState(defCfgNode)){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
predicate.add(new CallSite(def,n,defCfgNode,cur,cur.getFirstChild()));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(cur.getType()==Token.NEW);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.length()==0){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
tryRemoveUnconditionalBranching(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p==null||var.isLocal()||var.isExtern()){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.copyNameAnnotations(p.getLastChild(),cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.replaceChild(p,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.removeChild(n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.OBJECTLIT :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur==null){
info=p.getJSDocInfo();
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",p.getQualifiedName(),varName),callee,"goog.base"));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.removeChild(defCfgNode);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
info.occurrences.add(new StringOccurrence(n,def));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
info.numOccurrences++;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(!areSafeFlagsToFold(def.getString())){
return n;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.removeChild(def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=new Node(Token.REGEXP,def,def);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.replaceChild(n,cur);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeTraversal.traverse(compiler,n,new GatherSideEffectSubexpressionsCallback(compiler,new CopySideEffectSubexpressions(compiler,Lists.newArrayList())));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,def)){
continue;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideAssignmentToIdConstant(n,def)){
continue;
}
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n;p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,def)){
continue;
}
if(insideAssignmentToIdConstant(n,def)){
continue;
}

for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p!=null){
for(Node def : info.getTypeNodes()){
fixTypeNode(node);
}
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.setString(coalescedVar.name);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(cur);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
nameObj.type=type;
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
updateAssignAllowedStack(cur,false);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.setString(varName);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getJSType()==null&&def.getType()==Token.FUNCTION){
varType=parent.getJSType();
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getString().isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.OR :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.GET_REF :

for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.addChildToFront(new Node(Token.VAR,p));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",p.getQualifiedName()),callee,"goog.base"));
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getType()==Token.CALL);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(p.getType()==Token.NAME&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(numUseWithinUseCfgNode==1);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
addIdentifier(n.getString());
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.children().iterator().next();
for(Node p=n;p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getNext();cur!=null;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
com.google.javascript.jscomp.FlowSensitiveInlineVariables,468
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=FUNCTION;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=call.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=p.getFirstChild().getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=cur.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=expressionRoot;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=n.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
addAllChildren(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return false;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n=n.getParent();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n=n.getParent();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return false;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
connectToPossibleExceptionHandler(p,node.getFirstChild());
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=p.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(isName(p));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(n.getFirstChild().getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
traverseBranch(cur,n);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(cur.getNext().getNext()==null&&body.getType()==Token.BLOCK);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(n.hasOneChild());
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
c=cur.getNext();
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=thisParam.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p=otherParam.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p=p.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getParent().getType()==Token.OBJECTLIT);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
Preconditions.checkState(p!=null,"Cannot find break target.");
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
Preconditions.checkState(p!=null,"Cannot find continue target.");
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
add(p,Context.PRESERVE_BLOCK);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString()).isVarArgs()){
cur.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=c;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(isUselessCase(def,(p==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(p.getParent().getType()==Token.ASSIGN);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isStatementBlock(cur.getParent()));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
createEdge(p,Branch.ON_TRUE,computeFallThrough(cur));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(p.getType()==Token.IF)return ;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=n.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=NAME;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()==Token.RETURN){
return statement.getFirstChild();
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(cur.getType()==Token.BLOCK||addingRoot.getType()==Token.SCRIPT);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(cur.getFirstChild()==null||addingRoot.getFirstChild().getType()!=Token.SCRIPT);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=child.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
swtich (cur.getType()){
case Token.STRING :
return getStringValue(parent);

}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(def==null||previousCase.getNext()==p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p=child.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(cur.getType()!=Token.STRING){
throw new MalformedException("STRING node expected as OBJLIT key",cur);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}
if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(cur.getType()!=Token.STRING){
throw new MalformedException("STRING node expected as OBJLIT key",cur);
}
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}

if(predicate.apply(cur)){
return true;
}
}

========
========
for(Node cur=p.getParent().getFirstChild();cur!=GETPROP;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.removeChild(n);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p.addChildBefore(NodeUtil.newVarNode(varName,def),def);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p=cur;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=ancestor.getParent();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.CALL);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!predicate.areNodesEqualForInlining(cur,defCfgNode)){
return ;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
numUseWithinUseCfgNode=cur!=null?valueNode.getType():Token.VOID;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
predicate.reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=paramName.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=defCfgNode;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.setDebugInformation(cur.getFirstChild(),p,varName+".prototype");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.replaceChild(p,cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
info.parentForNewVarDecl=cur;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
info.siblingToInsertVarDeclBefore=cur.getFirstChild();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=current.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.CALL){
return ;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(NodeUtil.isCall(p));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node cur=p.getParent().getFirstChild();cur!=anc;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.NEW);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p.removeChild(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur.getParent().replaceChild(n,p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(defCfgNode.getType()==Token.TYPEOF);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.removeChild(cur.getParent(),n);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur.getParent().replaceChild(n,defCfgNode);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur.replaceChild(def,p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=defCfgNode.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(decl.node.getParent().getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(!EXTERN_OBJECT_PROPERTY_STRING.equals(cur.getQualifiedName())){
return ;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(p.getType()==Token.ASSIGN);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!NodeUtil.isExpressionNode(n)&&!NodeUtil.isVar(n)){
return ;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(";");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(p.getNext());
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
add(p.getNext().getNext());
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.GETPROP){
return ;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
cur=rootNameNode.getFirstChild();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(defCfgNode.isNoSideEffectsCall()){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(cur!=null&&gramps.getType()==Token.VAR);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(n.getChildCount()==3);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getChildCount()==3);
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur!=null&&!fnRecursionName.isEmpty()&&!fnRecursionName.equals(varName)&&NodeUtil.isNameReferenced(p,fnRecursionName)){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
moveAllFollowing(defCfgNode,ifNode.getParent(),cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
addExpr(p,numUseWithinUseCfgNode);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),defCfgNode);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
ref.node.getParent().removeChild(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()==Token.NAME&&CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
compiler.reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(p.getType()==Token.NAME);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.getStringValue(cur)==null){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(cur.getType()!=Token.RETURN){
return null;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.NEW);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
declareArguments(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(isPrefix(p)||valueIsDiscarded(node),"Unfolding postfix ++/-- requires that the result be ignored.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(cur),"Cannot unfold compound assignment if LHS can have side effects");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(getType(p.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.CALL||callsite.getType()==Token.NEW);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(isStorageNode(cur));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.CALL,"Expected: CALL, Got: "+Token.name(node.getType()));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
def=child.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.GETPROP);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur.getType()==Token.NAME&&isNameAssignedTo(name.getString(),p)){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(n.getType()==Token.CALL);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(n.getFirstChild().getType()==Token.NAME&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(NodeUtil.isObjectLitKey(cur,cur.getParent())){
JSDocInfo cur.getParent().getJSDocInfo()=gramps.getJSDocInfo();
if(maybeLends!=null&&maybeLends.getLendsName()!=null&&maybeLends.getLendsName().endsWith(".prototype")){
return false;
}
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(cur);
NodeUtil.removeChild(cur.getParent(),n);
reportCodeChange();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
if(!isAliasName(n.getString())){
return false;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),compiler.getCodingConvention().getGlobalObject(),def.getLineno(),firstArgument.getCharno()));
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
p.replaceChild(def,cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.VAR :

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.OR :

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.NEW :

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.GETPROP :

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
case Token.LABEL :

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
try{
return p;
}finally{
  current=current.getNext();
}

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}

========
========
Preconditions.checkState(p.getType()==Token.OBJECTLIT);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=child.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();parent!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=node.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(NodeUtil.isStatementBlock(p.getParent()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(isName(p));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isName(cur)&&NodeUtil.isVar(cur.getParent())){
return true;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isExprAssign(cur.getParent())&&cur.getChildAtIndex(1)==expressionRoot){
return true;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=p.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(n.hasOneChild());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getParent().getType()==Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.replaceChild(n,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=n;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
normalizeBlocks(p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();c!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getFirstChild().getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=cur.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
swtich (cur.getType()){
case Token.STRING :
return getStringValue(parent);

}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(cur,n.getParent()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(isExpressionTreeUnsafe(cur,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=cur;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=ancestor.getParent();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();child!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();child!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.addChildBefore(NodeUtil.newVarNode(varName,p),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();c!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.getParent().replaceChild(n,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p!=null,"Cannot find continue target.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p!=null,"Cannot find break target.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.removeChild(p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.getParent().replaceChild(n,p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=block.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
connectToPossibleExceptionHandler(p,node.getFirstChild());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.getParent().replaceChild(n,cur);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.FOR);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(def==null||previousCase.getNext()==p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getQualifiedName()==null||p.getNext()!=null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(isSimpleAssignment(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(p.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();n!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=block.getParent();p!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=block.getParent();n!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();n!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=block.getParent();n!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot==null){
return null;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.removeFirstChild();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(p,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
addAllChildren(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
c=cur.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(n.getType()==Token.NAME);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
varName=new File(varName).getParent()+File.separatorChar;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=current.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=objLitNode.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();key!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot==null){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=objectLiteral.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=args.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString()).isVarArgs()){
cur.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(isUselessCase(p,(expressionRoot==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
pushScope(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
traverseBranch(cur,n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getType()!=Token.STRING){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=arg.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
moveAllFollowing(defCfgNode,ifNode.getParent(),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();n2!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n2clone.parent=def;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(result.first==null){
result.first=p.cloneTree();
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
result.last=p.cloneTree();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n2clone.parent=def;
if(result.first==null){
result.first=p.cloneTree();
}
result.last=p.cloneTree();

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=start.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n.removeChild(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.getType()!=Token.CALL){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(cur!=null);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(expressionRoot==null||cur.hasChild(externsRoot));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
check(n,false);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=map.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();key!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
c=trySimpilifyUnusedResult(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
c=trySimpilifyUnusedResult(p);

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=parameters.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();paramNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.CALL);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();propNameNode!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
predicate.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(predicate.getDefinitionsReferencedAt(cur)==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.setCharno(numUseWithinUseCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(isStorageNode(cur));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(def.getType()==Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p!=null&&NodeUtil.isName(value)&&value.getString().equals(cur.getString())){
return true;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(p.getLastChild().getString().equals("call")||propString.equals("apply")){
return p.getNext();
}else {
return callTarget.getFirstChild();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=typeArray.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();name!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.NEW);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!NodeUtil.isName(p)||!"Date".equals(date.getString())){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(mayHaveSideEffects(def)){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if((p.getType()!=Token.ARRAYLIT)||!n.getString().equals("join")){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
ref.node.getParent().removeChild(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
n.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=assignNode.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
createEdge(p,Branch.ON_TRUE,computeFallThrough(cur));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
connectToPossibleExceptionHandler(p,NodeUtil.getConditionExpression(node));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=paramsParent.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=child.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
getParameterSlot(numUseWithinUseCfgNode).getType();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if((cur.getType()!=Token.STRING)||((p.getType()!=Token.STRING))){
return def;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.removeChild(defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkNotNull(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.BLOCK);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.BLOCK);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur=skipFinallyNodes(follow);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
maybeRecordExport(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
defCfgNode=n;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(n.getChildCount()==2);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(TWEAK_FUNCTIONS_MAP.get(n.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(predicate.get(n.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=n.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=current.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
numUseWithinUseCfgNode++;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
numUseWithinUseCfgNode++;

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(!NodeUtil.isExpressionNode(n)&&!NodeUtil.isVar(n)){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument((p.getType()==Token.AND)||(node.getType()==Token.OR),"Expected: AND or OR, Got: "+Token.name(node.getType()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=paramName.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
expressionRoot=defCfgNode;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.removeChild(def);
n.replaceChild(n,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
info.parentForNewVarDecl=cur;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
info.siblingToInsertVarDeclBefore=cur.getFirstChild();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p.getType()==Token.GETPROP);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.setDebugInformation(cur.getFirstChild(),p,"?"+".prototype");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.setString(varName);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(NodeUtil.isCall(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(inferConcreteType(getTopScope(),n).isNone()||type.isAll()){
break;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.TYPEOF);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n=child.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
add(cur,Context.STATEMENT);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur!=null&&!fnRecursionName.isEmpty()&&!fnRecursionName.equals(varName)&&NodeUtil.isNameReferenced(p,fnRecursionName)){
return false;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
declareArguments(defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(cur.getType()==Token.GET||cur.getType()==Token.SET){
add(cur);
}else {
if(cur.getType()==Token.STRING&&!TokenStream.isKeyword(cur.getString())&&TokenStream.isJSIdentifier(cur.getString())&&NodeUtil.isLatin(cur.getString())){
add(cur.getString());
}else {
addExpr(cur,1);
}
add(":");
addExpr(cur.getFirstChild(),1);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(n.getType()==Token.CALL||callsite.getType()==Token.NEW);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(isPrefix(n)||valueIsDiscarded(node),"Unfolding postfix ++/-- requires that the result be ignored.");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(cur),"Cannot unfold compound assignment if LHS can have side effects");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
addExpr(n,numUseWithinUseCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
tryMinimizeExits(cur,numUseWithinUseCfgNode,varName);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkNotNull(n.getJSType());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur.add(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(p.getType()==Token.CALL,"Expected: CALL, Got: "+Token.name(node.getType()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur=addMarker((FunctionType)n.getJSType(),nodeToInsertAfter,null);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.detachChildren();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!NodeUtil.isGetProp(n)){
return false;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.replaceChild(n,cur);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(expressionRoot!=null){
cur.addChildToBack(returnRhs);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.addChildToFront(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.setString(coalescedVar.name);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.isVar(p)){
removeVarDeclaration(n);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.setJSType(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.copyNameAnnotations(n.getLastChild(),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(n,cur);
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeTraversal.traverse(compiler,n,new GatherSideEffectSubexpressionsCallback(compiler,new CopySideEffectSubexpressions(compiler,Lists.newArrayList())));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(NodeUtil.mayEffectMutableState(defCfgNode)){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
predicate.add(new CallSite(p,n,defCfgNode,defCfgNode,defCfgNode));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.VAR :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.addChildToBack(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
info.occurrences.add(new StringOccurrence(n,p));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
info.numOccurrences++;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
NodeUtil.copyNameAnnotations(def,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
def.removeChild(def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(n,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
cur.detachFromParent();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
expressionRoot.detachFromParent();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.addChildAfter(cur,n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
expressionRoot.detachFromParent();
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(!areSafeFlagsToFold(p.getString())){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p=new Node(Token.REGEXP,p,p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur==null){
return false;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
Preconditions.checkState(cur.getType()==Token.NAME);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.replaceChild(p,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",expressionRoot.getQualifiedName()),callee,"goog.base"));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,p)){
continue;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideAssignmentToIdConstant(n,p)){
continue;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,p)){
continue;
}
if(insideAssignmentToIdConstant(n,p)){
continue;
}

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.setString(varName);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
p.replaceChild(def,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.addChildToFront(new Node(Token.EXPR_RESULT,def).copyInformationFrom(cond));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.OBJECTLIT :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
global.uses.add(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur==null){
src=MISSING_SOURCE;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur.isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
tryRemoveUnconditionalBranching(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.OR :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
case Token.GETPROP :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
res=cur.checkTreeEqualsImpl(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
res=cur.checkTreeTypeAwareEqualsImpl(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur==null&&p.getType()==Token.FUNCTION){
varType=parent.getJSType();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
n.children().iterator().next();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cfg.getDirectedGraphNode(cur)==null){
return cur;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
========
if(cur==null){
info=p.getJSDocInfo();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}

========
com.google.javascript.jscomp.FlowSensitiveInlineVariables,469
com.google.javascript.jscomp.FlowSensitiveInlineVariables,471
com.google.javascript.jscomp.FlowSensitiveInlineVariables,472
com.google.javascript.jscomp.FlowSensitiveInlineVariables,470
Find no block!
com.google.javascript.jscomp.FlowSensitiveInlineVariables,476
========
for(Node p=expressionRoot.getParent().getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=expressionRoot.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(p.getType()==Token.OBJECTLIT);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=child.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkNotNull(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(NodeUtil.isStatementBlock(p.getParent()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=node.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p!=null,"Cannot find continue target.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p!=null,"Cannot find break target.");
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(p.getType()==Token.IF);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return true;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.isExprAssign(cur.getParent())&&cur.getChildAtIndex(1)==expressionRoot){
return true;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(isName(p));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.hasOneChild());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(n.getType()==Token.FUNCTION);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p=p.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p==def.getLastChild()){
for(Node n : parent.getAncestors()){
int n.getType()=an.getType();
if(ancestorType==Token.COMMA)continue;
if(ancestorType!=Token.EXPR_RESULT&&ancestorType!=Token.BLOCK)return ;else break;
}
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
swtich (cur.getType()){
case Token.STRING :
return getStringValue(parent);

}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=n;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||n.getType()==Token.NAME||nType==Token.GETPROP);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=assignNode.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=Token.NAME;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=NAME;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
delta+=PER_PROTOTYPE_MEMBER_DELTA;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(PrototypeMemberDeclaration.extractDeclaration(cur)==null){
break;
}
delta+=PER_PROTOTYPE_MEMBER_DELTA;

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
c=cur.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(cur,n.getParent()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(isExpressionTreeUnsafe(cur,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getFirstChild().getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=cur.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(cur),n).isFavorable()){
totalDelta+=instance.delta;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(varName==null){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.addChildBefore(NodeUtil.newVarNode(varName,def),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=def;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=ancestor.getParent();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.removeChild(def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.getParent().replaceChild(n,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.replaceChild(n,Node.newString(varName));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Node.newString(varName).copyInformationFrom(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
connectToPossibleExceptionHandler(def,node.getFirstChild());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=block.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.getParent().replaceChild(n,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()==Token.FUNCTION){
Preconditions.checkState(n.getProp(Node.FUNCTION_PROP)==null);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
normalizeBlocks(p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(!NodeUtil.isExprAssign(cur)){
return null;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.detachChildren();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur.getParent().replaceChild(n,defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.detachChildren();
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(isUselessCase(def,(expressionRoot==n.getFirstChild())?null:lastNonRemovable)){
removeCase(n,c);
return null;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.hasOneChild()){
NodeUtil.redeclareVarsInsideBranch(catchBlock);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(n,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getQualifiedName()==null||p.getNext()!=null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(def==null||previousCase.getNext()==p);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
traverseBranch(cur,n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getNext()==null&&body.getType()==Token.BLOCK);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(isSimpleAssignment(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(n,cur);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=block.getParent();p!=null;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.WHILE);
NodeUtil.redeclareVarsInsideBranch(n);
NodeUtil.removeChild(n.getParent(),n);
reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p!=null){
createEdge(def,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=fnParams.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=current.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getType()==Token.NAME);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
def.removeFirstChild();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()!=Token.GETPROP){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.getType()!=Token.STRING){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
addAllChildren(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(expressionRoot==null){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getType()==Token.NEW||n.getType()==Token.CALL);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=objLitNode.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=args.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString())!=null&&NodeUtil.getFunctionInfo(n)==null?null:fnInfo.getParameterType(cur.getString()).isVarArgs()){
cur.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.getType()==Token.EXPR_RESULT){
JSDocInfo ref.node.getJSDocInfo()=ref.node.getJSDocInfo();
if(info!=null&&info.hasTypedefType()){
return ;
}
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=objectLiteral.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()!=Token.STRING){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=arg.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(p.getType()!=Token.VAR||declParent.hasOneChild(),"AST not normalized.");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.detachFromParent();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
moveAllFollowing(defCfgNode,ifNode.getParent(),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n2clone.parent=def;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(result.first==null){
result.first=p.cloneTree();
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
result.last=p.cloneTree();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n2clone.parent=def;
if(result.first==null){
result.first=p.cloneTree();
}
result.last=p.cloneTree();

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getChildCount()==2);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p.replaceChild(cur,new Node(Token.CALL,Node.newString(Token.NAME,STUB_METHOD_NAME),Node.newNumber(numUseWithinUseCfgNode)).copyInformationFromForTree(value));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=start.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
n.removeChild(cur);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(cur!=null);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(expressionRoot==null||cur.hasChild(externsRoot));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
check(n,false);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=map.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=parameters.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(predicate.getDefinitionsReferencedAt(cur)==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
c=trySimpilifyUnusedResult(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
next=p.getNext();
c=trySimpilifyUnusedResult(p);

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(isStorageNode(cur));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.removeChild(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(def.getType()==Token.CALL);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(expressionRoot==null){
return def;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(def.getType()==Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getLastChild().getString().equals("call")||propString.equals("apply")){
return p.getNext();
}else {
return callTarget.getFirstChild();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
predicate.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(mayHaveSideEffects(def)){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=typeArray.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.getType()!=Token.VAR)return ;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(n.getType()==Token.IF)return ;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=n.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if((p.getType()!=Token.ARRAYLIT)||!n.getString().equals("join")){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
ref.node.getParent().removeChild(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)){
n.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
createEdge(def,Branch.ON_TRUE,computeFallThrough(cur));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
connectToPossibleExceptionHandler(def,NodeUtil.getConditionExpression(node));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.removeChild(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
getParameterSlot(numUseWithinUseCfgNode).getType();
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=paramsParent.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.getType()==Token.RETURN){
return statement.getFirstChild();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(n.getType()==Token.LP);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
scanVars(def,n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if((cur.getType()!=Token.STRING)||((p.getType()!=Token.STRING))){
return def;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=child.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.removeChild(defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkNotNull(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.BLOCK);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkNotNull(n);
Preconditions.checkArgument(n.getType()==Token.BLOCK);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,p.getString());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p=child.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(TWEAK_FUNCTIONS_MAP.get(n.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.call",cur.getQualifiedName()),callee,"goog.base"));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(predicate.get(n.getFirstChild().getQualifiedName())==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
defCfgNode=n;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=def.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return (n.getType()==Token.STRING)&&!NodeUtil.isAssignmentOp(def)&&(parent.getFirstChild()==expressionRoot);

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return NodeUtil.isAssignmentOp(def)&&(parent.getFirstChild()==expressionRoot);

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(!isLowerCamelCaseWithNumericSuffixes(cur.getString())){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+cur.getString(),cur);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.mayEffectMutableState(defCfgNode)){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
predicate.add(new CallSite(def,n,defCfgNode,cur,cur.getFirstChild()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if((p!=null)&&(p.isNoShadow()||p.isLocal())){
continue;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=current.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case GET_BOOLEAN :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument((def.getType()==Token.AND)||(node.getType()==Token.OR),"Expected: AND or OR, Got: "+Token.name(node.getType()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
numUseWithinUseCfgNode++;
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
addExpr(cur,1);
numUseWithinUseCfgNode++;

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
Preconditions.checkState(p.getType()==Token.GETPROP);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
cur=paramName.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
expressionRoot=defCfgNode;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(NodeUtil.isCall(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(cur.getQualifiedName()==null){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.copyInformationFrom(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(n.getFirstChild(),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
assertDefinitionNode(n,Token.VAR);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.setString(varName);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p.isNone()||type.isAll()){
break;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.addChildToFront(new Node(Token.VAR,p));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return (n.getType()==Token.STRING)&&(p.getType()==Token.ASSIGN)&&(parent.getFirstChild()==expressionRoot);

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return (p.getType()==Token.ASSIGN)&&(parent.getFirstChild()==expressionRoot);

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
add(cur,Context.STATEMENT);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n=child.getNext();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
declareArguments(defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.CALL||callsite.getType()==Token.NEW);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
addExpr(n,numUseWithinUseCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(cur.getType()==Token.GET||cur.getType()==Token.SET){
add(cur);
}else {
if(cur.getType()==Token.STRING&&!TokenStream.isKeyword(cur.getString())&&TokenStream.isJSIdentifier(cur.getString())&&NodeUtil.isLatin(cur.getString())){
add(cur.getString());
}else {
addExpr(cur,1);
}
add(":");
addExpr(cur.getFirstChild(),1);
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.isNameReferenced(NodeUtil.getFunctionBody(n),"arguments")){
return false;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
tryMinimizeExits(cur,numUseWithinUseCfgNode,varName);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(n.getType()==Token.DO);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(isPrefix(def)||valueIsDiscarded(node),"Unfolding postfix ++/-- requires that the result be ignored.");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(!NodeUtil.mayHaveSideEffects(cur),"Cannot unfold compound assignment if LHS can have side effects");
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def.setType(Token.ASSIGN);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur.add(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(def.getType()==Token.CALL,"Expected: CALL, Got: "+Token.name(node.getType()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkNotNull(n.getJSType());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.VAR :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkArgument(NodeUtil.isName(n)||NodeUtil.isGetProp(n));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(expressionRoot!=null){
cur.addChildToBack(returnRhs);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.addChildToFront(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(n,Node.newNumber(0));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
n.addChildToBack(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(n.getType()==Token.NEW);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.AND :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.setString(coalescedVar.name);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(NodeUtil.isVar(def)){
removeVarDeclaration(n);
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
cur=addMarker((FunctionType)n.getJSType(),nodeToInsertAfter,null);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Iterables.addAll(Sets.newTreeSet(ALPHA),(FunctionType)n.getJSType().getAllImplementedInterfaces());
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(!areSafeFlagsToFold(def.getString())){
return n;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
def=new Node(Token.REGEXP,def,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p==null||var.isLocal()||var.isExtern()){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.setJSType(cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeUtil.copyNameAnnotations(n.getLastChild(),cur);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(n,cur);
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur.length()==0){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
NodeTraversal.traverse(compiler,n,new GatherSideEffectSubexpressionsCallback(compiler,new CopySideEffectSubexpressions(compiler,Lists.newArrayList())));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.OBJECTLIT :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.EQUALS :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur==null){
src=MISSING_SOURCE;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(n.getString().isEmpty()||compiler.getCodingConvention().isExported(name)){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,def)){
continue;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideAssignmentToIdConstant(n,def)){
continue;
}
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
if(insideGetUniqueIdCall(n,def)){
continue;
}
if(insideAssignmentToIdConstant(n,def)){
continue;
}

for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
Preconditions.checkState(cur.getType()==Token.NAME);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(def,def);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.addChildToFront(new Node(Token.EXPR_RESULT,def).copyInformationFrom(cond));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
info.occurrences.add(new StringOccurrence(n,def));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
info.numOccurrences++;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(n.getJSDocInfo()!=null){
for(Node def : info.getTypeNodes()){
fixTypeNode(node);
}
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.setString(varName);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.GETPROP :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.FUNCTION :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
tryRemoveUnconditionalBranching(n);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
nameObj.type=type;
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
case Token.OR :

for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),compiler.getCodingConvention().getGlobalObject(),def.getLineno(),firstArgument.getCharno()));
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(numUseWithinUseCfgNode<0){
return ;
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(cur==null){
info=p.getJSDocInfo();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
res=cur.checkTreeEqualsImpl(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
res=cur.checkTreeTypeAwareEqualsImpl(p);
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
if(p==null&&def.getType()==Token.FUNCTION){
varType=parent.getJSType();
}
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
n.children().iterator().next();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
p.removeChild(defCfgNode);
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.removeChild(defCfgNode);
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
========
p.replaceChild(def,NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),String.format("%s.superClass_.%s.call",cur.getQualifiedName(),varName),callee,"goog.base"));
p.removeChild(defCfgNode);
compiler.reportCodeChange();
for(Node p=n.getParent();p!=expressionRoot;p=p.getParent()){
for(Node cur=p.getParent().getFirstChild();cur!=p;cur=cur.getNext()){
if(predicate.apply(cur)){
return true;
}
}
}
return false;

========
com.google.javascript.jscomp.NodeTraversal,125
Find no block!
com.google.javascript.jscomp.NodeTraversal,128
com.google.javascript.jscomp.AbstractCompiler,35
Find no block!
com.google.javascript.jscomp.AbstractCompiler,39
Find no block!
com.google.javascript.jscomp.AbstractCompiler,259
Find no block!
com.google.javascript.jscomp.AbstractCompiler,172
com.google.javascript.jscomp.AbstractCompiler,232
com.google.javascript.jscomp.AbstractCompiler,233
Find no block!
com.google.javascript.rhino.Node,368
Find no block!
com.google.javascript.rhino.Node,369
========
type=nodeType;
parent=null;
right.next=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
right.parent=this;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
right.next=null;
right.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(right.next==null,"second new child has existing sibling");
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
first=next;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(right.next==null);
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
first=last=next;
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
result.first=null;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
this(nodeType,next);
sourcePosition=-1;

========
========
type=EXPR_VOID;
parent=null;
sourcePosition=-1;

========
========
type=EXPR_RESULT;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_BITOR :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN_BITXOR;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_BITAND :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN_LSH;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_RSH :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN_URSH;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_ADD :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN_SUB;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_MUL :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ASSIGN_DIV;
parent=null;
sourcePosition=-1;

========
========
case ASSIGN_MOD :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=BITOR;
parent=null;
sourcePosition=-1;

========
========
case BITXOR :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=BITAND;
parent=null;
sourcePosition=-1;

========
========
case EQ :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=NE;
parent=null;
sourcePosition=-1;

========
========
case LT :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=LE;
parent=null;
sourcePosition=-1;

========
========
case GT :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=GE;
parent=null;
sourcePosition=-1;

========
========
case LSH :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=RSH;
parent=null;
sourcePosition=-1;

========
========
case URSH :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=ADD;
parent=null;
sourcePosition=-1;

========
========
case SUB :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=MUL;
parent=null;
sourcePosition=-1;

========
========
case DIV :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=MOD;
parent=null;
sourcePosition=-1;

========
========
case SHEQ :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=SHNE;
parent=null;
sourcePosition=-1;

========
========
case COMMA :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=INSTANCEOF;
parent=null;
sourcePosition=-1;

========
========
case IN :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=DEC;
parent=null;
sourcePosition=-1;

========
========
case INC :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=NOT;
parent=null;
sourcePosition=-1;

========
========
case BITNOT :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=POS;
parent=null;
sourcePosition=-1;

========
========
case NEG :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
this(nodeType,next,next);
sourcePosition=-1;

========
========
type=SPECIALCALL_EVAL;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
this.first=firstVarNode;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
this.nodeB=node;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
this.next=site;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
this(nodeType,next,next,next);
sourcePosition=-1;

========
========
type=nodeType;
case Token.RETURN :

parent=null;
sourcePosition=-1;

========
========
type=VOID;
parent=null;
sourcePosition=-1;

========
========
default :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
this(nodeType,next,next,next,next);
sourcePosition=-1;

========
========
this.next=oldChild;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.next=newChild;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.str=name;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
if(getCharno()==-1){
charno=0;
}
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
if(next==last)last=next;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
prevChild.next=next;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
if(next==last)last=next;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
child.next=null;
parent=null;
sourcePosition=-1;

========
========
type=CALL_GET;
parent=null;
sourcePosition=-1;

========
========
type=ALIASING_GET;
parent=null;
sourcePosition=-1;

========
========
case Token.NEW :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=SPECIALCALL_WITH;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.next=gramps;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=type;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.objectValue=objectValue;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.next=next;
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.next=next;
type=type;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.LP :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkArgument(child.parent==null);
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
child.next=null;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
if(last==null){
parent=last=next;
return ;
}
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case SIMPLE_CALL :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
parent.addChildToBack(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
nodeType--;
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
nodeType--;
type=nodeType;
parent=null;
parent.addChildToBack(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.addChildToBack(parent);
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.next=n;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.next=callNode;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.next=nextGetPropNode;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
this.next=nextGetPropFirstChildNode;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
case Token.RETURN :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
this.next=nameNode;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
this.next=grandparent;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkState(parent.getType()==Token.VAR||NodeUtil.isFunctionDeclaration(parent));
parent=null;
sourcePosition=-1;

========
========
child.next=first;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
first=next;
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(last==null){
last=next;
}
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
type=nodeType;
Preconditions.checkArgument(child.parent==null);
parent=null;
sourcePosition=-1;

========
========
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.parent==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
type=nodeType;
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
if(last==null){
last=next;
}
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
first=next;
type=nodeType;
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.parent==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
first=next;
if(last==null){
last=next;
}
type=nodeType;
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
if(next==last)last=getChildBefore(next);
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
if(next==last)last=getChildBefore(next);
child.next=null;
parent=null;
sourcePosition=-1;

========
========
newChild.next=node.next;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
node.next=next;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
if(last==nodeB){
last=next;
}
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
parent=null;
sourcePosition=-1;

========
========
used=used;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
case Token.OR :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
case Token.HOOK :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=GETPROP;
parent=null;
sourcePosition=-1;

========
========
type=GETELEM;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
if(next==first){
first=next;
}else {
Node getChildBefore(next)=getChildBefore(child);
prev.next=newChild;
}
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
if(next==last)last=next;
child.next=null;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
Preconditions.checkState(used==true);
sourcePosition=-1;

========
========
used=true;
type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
swtich (type){
case Token.FUNCTION :
traverseFunction(next,parent);
break;

default :
for(Node next.getFirstChild()=n.getFirstChild();child!=null;){
Node next=child.getNext();
traverseBranch(child,n);
child=next;
}
break;

}
parent=null;
sourcePosition=-1;

========
========
case Token.GETELEM :

type=nodeType;
parent=null;
sourcePosition=-1;

========
========
type=nodeType;
parent=null;
Preconditions.checkState(used==true);
parent.addChildToBack(parent);
sourcePosition=-1;

========
========
Preconditions.checkArgument(right.next==null);
type=nodeType;
parent=null;
first=next;
sourcePosition=-1;

========
========
parent.replaceChild(next,parent);
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
type=nodeType;
parent=null;
Preconditions.checkNotNull(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.addChildToBack(new Node(Token.SCRIPT));
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
type=nodeType;
parent=null;
Preconditions.checkNotNull(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.addChildToBack(new Node(Token.SCRIPT));
type=nodeType;
parent=null;
Preconditions.checkNotNull(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
parent.addChildToBack(new Node(Token.SCRIPT));
type=nodeType;
parent=null;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
parent.addChildToBack(new Node(Token.SCRIPT));
type=nodeType;
parent=null;
Preconditions.checkNotNull(parent);
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
com.google.javascript.rhino.Node,370
com.google.javascript.rhino.Node,371
com.google.javascript.rhino.Node,372
Find no block!
com.google.javascript.rhino.Node,374
Find no block!
com.google.javascript.rhino.Node,375
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
Preconditions.checkArgument(right.next==null);
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
last=cur;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
Preconditions.checkArgument(right.next==null);
type=nodeType;
parent=null;
first=last=child;
last=cur;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
right.next=null;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(last==null){
last=child;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
last=child;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
if(first==last)last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(last==nodeB){
last=child;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.copyInformationFrom(cur);
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
prevChild.next=child;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
if(last==next)last=child;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
if(last==next)last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
addChildAfter(child,last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
child.copyInformationFrom(child);
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
last=cur.getLastSibling();
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this.used=inlineGlobalFunctions;
sourcePosition=-1;

========
========
if(last==null){
last=cur.getLastSibling();
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.next=declaration;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(next.getJSType().isFunctionType());
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.str=varName;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.last=defCfgNode;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.child=use;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
super(next,used);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this.str=idPrefix;
sourcePosition=-1;

========
========
super(used);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last=nodeB;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
state.extractBeforeStatement=child;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(NodeUtil.isGet(child.getFirstChild().getFirstChild()));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
state.extractBeforeStatement=last;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.str=namespace;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last=null;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
super(used);
last=child;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
child.parent=null;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
this.parent=parent;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.getStringValue(first)==null){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
super(nodeB,used);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
case Token.RETURN :

parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.VAR :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(storageNodeIsLValue(nodeB)){
boolean NodeUtil.isAssignmentOp(parent)&&parent.getType()!=Token.ASSIGN=NodeUtil.isAssignmentOp(parent)&&parent.getType()!=Token.ASSIGN;
return (nonSimpleAssign||parent.getType()==Token.DEC||parent.getType()==Token.INC);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
first.addChildToFront(last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
this.str=next.getString();
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
advanceLookAhead(true);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.str=templateTypeName;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last=parent;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(inForcedStringContext(next)){
return tryFoldInForcedStringContext(n);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
nodeB.setType(Token.ASSIGN);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last.copyInformationFromForTree(nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
nodeB.addChildToBack(last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
skipEOLs();
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(NodeUtil.isLiteralValue(next,false)&&NodeUtil.isLiteralValue(next,false)){
return tryFoldAddConstant(nodeB,left,right);
}else {
return tryFoldLeftChildAdd(node,left,right);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(NodeUtil.isName(next)){
return true;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(next.getQualifiedName()==null){
return false;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
createAssignStatementNode(str,first).copyInformationFromForTree(nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
nodeB.addChildrenToBack(createAssignStatementNode(str,first));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(next.getFirstChild()==null){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(first==null){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(!NodeUtil.isGet(next.getFirstChild())||!NodeUtil.isImmutableValue(first)){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(NodeUtil.getArgumentForFunction(next,COLUMN_BITS)!=null){
next.getFirstChild().getNext().removeChild(formalArgPtr);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
default :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=CALL_GET;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=ALIASING_GET;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.NEW :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.RETURN :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.SCRIPT :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
this.last=node;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(!NodeUtil.constructorCallHasSideEffects(nodeB)){
return true;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(getReplacementReturnStatement(next.getLastChild(),str)==null){
next.removeChild(next.getLastChild());
}else {
resultNode.copyInformationFromForTree(ret);
block.replaceChild(ret,resultNode);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=FUNCTION;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(next.getType()==Token.FUNCTION){
decl=decl.getLastChild();
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.LP :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.last=nameNode;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.child=oldChild;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.str=name;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.removeChild(this);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this(nodeType,child);
sourcePosition=-1;

========
========
this.next=lValue;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.ERROR :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.child=gramps;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
used=used;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent.addChildToBack(last);
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(NodeUtil.getBooleanValue(last)!=TernaryValue.FALSE){
return next;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
NodeUtil.removeChild(next.getParent(),n);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
reportCodeChange();
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.GETELEM :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
case Token.OR :

type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.HOOK :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.replaceChild(next,next);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case EXPRESSION :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.parent=n;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
this.child=callNode;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
addExpr(first,sourcePosition);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(next!=null){
add("(");
addList(next);
add(")");
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(str.isEmpty()){
str="<anonymous>";
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(parent!=null){
str=getFunctionName(parent)+"::";
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(nodeB.getType()==Token.NAME){
return true;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(last.getType()==Token.NAME&&isNameAssignedTo(name.getString(),next)){
return false;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
this.child=nameNode;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
first.setType(NodeUtil.getOpFromAssignmentOp(nodeB));
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
nodeB.replaceChildAfter(last,first);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
nodeB.setType(Token.ASSIGN);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
if(NodeUtil.isForIn(next)){
return n;
}
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
if(next.getFirstChild().getType()!=Token.EMPTY&&init.getType()!=Token.VAR){
init=trySimpilifyUnusedResult(init,false);
}
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(parent!=null){
next.detachChildren();
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=GETPROP;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=GETELEM;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.addChildToBack(nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
parent.addChildToBack(nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
transformPotentiallyUnwrappedBlock(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
transformElement(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
parent.addChildToBack(nodeB);
transformElement(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
parent.addChildToBack(nodeB);
transformPotentiallyUnwrappedBlock(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
transformElement(child,nodeB);
transformPotentiallyUnwrappedBlock(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
parent.addChildToBack(nodeB);
transformElement(child,nodeB);
transformPotentiallyUnwrappedBlock(child,nodeB);
child.parent=this;
sourcePosition=-1;

========
========
case SIMPLE_ASSIGNMENT :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.addChildToBack(new Node(Token.SCRIPT));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.SCRIPT).setIsSyntheticBlock(true);
parent.addChildToBack(new Node(Token.SCRIPT));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.replaceChild(next,last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(isPure(next)){
return true;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(nodeHasCall(next)){
return false;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
transformElement(child,nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
transformPotentiallyUnwrappedBlock(child,nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
putIntProp(SIDE_EFFECT_FLAGS,COLUMN_BITS);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
last=next.getParent();
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(!used){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(!NodeUtil.isName(next.getFirstChild())||!"Date".equals(date.getString())){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(next.getFirstChild().getNext()==null||!NodeUtil.isCall(callGoogNow)||callGoogNow.getNext()!=null){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if((FunctionType)next.getJSType()==null){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(!(FunctionType)next.getJSType().isConstructor()&&((FunctionType)next.getJSType().getReturnType()==null||returnType.isUnknownType())){
reportUnknownReturnType(next);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(str==null){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last.replaceChild(next,first);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
setPosition(parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.addChildToBack(parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.addChildToBack(new Node(Token.EMPTY));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
setPosition(parent);
parent.addChildToBack(parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if((first.getType()==Token.NUMBER)){
add("(");
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if((first.getType()==Token.NUMBER)){
add(")");
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
add(".");
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this(nodeType,next,next);
sourcePosition=-1;

========
========
case Token.REGEXP :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(!NodeUtil.functionCallHasSideEffects(nodeB)){
return true;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=SPECIALCALL_EVAL;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=SPECIALCALL_WITH;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this(nodeType,next,next,next);
sourcePosition=-1;

========
========
swtich (last.getType()){
case Token.SCRIPT :

case Token.BLOCK :

case Token.LABEL :
return true;

default :
return false;

}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(getPrototype().getImplicitPrototype()==null){
return null;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
if(parent.getType()==Token.FUNCTION||parentNodeType==Token.CATCH||parentNodeType==Token.LP||parentNodeType==Token.VAR){
return false;
}
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
this(nodeType,next,next,next,next);
sourcePosition=-1;

========
========
if(!(NodeUtil.isName(next)||NodeUtil.isGet(n)&&!NodeUtil.isGetProp(parent))){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(child.getType()==TagType.CatchClause){
transformElement(child,last);
}else {
nodeType++;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.addChildToBack(nodeB);
transformElement(child,nodeB);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.addChildToBack(nodeB);
nodeB.addChildToBack(last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
transformElement(child,nodeB);
nodeB.addChildToBack(last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.addChildToBack(nodeB);
transformElement(child,nodeB);
nodeB.addChildToBack(last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(!(next!=null)&&NodeUtil.isFunctionExpression(parent)){
traverseBranch(first,parent);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
pushScope(parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if((next!=null)&&NodeUtil.isFunctionExpression(parent)){
traverseBranch(first,parent);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(NodeUtil.getBooleanValue(first)!=TernaryValue.FALSE){
return next;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(hasBreakOrContinue(next)){
return n;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
next.getParent().replaceChild(n,last);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(NodeUtil.getExpressionBooleanValue(parent.getFirstChild())==TernaryValue.UNKNOWN){
return parent;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.removeChild(next);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(!NodeUtil.isGetProp(next.getFirstChild())){
return ;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(next.getFirstChild().getQualifiedName()==null){
return ;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
if(getCharno()==-1){
charno=0;
}
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
next.cloneNode().addChildToBack(next.getFirstChild().cloneTree());
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
next.cloneNode().addChildToBack(last);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
next.cloneNode().addChildToBack(next.getFirstChild().cloneTree());
next.cloneNode().addChildToBack(last);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(!NodeUtil.isStatementBlock(last)){
return ;
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkNotNull(first);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
case Token.BITNOT :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.NEG :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
assertDefinitionNode(next,Token.FUNCTION);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(NodeUtil.isFunctionDeclaration(next)){
defineSlot(n.getFirstChild(),n,getFunctionType(next.getFirstChild().getString(),next,next.getJSDocInfo(),null));
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(used&&!next.getBooleanProp(Node.IS_CONSTANT_NAME)){
if(used){
String next.getString()=next.getString();
throw new IllegalStateException("Unexpected const change.\n"+"  name: "+name);
}
n.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
first.replaceChild(next.getParent(),NodeUtil.newExpr(last));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
if(type!=null){
next.setJSType(type);
}
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
parent.replaceChild(next,next);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkState(NodeUtil.isStatementBlock(next.getParent()));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
next.addChildrenToFront(NodeUtil.newVarNode(str,null).copyInformationFromForTree(next));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
next.getParent().addChildBefore(next,next);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.replaceChild(next,Node.newString(Token.NAME,str));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
next.getParent().addChildBefore(next,next);
default :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=EXPR_VOID;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=EXPR_RESULT;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
replaceThis(last,next.getFirstChild().removeFirstChild());
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(parent.getChildCount()!=3){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(last.getNext().getType()!=Token.STRING){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(parent.getChildCount()!=3){
return ;
}
if(last.getNext().getType()!=Token.STRING){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
super(type,COLUMN_BITS,COLUMN_BITS);
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
if(null==str){
throw new IllegalArgumentException("StringNode: str is null");
}
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(next.getFirstChild().getType()!=Token.GETPROP){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if(NodeUtil.mayEffectMutableState(next)){
return ;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.replaceChild(next,parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.replaceChild(next,parent);
reportCodeChange();
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if((start+COLUMN_BITS)>str.length()||(length<0)||(start<0)){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
last.replaceChild(next,first);
reportCodeChange();
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
case Token.FUNCTION :

Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
super(type);
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
next.removeChild(used?next.getFirstChild().getNext():first);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
parent.replaceChild(next,used?next.getFirstChild().getNext():first);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
first.addChildToFront(next);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.getParent().getParent().replaceChild(parent.getParent(),new Node(Token.VAR,first));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.removeChild(next);
first.addChildToFront(next);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.removeChild(next);
parent.getParent().getParent().replaceChild(parent.getParent(),new Node(Token.VAR,first));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
first.addChildToFront(next);
parent.getParent().getParent().replaceChild(parent.getParent(),new Node(Token.VAR,first));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.removeChild(next);
first.addChildToFront(next);
parent.getParent().getParent().replaceChild(parent.getParent(),new Node(Token.VAR,first));
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
if((COLUMN_BITS>str.length())||(start>stringAsString.length())){
return next;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
if(isVar(parent)){
return next.getFirstChild();
}else if(isAssign(parent)&&parent.getFirstChild()==n){
return n.getNext();
}else {
return null;
}
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
new Node(Token.EXPR_RESULT).copyInformationFromForTree(parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
parent.getParent().addChildBefore(new Node(Token.EXPR_RESULT),parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
new Node(Token.EXPR_RESULT).copyInformationFromForTree(parent);
parent.getParent().addChildBefore(new Node(Token.EXPR_RESULT),parent);
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=type;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.objectValue=objectValue;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
========
this.next=next;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=nodeType;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
TESTING : com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
========
this.next=next;
Preconditions.checkArgument(child.parent==null,"new child has existing parent");
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
type=type;
parent=null;
first=last=child;
child.next=null;
child.parent=this;
sourcePosition=-1;

========
^C
real	193m33.081s
user	248m36.100s
sys	22m14.759s
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=83^C
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure
apiarty> mkdir math
apiarty> ls
closure  math
apiarty> cd math
apiarty> ls
apiarty> mkdir math_4_buggy
apiarty> cd math_4_buggy/
apiarty> ls
apiarty> pwd
/SimFix/sbfl/projects/math/math_4_buggy
apiarty> defects4j checkout -p Math -v 4b -w .
Checking out 277e6172 to /SimFix/sbfl/projects/math/math_4_buggy........... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 277e6172:d609e65f..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-4b......................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting
  - org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel
apiarty> ls
LICENSE.txt	   all_tests		       doap_math.rdf		    license-header.txt	siteMods
NOTICE.txt	   build.xml		       doc			    math-RC.sh		src
PROPOSAL.html	   checkstyle.xml	       failing_tests		    math-pre-RC.sh	target
RELEASE-NOTES.txt  defects4j.build.properties  findbugs-exclude-filter.xml  pom.xml		test-jar.xml
apiarty> cd ..
apiarty> ls
math_4_buggy
apiarty> cd ..
apiarty> ls
closure  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Math 4 projects/math/math_4_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=math --bug_id=4 > /apiarty/findings/
bash: /apiarty/findings/: Is a directory

real	0m0.005s
user	0m0.000s
sys	0m0.005s
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=math --bug_id=4 > /apiarty/findings/math_4_simfix.txt

real	302m41.387s
user	514m34.024s
sys	18m2.847s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure  math
apiarty> cd math
apiarty> ls
math_4_buggy
apiarty> math_17_buggy
bash: math_17_buggy: command not found
apiarty> mkdir math_17_buggy/
apiarty> ls
math_17_buggy  math_4_buggy
apiarty> cd math_17_buggy/
apiarty> ls
apiarty> defects4j checkout -p Math -v 17b -w .
Checking out 621806b7 to /SimFix/sbfl/projects/math/math_17_buggy.......... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 621806b7:07611165..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-17b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.apache.commons.math3.dfp.DfpTest::testMultiply
apiarty> cd ..
apiarty> ls
math_17_buggy  math_4_buggy
apiarty> cd ..
apiarty> ls
closure  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Math 17 projects/math/math_17_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=math --bug_id=17 > /apiarty/findings/math_17_simfix.txt
^[
real	306m18.127s
user	498m49.273s
sys	36m22.255s
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
closure  math
apiarty> mkdir lang
apiarty> cd lang
apiarty> mkdir lang_47_buggy
apiarty> cd lang_47_buggy/
apiarty> ls
apiarty> defects4j checkout -p Lang -v 47b -w .
Checking out d5e34304 to /SimFix/sbfl/projects/lang/lang_47_buggy.......... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff d5e34304:19f33e4e..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Lang-47b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.apache.commons.lang.text.StrBuilderTest::testLang412Left
  - org.apache.commons.lang.text.StrBuilderTest::testLang412Right
apiarty> cd ../..
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ./sbfl.sh Lang 47 projects/lang/lang_47_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=lang --bug_id=47 > /apiarty/findings/lang_47_simfix.txt

real	300m43.591s
user	468m56.728s
sys	40m48.283s
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd sbl
bash: cd: sbl: No such file or directory
apiarty> cd sbfl
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd final
apiarty> ls
README.md  result  result-All  result-del  simfix-all.jar  simfix-del.jar  simfix.jar
apiarty> cd result
apiarty> ls
README.md  log	patch
apiarty> cd patch
apiarty> ls
chart  closure	lang  math  time
apiarty> cd chart/
apiarty> ls
1  12  14  18  20  22  3  7
apiarty> cd 1
apiarty> ls
0
apiarty> cd 0
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> /Users/marki/Downloads/npc.csv ^C
apiarty> ls
1_AbstractCategoryItemRenderer.java
apiarty> cd ..
apiarty> ls
0
apiarty> cd ..
apiarty> ls
1  12  14  18  20  22  3  7
apiarty> cd 14
apiarty> ls
3
apiarty> cd 3
apiarty> ls
1_CategoryPlot.java
apiarty> cd ..
apiarty> ls
3
apiarty> cd ..
apiarty> ls
1  12  14  18  20  22  3  7
apiarty> cp -r 14 /apiarty/findings/
apiarty> cp -r 1 /apiarty/findings/
apiarty> ls
1  12  14  18  20  22  3  7
apiarty> cd ..
apiarty> ls
chart  closure	lang  math  time
apiarty> cd ..
apiarty> ls
README.md  log	patch
apiarty> cd ..
apiarty> ls
README.md  result  result-All  result-del  simfix-all.jar  simfix-del.jar  simfix.jar
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> cd closure/
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd closure_2_buggy/
apiarty> ls
CONTRIBUTORS  all_tests  closure-compiler.pom	     externs	    javadoc  test
COPYING       build	 contrib		     failing_tests  lib      tools
README	      build.xml  defects4j.build.properties  gen	    src
apiarty> cd ..
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd closure_104_buggy/
apiarty> ls
COPYING    build      defects4j.build.properties  gen	   src	    test_ori
README	   build.xml  externs			  javadoc  src_ori  test_purify
all_tests  contrib    failing_tests		  lib	   test     tools
apiarty> cd ..
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd ..
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd sbfl/
apiarty> cd sbfl
bash: cd: sbfl: No such file or directory
apiarty> cd sbfl
bash: cd: sbfl: No such file or directory
apiarty> pwd
/SimFix/sbfl
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
(reverse-i-search)`': cd ^Cfl
apiarty> ./sbfl.sh Closure 2 projects/closure/closure_2_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Closure/2/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/2/spectra'
apiarty> pwd
/SimFix/sbfl
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> cd closure/
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd ..
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> cd sbfl
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ochiai/
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd closure/
apiarty> ls
104  83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd spectra
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd closure/
apiarty> ls
104  83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd Closure/
apiarty> ls
104  2	83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  project.xml  sbfl  test
README.html  d4j-info	final  log  res		 src   testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104 > /apiarty/findings/closure_104_simfix_new.txt
Cannot get suspicious statement for non-existing file : /SimFix/sbfl/ochiai/closure/104/stmt-susps.txt
^C
real	1m26.801s
user	0m55.296s
sys	0m12.804s
apiarty> cd /SimFix/sbfl/ochiai/closure/104/
apiarty> ls
apiarty> cd ..
apiarty> ls
104  83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd Closure/
apiarty> ls
104  2	83
apiarty> cd 104
apiarty> ls
stmt-susps.txt
apiarty> ls
stmt-susps.txt
apiarty> cd ..
apiarty> ls
104  2	83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> mv closure/ closure-old
apiarty> ls
Closure  Lang  Math  closure-old  lang	math
apiarty> mv Closure/ closure
apiarty> ls
Lang  Math  closure  closure-old  lang	math
apiarty> cd closure
apiarty> ls
104  2	83
apiarty> cd ..
apiarty> ls
Lang  Math  closure  closure-old  lang	math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104 > /apiarty/findings/closure_104_simfix_new.txt
Cannot get suspicious statement for non-existing file : /SimFix/sbfl/ochiai/closure/104/stmt-susps.txt
^C
real	3m29.944s
user	2m21.197s
sys	0m32.161s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ochiai/
apiarty> ls
Lang  Math  closure  closure-old  lang	math
apiarty> cd closure/104/
apiarty> ls
apiarty> cd ls
bash: cd: ls: No such file or directory
apiarty> cd ..
apiarty> ls
104  2	83
apiarty> cd 104
apiarty> ls
apiarty> cd ..
apiarty> ls
104  2	83
apiarty> cd ..
apiarty> ls
Lang  Math  closure  closure-old  lang	math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Closure/104/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> cd spectra/
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd Closure/
apiarty> ls
104  2	83
apiarty> cd 104
apiarty> ls
log.txt
apiarty> vi log.txt
apiarty> ls
log.txt
apiarty> cd ..
apiarty> ls
104  2	83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd closure
apiarty> ls
104  83
apiarty> cd 104
apiarty> ls
log.txt
apiarty> vi log.txt 
apiarty> cd ..
apiarty> ls
104  83
apiarty> cd ..
apiarty> ls
Closure  Lang  Math  closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
/SimFix/sbfl/gzoltar/run_gzoltar.sh: line 130: cd: projects/chart/chart_25_buggy/: No such file or directory
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Cannot open config file (/SimFix/sbfl/.defects4j.config): No such file or directory
/SimFix/sbfl is not a valid working directory!
usage: defects4j export -p property_name [-o output_file] [-w work_dir]

Properties:
  classes.modified  Classes modified by the bug fix
  classes.relevant  Classes loaded by the triggering tests
  cp.compile        Classpath to compile the project
  cp.test           Classpath to compile and run the developer-written tests
  dir.bin.classes   Target directory of classes
  dir.bin.tests     Target directory of test classes
  dir.src.classes   Source directory of classes
  dir.src.tests     Source directory of tests
  tests.all         List of all developer-written tests
  tests.relevant    Relevant tests that touch at least one of the modified sources
  tests.trigger     Trigger tests that expose the bug
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> cd math
apiarty> ls
math_17_buggy  math_4_buggy
apiarty> cd ..
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=83 > /apiarty/findings/closure_83_simfix_new.txt
Cannot get suspicious statement for non-existing file : /SimFix/sbfl/ochiai/closure/83/stmt-susps.txt
^C
real	1m59.799s
user	1m11.817s
sys	0m15.706s
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 83 projects/chart/chart_83_buggy/
/SimFix/sbfl/gzoltar/run_gzoltar.sh: line 130: cd: projects/chart/chart_83_buggy/: No such file or directory
cat: /SimFix/sbfl/defects4j//framework/projects/Chart/loaded_classes/83.src: No such file or directory
cat: /SimFix/sbfl/defects4j//framework/projects/Chart/loaded_classes/83.src: No such file or directory
cat: /SimFix/sbfl/defects4j//framework/projects/Chart/relevant_tests/83: No such file or directory
wc: /SimFix/sbfl/defects4j//framework/projects/Chart/relevant_tests/83: No such file or directory
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Cannot open config file (/SimFix/sbfl/.defects4j.config): No such file or directory
/SimFix/sbfl is not a valid working directory!
usage: defects4j export -p property_name [-o output_file] [-w work_dir]

Properties:
  classes.modified  Classes modified by the bug fix
  classes.relevant  Classes loaded by the triggering tests
  cp.compile        Classpath to compile the project
  cp.test           Classpath to compile and run the developer-written tests
  dir.bin.classes   Target directory of classes
  dir.bin.tests     Target directory of test classes
  dir.src.classes   Source directory of classes
  dir.src.tests     Source directory of tests
  tests.all         List of all developer-written tests
  tests.relevant    Relevant tests that touch at least one of the modified sources
  tests.trigger     Trigger tests that expose the bug
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/83/spectra'
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... FAIL
Executed command:  cd /SimFix/sbfl/projects/closure/closure_83_buggy && /SimFix/sbfl/defects4j/major/bin/ant -f /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/SimFix/sbfl/defects4j -Dd4j.dir.projects=/SimFix/sbfl/defects4j/framework/projects -Dbasedir=/SimFix/sbfl/projects/closure/closure_83_buggy -Dbuild.compiler=javac1.7 -Dfile.export=/SimFix/sbfl/projects/closure/closure_83_buggy/.export.cp.test export.cp.test 2>&1
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Buildfile: /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml

sanity.check:

svnversion:

compile:
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:180: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 184 source files to /SimFix/sbfl/projects/closure/closure_83_buggy/build/classes
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collections.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayDeque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Comparator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Deque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Iterator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/PriorityQueue.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedHashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Logger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/ParseException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Stack.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Iterable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Appendable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map$Entry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Readable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Locale.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Random.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/MessageFormat.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStreamReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/Charset.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStreamWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Date.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Cloneable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Reader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/StringReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/AbstractSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Hashtable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ThreadLocal.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/beans/PropertyChangeListener.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassNotFoundException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/math/BigInteger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/reflect/Method.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassLoader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/ElementType.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Override.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac] ^
    [javac]   symbol:   variable TRUES
    [javac]   location: class CommandLineRunner
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: config has private access in AbstractCommandLineRunner
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                   ^
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                         ^
    [javac]   symbol:   method getString(String)
    [javac]   location: variable config of type CommandLineConfig
    [javac] 3 errors
    [javac] 100 warnings

BUILD FAILED
/SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: Compile failed; see the compiler error output for details.

Total time: 10 seconds
Cannot export property cp.test at /SimFix/sbfl/defects4j/framework/bin/d4j/d4j-export line 112.
Compilation failed in require at /SimFix/sbfl/defects4j//framework/bin/defects4j line 195.
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/83/spectra'
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... FAIL
Executed command:  cd /SimFix/sbfl/projects/closure/closure_83_buggy && /SimFix/sbfl/defects4j/major/bin/ant -f /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/SimFix/sbfl/defects4j -Dd4j.dir.projects=/SimFix/sbfl/defects4j/framework/projects -Dbasedir=/SimFix/sbfl/projects/closure/closure_83_buggy -Dbuild.compiler=javac1.7 -Dfile.export=/SimFix/sbfl/projects/closure/closure_83_buggy/.export.cp.test export.cp.test 2>&1
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Buildfile: /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml

sanity.check:

svnversion:

compile:
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:180: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 184 source files to /SimFix/sbfl/projects/closure/closure_83_buggy/build/classes
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collections.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayDeque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Comparator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Deque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Iterator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/PriorityQueue.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedHashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Logger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/ParseException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Stack.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Iterable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Appendable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map$Entry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Readable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Locale.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Random.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/MessageFormat.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStreamReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/Charset.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStreamWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Date.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Cloneable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Reader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/StringReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/AbstractSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Hashtable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ThreadLocal.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/beans/PropertyChangeListener.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassNotFoundException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/math/BigInteger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/reflect/Method.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassLoader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/ElementType.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Override.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac] ^
    [javac]   symbol:   variable TRUES
    [javac]   location: class CommandLineRunner
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: config has private access in AbstractCommandLineRunner
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                   ^
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                         ^
    [javac]   symbol:   method getString(String)
    [javac]   location: variable config of type CommandLineConfig
    [javac] 3 errors
    [javac] 100 warnings

BUILD FAILED
/SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: Compile failed; see the compiler error output for details.

Total time: 10 seconds
Cannot export property cp.test at /SimFix/sbfl/defects4j/framework/bin/d4j/d4j-export line 112.
Compilation failed in require at /SimFix/sbfl/defects4j//framework/bin/defects4j line 195.
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/83/spectra'
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... FAIL
Executed command:  cd /SimFix/sbfl/projects/closure/closure_83_buggy && /SimFix/sbfl/defects4j/major/bin/ant -f /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/SimFix/sbfl/defects4j -Dd4j.dir.projects=/SimFix/sbfl/defects4j/framework/projects -Dbasedir=/SimFix/sbfl/projects/closure/closure_83_buggy -Dbuild.compiler=javac1.7 -Dfile.export=/SimFix/sbfl/projects/closure/closure_83_buggy/.export.cp.test export.cp.test 2>&1
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Buildfile: /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml

sanity.check:

svnversion:

compile:
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:180: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 184 source files to /SimFix/sbfl/projects/closure/closure_83_buggy/build/classes
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collections.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayDeque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Comparator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Deque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Iterator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/PriorityQueue.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedHashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Logger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/ParseException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Stack.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Iterable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Appendable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map$Entry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Readable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Locale.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Random.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/MessageFormat.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStreamReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/Charset.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStreamWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Date.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Cloneable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Reader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/StringReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/AbstractSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Hashtable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ThreadLocal.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/beans/PropertyChangeListener.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassNotFoundException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/math/BigInteger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/reflect/Method.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassLoader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/ElementType.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Override.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac] ^
    [javac]   symbol:   variable TRUES
    [javac]   location: class CommandLineRunner
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: config has private access in AbstractCommandLineRunner
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                   ^
    [javac] /SimFix/sbfl/projects/closure/closure_83_buggy/src/com/google/javascript/jscomp/CommandLineRunner.java:430: error: cannot find symbol
    [javac] TRUES=extractList(config.getString("jsdoc.annotations"));
    [javac]                         ^
    [javac]   symbol:   method getString(String)
    [javac]   location: variable config of type CommandLineConfig
    [javac] 3 errors
    [javac] 100 warnings

BUILD FAILED
/SimFix/sbfl/projects/closure/closure_83_buggy/build.xml:186: Compile failed; see the compiler error output for details.

Total time: 11 seconds
Cannot export property cp.test at /SimFix/sbfl/defects4j/framework/bin/d4j/d4j-export line 112.
Compilation failed in require at /SimFix/sbfl/defects4j//framework/bin/defects4j line 195.
^C
apiarty> cd /SimFix/sbfl/spectra/
apiarty> ls
Chart  Closure	Lang  Math  closure  lang  math
apiarty> cd closure/
apiarty> ls
104  83
apiarty> cd 83
apiarty> ls
log.txt
apiarty> cd ..
apiarty> ls
104  83
apiarty> cd ..
apiarty> ls
Chart  Closure	Lang  Math  closure  lang  math
apiarty> cd Lang
apiarty> ls
47
apiarty> cd 47
apiarty> ls
log.txt  matrix  spectra
apiarty> cd ..
apiarty> ls
47
apiarty> cd ..
apiarty> ls
Chart  Closure	Lang  Math  closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104
/SimFix/sbfl/projects/
=================================================
Project : closure_104	start : 21/01/04 21:56

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : Type and JSType
Field type inconsistancy 'THIS' with types : Token and int
^C
real	0m27.875s
user	0m9.882s
sys	0m2.014s
apiarty> time java -jar /SimFix/final/simfix.jar --proj_home=/SimFix/sbfl/projects/ --proj_name=closure --bug_id=104 > /apiarty/findings/closure_104_simfix_new.txt
Cannot get suspicious statement for non-existing file : /SimFix/sbfl/ochiai/closure/104/stmt-susps.txt
^C
real	1m42.204s
user	0m49.433s
sys	0m11.976s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... FAIL
Executed command:  cd /SimFix/sbfl/projects/closure/closure_104_buggy && /SimFix/sbfl/defects4j/major/bin/ant -f /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/SimFix/sbfl/defects4j -Dd4j.dir.projects=/SimFix/sbfl/defects4j/framework/projects -Dbasedir=/SimFix/sbfl/projects/closure/closure_104_buggy -Dbuild.compiler=javac1.7 -Dfile.export=/SimFix/sbfl/projects/closure/closure_104_buggy/.export.cp.test export.cp.test 2>&1
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Buildfile: /SimFix/sbfl/defects4j/framework/projects/defects4j.build.xml

sanity.check:

compile:
    [javac] /SimFix/sbfl/projects/closure/closure_104_buggy/build.xml:52: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] /SimFix/sbfl/projects/closure/closure_104_buggy/build.xml:57: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] Compiling 231 source files to /SimFix/sbfl/projects/closure/closure_104_buggy/build/classes
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/Charset.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collections.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Cloneable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Enum.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Arrays.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/IdentityHashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedHashMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedHashSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map$Entry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Logger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/CRC32.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Comparator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Iterator.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/BitSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collection.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/HashSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/TreeSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Void.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayDeque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Deque.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Stack.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Iterable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/LinkedList.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/CharsetEncoder.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Appendable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipEntry.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/zip/ZipInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/PriorityQueue.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/ParseException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectInputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/ObjectOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassNotFoundException.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Readable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Locale.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Random.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/text/MessageFormat.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/SortedMap.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/InputStreamReader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/AbstractSet.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ResourceBundle.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Hashtable.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ThreadLocal.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/beans/PropertyChangeListener.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/math/BigInteger.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Reader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/reflect/Method.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/ClassLoader.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/ElementType.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/File.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/FileOutputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/nio/charset/Charset.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/ArrayList.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Collections.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/List.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Map.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/logging/Level.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Cloneable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] warning: /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class): major version 52 is newer than 51, the highest major version supported by this compiler.
    [javac]   It is recommended that the compiler be upgraded.
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /usr/lib/jvm/java-8-openjdk-amd64/lib/ct.sym(META-INF/sym/rt.jar/java/util/Set.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'
    [javac] /SimFix/sbfl/projects/closure/closure_104_buggy/src/com/google/javascript/rhino/jstype/UnionType.java:288: error: cannot find symbol
    [javac] if(alternate.isSubtype(this)){
    [javac]    ^
    [javac]   symbol:   variable alternate
    [javac]   location: class UnionType
    [javac] 1 error
    [javac] 100 warnings

BUILD FAILED
/SimFix/sbfl/projects/closure/closure_104_buggy/build.xml:57: Compile failed; see the compiler error output for details.

Total time: 13 seconds
Cannot export property cp.test at /SimFix/sbfl/defects4j/framework/bin/d4j/d4j-export line 112.
Compilation failed in require at /SimFix/sbfl/defects4j//framework/bin/defects4j line 195.
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> cd closure/
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd closure_104_buggy/
apiarty> ls
COPYING  all_tests  build.xml  defects4j.build.properties  failing_tests  javadoc  src	    test      test_purify
README	 build	    contrib    externs			   gen		  lib	   src_ori  test_ori  tools
apiarty> cd ../..
apiarty> ls
closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
closure  lang  math
apiarty> mkdir chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
chart  closure	lang  math
apiarty> cd closure/
apiarty> ls
closure_104_buggy  closure_2_buggy  closure_83_buggy
apiarty> cd ..
apiarty> ls
chart  closure	lang  math
apiarty> cd chart
apiarty> chart_25_buggy
bash: chart_25_buggy: command not found
apiarty> mkdir chart_25_buggy
apiarty> cd chart_25_buggy/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 25b -w .
Checking out 164 to /SimFix/sbfl/projects/chart/chart_25_buggy............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  failing_tests  licence-LGPL.txt		    source  tests
NEWS	   all_tests   build  checkstyle   experimental		       lib	      maven-jfreechart-project.xml  swt
apiarty> cd ../..
apiarty> ls
chart  closure	lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/25/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ^C
apiarty> cd chart_25_buggy^C
apiarty> cd /SimFix/sbfl/spectra/Chart/25/spectra
bash: cd: /SimFix/sbfl/spectra/Chart/25/spectra: No such file or directory
apiarty> cd /SimFix/sbfl/spectra/Chart/25/spectra
bash: cd: /SimFix/sbfl/spectra/Chart/25/spectra: No such file or directory
apiarty> cd /SimFix/sbfl/spectra/Chart/25/
apiarty> ls
log.txt
apiarty> vi log.txt 
apiarty> cd ..
apiarty> ls
25  83
apiarty> cd ..
apiarty> ls
Chart  Closure	Lang  Math  closure  lang  math
apiarty> cd Chart/
apiarty> ls
25  83
apiarty> cd 25
apiarty> ls
log.txt
apiarty> ls
log.txt
apiarty> cd ..
apiarty> ls
25  83
apiarty> cd ..
apiarty> ls
Chart  Closure	Lang  Math  closure  lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 25 projects/Chart/chart_25_buggy/
/SimFix/sbfl/gzoltar/run_gzoltar.sh: line 130: cd: projects/Chart/chart_25_buggy/: No such file or directory
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
^C
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./setup.sh 
Adding environment variables to bashrc...
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /SimFix/sbfl/killmap/build.xml

init:

compile:
    [javac] Compiling 18 source files to /SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 57 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> pwd
/SimFix/sbfl
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/25/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects
apiarty> ls
chart  closure	lang  math
apiarty> cd chart
apiarty> ls
chart_25_buggy
apiarty> mkdir mkdir chart_1_buggy
apiarty> cd chart_1_buggy/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 1b -w .
Checking out 2266 to /SimFix/sbfl/projects/chart/chart_1_buggy............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2266:2264............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-1b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  experimental   lib		maven-jfreechart-project.xml  swt
NEWS	   all_tests   build  checkstyle   docfiles		       failing_tests  licence-LGPL.txt	source			      tests
apiarty> cd ..
apiarty> ls
chart_1_buggy  chart_25_buggy  mkdir
apiarty> cd ..
apiarty> ls
chart  closure	lang  math
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 1 projects/chart/chart_1_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/1/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/1/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd ..
apiarty> ls
SimFix	apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> mv SimFix SimFix_2
apiarty> ls
SimFix_2  apiarty  avatar  bin	boot  dev  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 1.55 MiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix	SimFix_2  apiarty  avatar  bin	boot  dev  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
apiarty> cd SimFix
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cp -r d4j-info/ sbfl/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  aws  cluster_scripts  d4j-info  d4j_integration  data.zip	docker	gzoltar  killmap  lib  sbfl.sh	setup.sh  stats  utils
apiarty> mkdir projects
apiarty> ls
README.md  aws		    d4j-info	     data.zip  gzoltar	lib	  sbfl.sh   stats
analysis   cluster_scripts  d4j_integration  docker    killmap	projects  setup.sh  utils
apiarty> cd projects/
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j-info	     data.zip  gzoltar	lib	  sbfl.sh   stats
analysis   cluster_scripts  d4j_integration  docker    killmap	projects  setup.sh  utils
apiarty> vi sbfl.sh 
apiarty> vi setup.sh 
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd ..
apiarty> ls
SimFix	SimFix_2  apiarty  avatar  bin	boot  dev  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
apiarty> cd SimFix_2
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> vi setup.sh 
apiarty> cd ../..
apiarty> ls
SimFix	SimFix_2  apiarty  avatar  bin	boot  dev  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
apiarty> cd SimFix
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    d4j-info	     data.zip  gzoltar	lib	  sbfl.sh   stats
analysis   cluster_scripts  d4j_integration  docker    killmap	projects  setup.sh  utils
apiarty> vi setup.sh 
apiarty> pwd
/SimFix/sbfl
apiarty> ls
README.md  aws		    d4j-info	     data.zip  gzoltar	lib	  sbfl.sh   stats
analysis   cluster_scripts  d4j_integration  docker    killmap	projects  setup.sh  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 57, done.
remote: Counting objects: 100% (57/57), done.
remote: Compressing objects: 100% (35/35), done.
remote: Total 22451 (delta 27), reused 31 (delta 18), pack-reused 22394
Receiving objects: 100% (22451/22451), 140.38 MiB | 1.57 MiB/s, done.
Resolving deltas: 100% (14430/14430), done.
Checking connectivity... done.
Checking out files: 100% (10654/10654), done.
apiarty> ls
README.md  aws		    d4j-info	     data.zip	docker	 killmap  projects  setup.sh  utils
analysis   cluster_scripts  d4j_integration  defects4j	gzoltar  lib	  sbfl.sh   stats
apiarty> cd defects4j/
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cpanm --installdeps .
--> Working on .
Configuring /SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0  1279k      0  0:05:35  0:05:35 --:--:-- 1292k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j-info	     data.zip	docker	 killmap  projects  setup.sh  utils
analysis   cluster_scripts  d4j_integration  defects4j	gzoltar  lib	  sbfl.sh   stats
apiarty> ./setup.sh 
Adding environment variables to bashrc...
2021-01-08 08:58:32 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 8 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> ls
README.md  aws		    d4j-info	     data.zip	docker	 killmap  projects  setup.sh  utils
analysis   cluster_scripts  d4j_integration  defects4j	gzoltar  lib	  sbfl.sh   stats
apiarty> defects4j
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
README.md  aws		    d4j-info	     data.zip	docker	 killmap  projects  setup.sh  utils
analysis   cluster_scripts  d4j_integration  defects4j	gzoltar  lib	  sbfl.sh   stats
apiarty> cd projects/
apiarty> ls
apiarty> unzip data.zip
unzip:  cannot find or open data.zip, data.zip.zip or data.zip.ZIP.
apiarty> ls
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j-info	     data.zip	docker	 killmap  projects  setup.sh  utils
analysis   cluster_scripts  d4j_integration  defects4j	gzoltar  lib	  sbfl.sh   stats
apiarty> unzip data.zip
Archive:  data.zip
   creating: data/
  inflating: data/.DS_Store          
   creating: __MACOSX/
   creating: __MACOSX/data/
  inflating: __MACOSX/data/._.DS_Store  
  inflating: data/blacklist.csv      
   creating: data/data_massaging/
  inflating: data/data_massaging/amend-scores  
  inflating: data/data_massaging/clean_up_scores.pl  
  inflating: data/data_massaging/get_all_real.pl  
  inflating: data/data_massaging/README.md  
  inflating: data/data_massaging/split_scores_by_category.sh  
  inflating: data/num_tests.csv      
  inflating: data/num_tests.sh       
  inflating: data/README.md          
  inflating: data/sbfl_runtimes.csv  
  inflating: data/scores_artificial_vs_real.csv  
  inflating: data/scores_for_muse_with_each_killdefn.csv  
  inflating: data/scores_real_exploration.csv  
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  projects  setup.sh	utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    sbfl.sh   stats
apiarty> cd projects/
apiarty> defects4j checkout -p Chart -v 4b -w /SimFix/sbfl/projects/chart/chart_4_buggy
Use of uninitialized value $work_dir in concatenation (.) or string at /avatar/AVATAR/D4J/defects4j/framework/core/Project.pm line 386.
Use of uninitialized value $work_dir in -d at /avatar/AVATAR/D4J/defects4j/framework/core/Vcs.pm line 265.
Failed to create working directory: No such file or directory at /avatar/AVATAR/D4J/defects4j/framework/core/Vcs.pm line 294.
	Vcs::checkout_vid(Vcs::Svn=HASH(0x15f3a78), "4f", undef) called at /avatar/AVATAR/D4J/defects4j/framework/core/Project.pm line 412
	Project::checkout_vid(Project::Chart=HASH(0x154e4e8), "4b") called at /avatar/AVATAR/D4J/defects4j/framework/bin/d4j/d4j-checkout line 96
	require /avatar/AVATAR/D4J/defects4j/framework/bin/d4j/d4j-checkout called at /avatar/AVATAR/D4J/defects4j/framework/bin/defects4j line 195
Compilation failed in require at /avatar/AVATAR/D4J/defects4j/framework/bin/defects4j line 195.
apiarty> ls
apiarty> pwd
/SimFix/sbfl/projects
apiarty> mkdir chart
apiarty> cd chart
apiarty> mkdir chart_4_buggy
apiarty> ls
chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  projects  setup.sh	utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    sbfl.sh   stats
apiarty> defects4j checkout -p Chart -v 4b -w /SimFix/sbfl/projects/chart/chart_4_buggy
Checking out 2183 to /SimFix/sbfl/projects/chart/chart_4_buggy............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2183:2182............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-4b........................................ OK
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  projects  setup.sh	utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    sbfl.sh   stats
apiarty> cd projects/chart/chart_4_buggy/
apiarty> ls
ChangeLog  README.txt  checkstyle		   docfiles	 lib		   maven-jfreechart-project.xml  swt
NEWS	   ant	       defects4j.build.properties  experimental  licence-LGPL.txt  source			 tests
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins
  - org.jfree.chart.junit.JFreeChartTests::testSerialization4
  - org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo
  - org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset
  - org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepChartTests::testReplaceDataset
  - org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  experimental   lib		maven-jfreechart-project.xml  swt
NEWS	   all_tests   build  checkstyle   docfiles		       failing_tests  licence-LGPL.txt	source			      tests
apiarty> cd ..
apiarty> ls
chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  projects  setup.sh	utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    sbfl.sh   stats
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> java -jar /SimFix/final/simfix.jar --project_home=/SimFix/sbfl/projects/ --project_name=chart^C
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  projects  setup.sh	utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    sbfl.sh   stats
apiarty> ./sbfl.sh Chart 4 projects/chart/chart_4_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/4/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/4/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  ochiai    sbfl.sh	spectra  utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    projects  setup.sh	stats
apiarty> cd spectra
apiarty> ls
Chart
apiarty> cd Chart
apiarty> ls
4
apiarty> cd 4
apiarty> ls
log.txt
apiarty> cd ..
apiarty> ls
4
apiarty> cd ..
apiarty> ls
Chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  ochiai    sbfl.sh	spectra  utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    projects  setup.sh	stats
apiarty> vi setup.sh 
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
chart_4_buggy
apiarty> mkdir chart_1_buggy
apiarty> ls
chart_1_buggy  chart_4_buggy
apiarty> cd chart_1_buggy/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 1b -w /SimFix/sbfl/projects/chart/chart_1_buggy
Checking out 2266 to /SimFix/sbfl/projects/chart/chart_1_buggy............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2266:2264............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-1b........................................ OK
apiarty> ls
ChangeLog  README.txt  checkstyle		   docfiles	 lib		   maven-jfreechart-project.xml  swt
NEWS	   ant	       defects4j.build.properties  experimental  licence-LGPL.txt  source			 tests
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
apiarty> cd ..
apiarty> ls
chart_1_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  ochiai    sbfl.sh	spectra  utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    projects  setup.sh	stats
apiarty> ./sbfl.sh Chart 1 projects/chart/chart_1_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/1/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/1/spectra'
apiarty> ./sbfl.sh chart 1 projects/chart/chart_1_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/chart/1/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/chart/1/spectra'
apiarty> echo $D4J_HOME
/SimFix/sbfl/defects4j/
apiarty> vi ~/.bashrc
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> sh sbfl/sbfl.sh Chart 1 sbfl/projects/chart/chart_1_buggy/
sbfl/sbfl.sh: 24: sbfl/sbfl.sh: /SimFix/gzoltar/run_gzoltar.sh: not found
sbfl/sbfl.sh: 27: sbfl/sbfl.sh: /SimFix/analysis/pipeline-scripts/previously-studied-flts/sbfl.sh: not found
apiarty> sh /sbfl/sbfl.sh Chart 1 sbfl/projects/chart/chart_1_buggy/
sh: 0: Can't open /sbfl/sbfl.sh
apiarty> sh /SimFix/sbfl/sbfl.sh Chart 1 sbfl/projects/chart/chart_1_buggy/
/SimFix/sbfl/sbfl.sh: 24: /SimFix/sbfl/sbfl.sh: /SimFix/gzoltar/run_gzoltar.sh: not found
/SimFix/sbfl/sbfl.sh: 27: /SimFix/sbfl/sbfl.sh: /SimFix/analysis/pipeline-scripts/previously-studied-flts/sbfl.sh: not found
apiarty> ./SimFix/sbfl/sbfl.sh Chart 1 sbfl/projects/chart/chart_1_buggy/
bash: ./SimFix/sbfl/sbfl.sh: No such file or directory
apiarty> ./sbfl/sbfl.sh Chart 1 sbfl/projects/chart/chart_1_buggy/
./sbfl/sbfl.sh: line 24: /SimFix/gzoltar/run_gzoltar.sh: No such file or directory
./sbfl/sbfl.sh: line 27: /SimFix/analysis/pipeline-scripts/previously-studied-flts/sbfl.sh: No such file or directory
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ./sbfl 
bash: ./sbfl: No such file or directory
apiarty> cd sbfl
bash: cd: sbfl: No such file or directory
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  ochiai    sbfl.sh	spectra  utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    projects  setup.sh	stats
apiarty> ./sbfl.sh Chart 1 projects/chart/chart_1_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /SimFix/sbfl/spectra/Chart/1/matrix file!
Traceback (most recent call last):
  File "/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/SimFix/sbfl/spectra/Chart/1/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  d4j_integration  data.zip   docker   killmap  ochiai    sbfl.sh	spectra  utils
__MACOSX   aws	     d4j-info	      data	       defects4j  gzoltar  lib	    projects  setup.sh	stats
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> ks
bash: ks: command not found
apiarty> cd ..
apiarty> ls
SimFix	SimFix_2  apiarty  avatar  bin	boot  dev  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
apiarty> rm -r SimFix
apiarty> rm -r SimFix_2/
apiarty> rm -r avatar/
apiarty> ls
apiarty  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> ls
apiarty  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> mkdir simfix
apiarty> ls
apiarty  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	simfix	srv  sys  tmp  usr  var
apiarty> cd simfix/
apiarty> https://github.com/xgdsmileboy/SimFix.git
bash: https://github.com/xgdsmileboy/SimFix.git: No such file or directory
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 1.47 MiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ks
bash: ks: command not found
apiarty> ls
README.md  analysis  aws  cluster_scripts  d4j_integration  data.zip  docker  gzoltar  killmap	lib  sbfl.sh  setup.sh	stats  utils
apiarty> unzip data.zip 
Archive:  data.zip
   creating: data/
  inflating: data/.DS_Store          
   creating: __MACOSX/
   creating: __MACOSX/data/
  inflating: __MACOSX/data/._.DS_Store  
  inflating: data/blacklist.csv      
   creating: data/data_massaging/
  inflating: data/data_massaging/amend-scores  
  inflating: data/data_massaging/clean_up_scores.pl  
  inflating: data/data_massaging/get_all_real.pl  
  inflating: data/data_massaging/README.md  
  inflating: data/data_massaging/split_scores_by_category.sh  
  inflating: data/num_tests.csv      
  inflating: data/num_tests.sh       
  inflating: data/README.md          
  inflating: data/sbfl_runtimes.csv  
  inflating: data/scores_artificial_vs_real.csv  
  inflating: data/scores_for_muse_with_each_killdefn.csv  
  inflating: data/scores_real_exploration.csv  
apiarty> ls
README.md  __MACOSX  analysis  aws  cluster_scripts  d4j_integration  data  data.zip  docker  gzoltar  killmap	lib  sbfl.sh  setup.sh	stats  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 57, done.
remote: Counting objects: 100% (57/57), done.
remote: Compressing objects: 100% (35/35), done.
remote: Total 22451 (delta 27), reused 31 (delta 18), pack-reused 22394
Receiving objects: 100% (22451/22451), 140.38 MiB | 702.00 KiB/s, done.
Resolving deltas: 100% (14430/14430), done.
Checking connectivity... done.
Checking out files: 100% (10654/10654), done.
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd data
apiarty> ls
README.md      data_massaging  num_tests.sh	  scores_artificial_vs_real.csv		  scores_real_exploration.csv
blacklist.csv  num_tests.csv   sbfl_runtimes.csv  scores_for_muse_with_each_killdefn.csv
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> cd defects4j/
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cpanm --installdeps .
--> Working on .
Configuring /simfix/SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0  1433k      0  0:04:59  0:04:59 --:--:-- 1532k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> vi setup.sh 
apiarty> ./setup.sh 
Adding environment variables to bashrc...
2021-01-08 11:23:27 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/simfix/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /simfix/SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /simfix/SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /simfix/SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /simfix/SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 5 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> defects4j
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> mkdir
mkdir: missing operand
Try 'mkdir --help' for more information.
apiarty> mkdir projects
apiarty> cd projects/
apiarty> mkdir chart
apiarty> cd chart
apiarty> mkdir chart_1_buggy
apiarty> cd chart_1_buggy/
apiarty> ls
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_1_buggy
apiarty> ls
apiarty> cd ..
apiarty> ls
chart_1_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> defects4j checkout -p Chart -v 1b -w /simfix/SimFix/sbfl/projects/chart/chart_1_buggy
Checking out 2266 to /simfix/SimFix/sbfl/projects/chart/chart_1_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2266:2264............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-1b........................................ OK
apiarty> defects4j compile
Cannot open config file (/simfix/SimFix/sbfl/.defects4j.config): No such file or directory
/simfix/SimFix/sbfl is not a valid working directory!
apiarty> cd /simfix/SimFix/sbfl/projects/chart/chart_1_buggy
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  experimental   lib		maven-jfreechart-project.xml  swt
NEWS	   all_tests   build  checkstyle   docfiles		       failing_tests  licence-LGPL.txt	source			      tests
apiarty> cd ..
apiarty> ls
chart_1_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> ./sbfl.sh Chart 1 projects/chart/chart_1_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart/
apiarty> ls
chart_1_buggy
apiarty> mkdir chart_4_buggy
apiarty> ls
chart_1_buggy  chart_4_buggy
apiarty> cd chart_4_buggy/
apiarty> defects4j checkout -p Chart -v 4b -w .
Checking out 2183 to /simfix/SimFix/sbfl/projects/chart/chart_4_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2183:2182............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-4b........................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 22
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1
  - org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2
  - org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins
  - org.jfree.chart.junit.JFreeChartTests::testSerialization4
  - org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo
  - org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset
  - org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset
  - org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo
  - org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator
  - org.jfree.chart.junit.XYStepChartTests::testReplaceDataset
  - org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  experimental   lib		maven-jfreechart-project.xml  swt
NEWS	   all_tests   build  checkstyle   docfiles		       failing_tests  licence-LGPL.txt	source			      tests
apiarty> cd ..
apiarty> ls
chart_1_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sblf
bash: cd: sblf: No such file or directory
apiarty> cd sblf
bash: cd: sblf: No such file or directory
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 4 projects/chart/chart_4_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=4 > /apiarty/findings/chart_4_simfix_new.txt

real	302m36.993s
user	212m31.305s
sys	66m17.191s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
chart_1_buggy  chart_4_buggy
apiarty> mkdir chart_11_buggy
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_4_buggy
apiarty> cd chart_11_buggy/
apiarty> ls
apiarty> pwd
/simfix/SimFix/sbfl/projects/chart/chart_11_buggy
apiarty> defects4j checkout -p Chart -v 11b -w .
Checking out 1025 to /simfix/SimFix/sbfl/projects/chart/chart_11_buggy..... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1025:1024............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-11b....................................... OK
apiarty> ls
ChangeLog  README.txt  checkstyle		   experimental  licence-LGPL.txt	       source  tests
NEWS	   ant	       defects4j.build.properties  lib		 maven-jfreechart-project.xml  swt
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 11 projects/chart/chart_11_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=11 > /apiarty/findings/chart_11_simfix_new.txt

real	301m58.083s
user	210m2.092s
sys	63m8.124s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd project.xml 
bash: cd: project.xml: Not a directory
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_4_buggy
apiarty> mkdir chart_25_buggy
apiarty> cd chart_25_buggy/
apiarty> ls
apiarty> defects4j checkout -p Chart -v 25b -w .
Checking out 164 to /simfix/SimFix/sbfl/projects/chart/chart_25_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> ls
ChangeLog   all_tests  build-tests		   experimental   licence-LGPL.txt		swt
NEWS	    ant        checkstyle		   failing_tests  maven-jfreechart-project.xml	tests
README.txt  build      defects4j.build.properties  lib		  source
apiarty> cd ..
apiarty> ls
chart_11_buggy	chart_1_buggy  chart_25_buggy  chart_4_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25 > /apiarty/findings/chart_25_simfix_new.txt
Cannot get suspicious statement for non-existing file : /simfix/SimFix/sbfl/ochiai/chart/25/stmt-susps.txt

real	80m31.192s
user	48m22.622s
sys	14m39.334s
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
chart
apiarty> mkdir closure
apiarty> cd closure/
apiarty> ls
apiarty> mkdir closure_83_buggy
apiarty> cd closure_83_buggy/
apiarty> ls
apiarty> defects4j checkout -p Closure -v 83b -w .
Checking out 43c245f0 to /simfix/SimFix/sbfl/projects/closure/closure_83_bu OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 43c245f0:840ddca5..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-83b..................................... OK
apiarty> ls
CONTRIBUTORS  build.xml		    defects4j.build.properties	javadoc  test
COPYING       closure-compiler.pom  externs			lib	 tools
README	      contrib		    gen				src
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag2
apiarty> cd ..
apiarty> ls
closure_83_buggy
apiarty> cd ..
apiarty> ls
chart  closure
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
(failed reverse-i-search)`defects4j che./s': ^Cfects4j checkout -p Chart -v 25b -w .
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/83/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/83/spectra'
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/83/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/83/spectra'
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd projects/
apiarty> ls
chart  closure
apiarty> cd closure/
apiarty> ls
closure_83_buggy
apiarty> mkdir closure_104_buggy
apiarty> cd closure_104_buggy/
apiarty> defects4j checkout -p Closure -v 104b -w .
Checking out 67289ae4 to /simfix/SimFix/sbfl/projects/closure/closure_104_b OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 67289ae4:1be1c263..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-104b.................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.rhino.jstype.UnionTypeTest::testGreatestSubtypeUnionTypes5
apiarty> ls
COPYING    build      defects4j.build.properties  gen	   src
README	   build.xml  externs			  javadoc  test
all_tests  contrib    failing_tests		  lib	   tools
apiarty> cd ..
apiarty> ls
closure_104_buggy  closure_83_buggy
apiarty> cd ..
apiarty> ls
chart  closure
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/104/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/104/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> ./sbfl.sh Closure 83 projects/closure/closure_83_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/83/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/83/spectra'
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> cd ..
apiarty> ls
LICENSE      README.md	doc    lib  patch	 res   src   testfile
README.html  d4j-info	final  log  project.xml  sbfl  test
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25 > /apiarty/findings/chart_25_simfix_new.txt
Cannot get suspicious statement for non-existing file : /simfix/SimFix/sbfl/ochiai/chart/25/stmt-susps.txt

real	4m23.105s
user	3m7.741s
sys	0m47.965s
apiarty> cd /simfix/SimFix/sbfl/ochiai/chart/25/
apiarty> ls
apiarty> cd ..
apiarty> ls
11  25	4
apiarty> cd 11
apiarty> ls
stmt-susps.txt
apiarty> cd ..
apiarty> ls
11  25	4
apiarty> cd 25
apiarty> ls
apiarty> cd ..
apiarty> ls
11  25	4
apiarty> cd ..
apiarty> ls
Chart  Closure	chart
apiarty> cd ..
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
(reverse-i-search)`sb': cd /simfix/SimFix/^Cfl/ochiai/chart/25/
apiarty> ./sbfl.sh Closure 104 projects/closure/closure_104_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Closure/104/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Closure/104/spectra'
apiarty> ls
README.md  aws		    data       docker	lib	  sbfl.sh   stats
__MACOSX   cluster_scripts  data.zip   gzoltar	ochiai	  setup.sh  utils
analysis   d4j_integration  defects4j  killmap	projects  spectra
apiarty> ERRO[3462687] error waiting for container: invalid character 'u' looking for beginning of value 
marias-mbp-2:APIARTy marki$ docker build -t apiarty .
Sending build context to Docker daemon  1.963GB
Step 1/13 : FROM ubuntu:16.04
 ---> 77be327e4b63
Step 2/13 : ENV DEBIAN_FRONTEND noninteractive
 ---> Using cache
 ---> 03fea2fc7f1d
Step 3/13 : ENV LANG=C.UTF-8
 ---> Using cache
 ---> 3dcc4fe720a0
Step 4/13 : ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
 ---> Using cache
 ---> b0cd41f2148b
Step 5/13 : RUN apt-get update     && apt-get install -y openjdk-8-jdk ant unzip wget curl cpanminus git graphviz maven subversion python vim     && apt-get install -y python3-pip python3-dev     && cd /usr/local/bin     && ln -s /usr/bin/python3 python3     && pip3 install --upgrade pip
 ---> Using cache
 ---> 794df675baf1
Step 6/13 : RUN mkdir -p /apiarty/tools
 ---> Using cache
 ---> e9a111bc9a16
Step 7/13 : WORKDIR /apiarty
 ---> Using cache
 ---> a50d17b27891
Step 8/13 : ENV PATH=/apiarty/apiarty.bin:${PATH}
 ---> Using cache
 ---> 36f8b281f5df
Step 9/13 : RUN     rm /root/.bashrc     && ln -s /apiarty/apiarty.bin/bashrc /root/.bashrc
 ---> Using cache
 ---> 2aac95309e9f
Step 10/13 : WORKDIR /avatar
 ---> Using cache
 ---> 3b150b322ba5
Step 11/13 : WORKDIR /apiarty
 ---> Using cache
 ---> 5acffd3eabe5
Step 12/13 : COPY . .
 ---> 4862b51e7a2c
Step 13/13 : CMD ["bash"]
 ---> Running in 627eb3353614
Removing intermediate container 627eb3353614
 ---> 0377d8ad6107
Successfully built 0377d8ad6107
Successfully tagged apiarty:latest
marias-mbp-2:APIARTy marki$ docker run -it -v /Users/marki/Desktop/APIARTy/findings/:/apiarty/findings -v /Users/marki/Desktop/APIARTy/data/:/apiarty/data --rm apiarty
Welcome to APIARTy.

apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  tools
(failed reverse-i-search)`./': ^C
apiarty> cd /apiarty/
apiarty> ./apiarty ALL LOG4J2-813
INFO     --- Tool NPEFix runs on bug LOG4J2-813 ---
INFO     fetching LOG4J2-813
INFO     compiling LOG4J2-813
INFO     testing LOG4J2-813
INFO     reusing test classes in /apiarty/data/LOG4J2-813/logging-log4j2/log4j-api/target/test-classes
INFO     computing classpath for LOG4J2-813
INFO     running NPEFix on LOG4J2-813
WARNING  repair returned non-zero code
INFO     execution time of running NPEFix on LOG4J2-813 is 0:00:00 on January 12, 2021
INFO     result of running NPEFix on LOG4J2-813 is RepairStatus.UNKNOWN
INFO     --- Tool Astor-jgenprog runs on bug LOG4J2-813 ---
INFO     fetching LOG4J2-813
INFO     reusing files in /apiarty/data/LOG4J2-813/logging-log4j2
INFO     compiling LOG4J2-813
INFO     reusing src classes in /apiarty/data/LOG4J2-813/logging-log4j2/log4j-api/target/classes
INFO     testing LOG4J2-813
INFO     reusing test classes in /apiarty/data/LOG4J2-813/logging-log4j2/log4j-api/target/test-classes
INFO     computing classpath for LOG4J2-813
INFO     running Astor-jgenprog on LOG4J2-813
Project folder: /apiarty/data/LOG4J2-813/logging-log4j2/log4j-api
Traceback (most recent call last):
  File "./apiarty", line 593, in <module>
    repair(tool, project)
  File "./apiarty", line 440, in repair
    result = tool.run(project, output_dir)
  File "./apiarty", line 271, in run
    with cd(ASTOR_ROOT):
  File "./apiarty", line 52, in __enter__
    os.chdir(self.newPath)
FileNotFoundError: [Errno 2] No such file or directory: '/astor'
apiarty> exit
exit
(reverse-i-search)`bi': cd defects4j/framework/bin
marias-mbp-2:APIARTy marki$ docker build -t apiarty .
marias-mbp-2:APIARTy marki$ docker build -t apiarty .
^Cmarias-mbp-2:APIARTy marki$ docker build -t apiarty .
Sending build context to Docker daemon  1.963GB
Step 1/13 : FROM ubuntu:16.04
 ---> 77be327e4b63
Step 2/13 : ENV DEBIAN_FRONTEND noninteractive
 ---> Using cache
 ---> 03fea2fc7f1d
Step 3/13 : ENV LANG=C.UTF-8
 ---> Using cache
 ---> 3dcc4fe720a0
Step 4/13 : ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
 ---> Using cache
 ---> b0cd41f2148b
Step 5/13 : RUN apt-get update     && apt-get install -y openjdk-8-jdk ant unzip wget curl cpanminus git graphviz maven subversion python vim     && apt-get install -y python3-pip python3-dev     && cd /usr/local/bin     && ln -s /usr/bin/python3 python3     && pip3 install --upgrade pip
 ---> Using cache
 ---> 794df675baf1
Step 6/13 : RUN mkdir -p /apiarty/tools
 ---> Using cache
 ---> e9a111bc9a16
Step 7/13 : WORKDIR /apiarty
 ---> Using cache
 ---> a50d17b27891
Step 8/13 : ENV PATH=/apiarty/apiarty.bin:${PATH}
 ---> Using cache
 ---> 36f8b281f5df
Step 9/13 : RUN     rm /root/.bashrc     && ln -s /apiarty/apiarty.bin/bashrc /root/.bashrc
 ---> Using cache
 ---> 2aac95309e9f
Step 10/13 : WORKDIR /avatar
 ---> Using cache
 ---> 3b150b322ba5
Step 11/13 : WORKDIR /apiarty
 ---> Using cache
 ---> 5acffd3eabe5
Step 12/13 : COPY . .
 ---> c18894e6a2b4
Step 13/13 : CMD ["bash"]
 ---> Running in bd88fdb0db94
Removing intermediate container bd88fdb0db94
 ---> 0a99dd7c3aab
Successfully built 0a99dd7c3aab
Successfully tagged apiarty:latest
marias-mbp-2:APIARTy marki$ docker run -it -v /Users/marki/Desktop/APIARTy/findings/:/apiarty/findings -v /Users/marki/Desktop/APIARTy/data/:/apiarty/data --rm apiarty
Welcome to APIARTy.

apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  tools
apiarty> mkdir simfix
apiarty> cd simfix
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 1.15 MiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE      README.md	doc    lib	    res   src	testfile
README.html  d4j-info	final  project.xml  sbfl  test
apiarty> cd sbfl
apiarty> ls
README.md  aws		    d4j_integration  docker   killmap  sbfl.sh	 stats
analysis   cluster_scripts  data.zip	     gzoltar  lib      setup.sh  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 22451, done.
remote: Total 22451 (delta 0), reused 0 (delta 0), pack-reused 22451
Receiving objects: 100% (22451/22451), 140.40 MiB | 1.54 MiB/s, done.
Resolving deltas: 100% (14430/14430), done.
Checking connectivity... done.
Checking out files: 100% (10654/10654), done.
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> cd defects4j/
apiarty> cpanm --installdeps .
--> Working on .
Configuring /apiarty/simfix/SimFix/sbfl/defects4j ... OK
==> Found dependencies: URI, JSON::Parse, DBI, DBD::CSV, JSON
--> Working on URI
Fetching http://www.cpan.org/authors/id/O/OA/OALDERS/URI-5.06.tar.gz ... OK
Configuring URI-5.06 ... OK
==> Found dependencies: Test::Needs
--> Working on Test::Needs
Fetching http://www.cpan.org/authors/id/H/HA/HAARG/Test-Needs-0.002006.tar.gz ... OK
Configuring Test-Needs-0.002006 ... OK
Building and testing Test-Needs-0.002006 ... OK
Successfully installed Test-Needs-0.002006
Building and testing URI-5.06 ... OK
Successfully installed URI-5.06 (upgraded from 1.71)
--> Working on JSON::Parse
Fetching http://www.cpan.org/authors/id/B/BK/BKB/JSON-Parse-0.59.tar.gz ... OK
Configuring JSON-Parse-0.59 ... OK
Building and testing JSON-Parse-0.59 ... OK
Successfully installed JSON-Parse-0.59
--> Working on DBI
Fetching http://www.cpan.org/authors/id/T/TI/TIMB/DBI-1.643.tar.gz ... OK
Configuring DBI-1.643 ... OK
Building and testing DBI-1.643 ... OK
Successfully installed DBI-1.643
--> Working on DBD::CSV
Fetching http://www.cpan.org/authors/id/H/HM/HMBRAND/DBD-CSV-0.57.tgz ... OK
Configuring DBD-CSV-0.57 ... OK
==> Found dependencies: SQL::Statement, Text::CSV_XS
--> Working on SQL::Statement
Fetching http://www.cpan.org/authors/id/R/RE/REHSACK/SQL-Statement-1.414.tar.gz ... OK
Configuring SQL-Statement-1.414 ... OK
==> Found dependencies: Math::Base::Convert, Clone, Text::Soundex, Test::Deep
--> Working on Math::Base::Convert
Fetching http://www.cpan.org/authors/id/M/MI/MIKER/Math-Base-Convert-0.11.tar.gz ... OK
Configuring Math-Base-Convert-0.11 ... OK
Building and testing Math-Base-Convert-0.11 ... OK
Successfully installed Math-Base-Convert-0.11
--> Working on Clone
Fetching http://www.cpan.org/authors/id/A/AT/ATOOMIC/Clone-0.45.tar.gz ... OK
Configuring Clone-0.45 ... OK
==> Found dependencies: B::COW
--> Working on B::COW
Fetching http://www.cpan.org/authors/id/A/AT/ATOOMIC/B-COW-0.004.tar.gz ... OK
Configuring B-COW-0.004 ... OK
Building and testing B-COW-0.004 ... OK
Successfully installed B-COW-0.004
Building and testing Clone-0.45 ... OK
Successfully installed Clone-0.45
--> Working on Text::Soundex
Fetching http://www.cpan.org/authors/id/R/RJ/RJBS/Text-Soundex-3.05.tar.gz ... OK
Configuring Text-Soundex-3.05 ... OK
Building and testing Text-Soundex-3.05 ... OK
Successfully installed Text-Soundex-3.05
--> Working on Test::Deep
Fetching http://www.cpan.org/authors/id/R/RJ/RJBS/Test-Deep-1.130.tar.gz ... OK
Configuring Test-Deep-1.130 ... OK
Building and testing Test-Deep-1.130 ... OK
Successfully installed Test-Deep-1.130
Building and testing SQL-Statement-1.414 ... OK
Successfully installed SQL-Statement-1.414
--> Working on Text::CSV_XS
Fetching http://www.cpan.org/authors/id/H/HM/HMBRAND/Text-CSV_XS-1.45.tgz ... OK
Configuring Text-CSV_XS-1.45 ... OK
Building and testing Text-CSV_XS-1.45 ... OK
Successfully installed Text-CSV_XS-1.45
Building and testing DBD-CSV-0.57 ... OK
Successfully installed DBD-CSV-0.57
--> Working on JSON
Fetching http://www.cpan.org/authors/id/I/IS/ISHIGAKI/JSON-4.02.tar.gz ... OK
Configuring JSON-4.02 ... OK
Building and testing JSON-4.02 ... OK
Successfully installed JSON-4.02
<== Installed dependencies for .. Finishing.
13 distributions installed
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0   836k      0  0:08:32  0:08:32 --:--:--  783k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> ls
Dockerfile  README.md  cpanfile  framework  init.sh  license.txt  major  project_repos
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> vi setup.sh 
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> unzip data
Archive:  data.zip
   creating: data/
  inflating: data/.DS_Store          
   creating: __MACOSX/
   creating: __MACOSX/data/
  inflating: __MACOSX/data/._.DS_Store  
  inflating: data/blacklist.csv      
   creating: data/data_massaging/
  inflating: data/data_massaging/amend-scores  
  inflating: data/data_massaging/clean_up_scores.pl  
  inflating: data/data_massaging/get_all_real.pl  
  inflating: data/data_massaging/README.md  
  inflating: data/data_massaging/split_scores_by_category.sh  
  inflating: data/num_tests.csv      
  inflating: data/num_tests.sh       
  inflating: data/README.md          
  inflating: data/sbfl_runtimes.csv  
  inflating: data/scores_artificial_vs_real.csv  
  inflating: data/scores_for_muse_with_each_killdefn.csv  
  inflating: data/scores_real_exploration.csv  
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib      setup.sh  utils
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  sbfl.sh  stats
apiarty> mkdir projects
apiarty> cd projects/
apiarty> mkdir chart
apiarty> cd chart/
apiarty> ls
apiarty> mkdir chart_25_buggy
apiarty> defects4j
bash: defects4j: command not found
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> ./sbfl.sh 
Usage: ./sbfl.sh <pid> <vid> <project dir>
apiarty> ./setup.sh
Adding environment variables to bashrc...
2021-01-14 18:05:40 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/apiarty/simfix/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /apiarty/simfix/SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /apiarty/simfix/SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /apiarty/simfix/SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /apiarty/simfix/SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 6 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> cd simfix
bash: cd: simfix: No such file or directory
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> cd projects/
apiarty> ls
chart
apiarty> cd chart/chart_25_buggy/
apiarty> defects4j checkout -p Chart -v 25b -w .
Checking out 164 to /apiarty/simfix/SimFix/sbfl/projects/chart/chart_25_bug OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> ls
ChangeLog  README.txt  checkstyle		   experimental  licence-LGPL.txt	       source  tests
NEWS	   ant	       defects4j.build.properties  lib		 maven-jfreechart-project.xml  swt
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> cd ..
apiarty> ls
chart_25_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib       sbfl.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  projects  setup.sh	utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/project/ --proj_name=chart --bug_id=25
Error: Unable to access jarfile /simfix/SimFix/final/simfix.jar
apiarty> pwd
/apiarty/simfix/SimFix
apiarty> java -jar /apiarty/simfix/SimFix/final/simfix.jar --proj_home=/apiarty/simfix/SimFix/sbfl/project/ --proj_name=chart --bug_id=25
/apiarty/simfix/SimFix/sbfl/project/
=================================================
Project : chart_25	start : 21/01/14 18:37

Exception in thread "main" java.io.FileNotFoundException: Source '/apiarty/simfix/SimFix/sbfl/project/chart/chart_25_buggy/source' does not exist
	at org.apache.commons.io.FileUtils.checkFileRequirements(FileUtils.java:1405)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1368)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1268)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1237)
	at cofix.common.util.Subject.backup(Subject.java:143)
	at cofix.main.Main.trySplitFix(Main.java:91)
	at cofix.main.Main.flexibelConfigure(Main.java:238)
	at cofix.main.Main.main(Main.java:225)
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd ..
apiarty> ls
SimFix
apiarty> cd ..
apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  simfix  tools
apiarty> cd ..
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
apiarty> cd apiarty/
apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  simfix  tools
apiarty> mv simfix/ ..
apiarty> ls
Dockerfile  README.md  apiarty	apiarty.bin  apiarty.pipeline  dat  data  findings  tools
apiarty> cd ..
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	simfix	srv  sys  tmp  usr  var
apiarty> cd simfix/SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
(failed reverse-i-search)`.set': ./sbfl^Ch Chart 25 projects/chart/chart_25_buggy/
apiarty> ./setup.sh
Adding environment variables to bashrc...
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /simfix/SimFix/sbfl/killmap/build.xml

init:

compile:
    [javac] Compiling 18 source files to /simfix/SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /simfix/SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 6 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> pwd
/simfix/SimFix/sbfl
apiarty> vi ~/.bashrc
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

There is not a /simfix/SimFix/sbfl/spectra/Chart/25/matrix file!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ls
README.md  analysis  cluster_scripts  data	defects4j  gzoltar  lib     projects  setup.sh	stats
__MACOSX   aws	     d4j_integration  data.zip	docker	   killmap  ochiai  sbfl.sh   spectra	utils
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  project.xml  res  sbfl  src  test  testfile
apiarty> cd ..
apiarty> ls
SimFix
apiarty> cd ..
apiarty> ls
apiarty  avatar  bin  boot  dev  etc  home  lib  lib64	media  mnt  opt  proc  root  run  sbin	simfix	srv  sys  tmp  usr  var
apiarty> rm -r simfix/
apiarty> mkdir simfix
apiarty> cd simfix
apiarty> pwd
/simfix
apiarty> ls
apiarty> git clone https://github.com/xgdsmileboy/SimFix.git
Cloning into 'SimFix'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 13127 (delta 4), reused 0 (delta 0), pack-reused 13115
Receiving objects: 100% (13127/13127), 152.10 MiB | 1.53 MiB/s, done.
Resolving deltas: 100% (4511/4511), done.
Checking connectivity... done.
Checking out files: 100% (9186/9186), done.
apiarty> ls
SimFix
apiarty> cd SimFix/
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> cd sbfl/
apiarty> ls
README.md  aws		    d4j_integration  docker   killmap  sbfl.sh	 stats
analysis   cluster_scripts  data.zip	     gzoltar  lib      setup.sh  utils
apiarty> git clone https://github.com/rjust/defects4j.git
Cloning into 'defects4j'...
remote: Enumerating objects: 22451, done.
remote: Total 22451 (delta 0), reused 0 (delta 0), pack-reused 22451
Receiving objects: 100% (22451/22451), 140.40 MiB | 1.55 MiB/s, done.
Resolving deltas: 100% (14430/14430), done.
Checking connectivity... done.
Checking out files: 100% (10654/10654), done.
apiarty> cd defects4j/
apiarty> cpanm --installdeps .
--> Working on .
Configuring /simfix/SimFix/sbfl/defects4j ... OK
<== Installed dependencies for .. Finishing.
apiarty> ./init.sh
Setting up project repositories ... 
retrying curl https://defects4j.org/downloads/defects4j-repos.zip
Warning: Illegal date format for -z, --timecond (and not a file name). 
Warning: Disabling time condition. See curl_getdate(3) for valid date syntax.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  418M  100  418M    0     0  1314k      0  0:05:26  0:05:26 --:--:-- 1134k

Setting up Major ... 
Downloading https://mutation-testing.org/downloads/major-1.3.4_jre7.zip
Downloaded https://mutation-testing.org/downloads/major-1.3.4_jre7.zip

Setting up EvoSuite ... 
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-1.0.6.jar
Downloading https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar
Downloaded https://github.com/EvoSuite/evosuite/releases/download/v1.0.6/evosuite-standalone-runtime-1.0.6.jar

Setting up Randoop ... 
Downloading https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip
Downloaded https://github.com/randoop/randoop/releases/download/v4.2.5/randoop-4.2.5.zip

Setting up Gradle dependencies ... 
Downloading https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-dists.zip
Downloading https://defects4j.org/downloads/defects4j-gradle-deps.zip
Downloaded https://defects4j.org/downloads/defects4j-gradle-deps.zip

Setting up utility programs ... 
Downloading https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar
Downloaded https://github.com/jose/build-analyzer/releases/download/v0.0.1/build-analyzer-0.0.1.jar

Defects4J successfully initialized.
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> ./init.sh^C
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> vi setup.sh 
apiarty> ./setup.sh
Adding environment variables to bashrc...
2021-01-14 19:15:11 URL:https://gzoltar.com/lib/com.gzoltar-1.6.0-jar-with-dependencies.jar [22289795/22289795] -> "/simfix/SimFix/sbfl/gzoltar/gzoltar.jar" [1]
Unzipping tarball mapping line numbers to statement-start-lines...
Compiling Killmap...
Buildfile: /simfix/SimFix/sbfl/killmap/build.xml

init:
    [mkdir] Created dir: /simfix/SimFix/sbfl/killmap/bin

compile:
    [javac] Compiling 18 source files to /simfix/SimFix/sbfl/killmap/bin
    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
    [javac] Note: /simfix/SimFix/sbfl/killmap/src/main/killmap/Main.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning

BUILD SUCCESSFUL
Total time: 6 seconds
Done! You need to `source ~/.bashrc` or start a new shell session before things will work right, though.
apiarty> source ~/.bashrc
Welcome to APIARTy.

apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> defects4j
usage: defects4j <command> [<args>]

Commands:
  bids          print all active bug IDs for a specific project
  checkout      checkout a particular project version
  compile       compile a checked-out project version
  coverage      run code coverage analysis for a checked-out project version
  env           print environment of defects4j execution
  export        export a version-specific property
  info          print information for a specific project or bug
  monitor.test  monitor class loader while running a single test
  mutation      run mutation analysis for a checked-out project version
  pids          prints all available project ids
  query         query the metadata for a particular project for automation purposes
  test          run tests on a checked-out project version
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	  setup.sh  utils
analysis   cluster_scripts  data.zip	     docker	killmap  sbfl.sh  stats
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
/simfix/SimFix/sbfl/gzoltar/run_gzoltar.sh: line 130: cd: projects/chart/chart_25_buggy/: No such file or directory
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Cannot open config file (/simfix/SimFix/sbfl/.defects4j.config): No such file or directory
/simfix/SimFix/sbfl is not a valid working directory!
usage: defects4j export -p property_name [-o output_file] [-w work_dir]

Properties:
  classes.modified  Classes modified by the bug fix
  classes.relevant  Classes loaded by the triggering tests
  cp.compile        Classpath to compile the project
  cp.test           Classpath to compile and run the developer-written tests
  dir.bin.classes   Target directory of classes
  dir.bin.tests     Target directory of test classes
  dir.src.classes   Source directory of classes
  dir.src.tests     Source directory of tests
  tests.all         List of all developer-written tests
  tests.relevant    Relevant tests that touch at least one of the modified sources
  tests.trigger     Trigger tests that expose the bug
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
/simfix/SimFix/sbfl/gzoltar/run_gzoltar.sh: line 130: cd: projects/chart/chart_25_buggy/: No such file or directory
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Cannot open config file (/simfix/SimFix/sbfl/.defects4j.config): No such file or directory
/simfix/SimFix/sbfl is not a valid working directory!
usage: defects4j export -p property_name [-o output_file] [-w work_dir]

Properties:
  classes.modified  Classes modified by the bug fix
  classes.relevant  Classes loaded by the triggering tests
  cp.compile        Classpath to compile the project
  cp.test           Classpath to compile and run the developer-written tests
  dir.bin.classes   Target directory of classes
  dir.bin.tests     Target directory of test classes
  dir.src.classes   Source directory of classes
  dir.src.tests     Source directory of tests
  tests.all         List of all developer-written tests
  tests.relevant    Relevant tests that touch at least one of the modified sources
  tests.trigger     Trigger tests that expose the bug
Compilation of the project under test failed!
Traceback (most recent call last):
  File "/simfix/SimFix/sbfl/analysis/pipeline-scripts/crush-matrix", line 214, in <module>
    with open(args.element_names) as name_file:
IOError: [Errno 2] No such file or directory: '/simfix/SimFix/sbfl/spectra/Chart/25/spectra'
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	 sbfl.sh   spectra  utils
analysis   cluster_scripts  data.zip	     docker	killmap  ochiai  setup.sh  stats
apiarty> mkdir projects
apiarty> cd projects/
apiarty> ls
apiarty> mkdir chart
apiarty> cd chart
apiarty> mkdir chart_25_buggy
apiarty> ls
chart_25_buggy
apiarty> cd chart_25_buggy/
apiarty> defects4j checkout -p Chart -v 25b -w .
Checking out 164 to /simfix/SimFix/sbfl/projects/chart/chart_25_buggy...... OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Apply patch................................................................ OK
Run post-checkout hook..................................................... OK
Excluding broken/flaky tests............................................... OK
Excluding broken/flaky tests............................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 164:162............................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-25b....................................... OK
apiarty> defects4j compile
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
apiarty> defects4j test
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 4
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
  - org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
apiarty> ls
ChangeLog  README.txt  ant    build-tests  defects4j.build.properties  failing_tests  licence-LGPL.txt		    source  tests
NEWS	   all_tests   build  checkstyle   experimental		       lib	      maven-jfreechart-project.xml  swt
apiarty> cd ..
apiarty> ls
chart_25_buggy
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
README.md  aws		    d4j_integration  defects4j	gzoltar  lib	 projects  setup.sh  stats
analysis   cluster_scripts  data.zip	     docker	killmap  ochiai  sbfl.sh   spectra   utils
apiarty> ./sbfl.sh Chart 25 projects/chart/chart_25_buggy/
Picked up _JAVA_OPTIONS: -XX:MaxHeapSize=1024m -Xmx4096m
Running ant (export.cp.test)............................................... OK

apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  project.xml  res  sbfl  src  test  testfile
apiarty> java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/project/ --proj_name=chart --bug_id=25
/simfix/SimFix/sbfl/project/
=================================================
Project : chart_25	start : 21/01/14 20:00

Exception in thread "main" java.io.FileNotFoundException: Source '/simfix/SimFix/sbfl/project/chart/chart_25_buggy/source' does not exist
	at org.apache.commons.io.FileUtils.checkFileRequirements(FileUtils.java:1405)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1368)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1268)
	at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1237)
	at cofix.common.util.Subject.backup(Subject.java:143)
	at cofix.main.Main.trySplitFix(Main.java:91)
	at cofix.main.Main.flexibelConfigure(Main.java:238)
	at cofix.main.Main.main(Main.java:225)
apiarty> java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25
/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_25	start : 21/01/14 20:00

TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
^Capiarty>time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25
bash: jtimeava: command not found
apiarty> time java -jar /simfix/SimFix/final/simfix.jar --proj_home=/simfix/SimFix/sbfl/projects/ --proj_name=chart --bug_id=25
/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_25	start : 21/01/14 20:01

TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
TIMEOUT : 4500000
org.jfree.chart.plot.Plot,1343
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(orientation==null){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.VERTICAL){

result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==null){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(!this.noDataMessage.equals(orientation.toString())){
return false;
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
org.jfree.chart.plot.Plot,1387
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(orientation==null){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){

result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(!this.noDataMessage.equals(orientation.toString())){
return false;
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
org.jfree.chart.plot.CategoryPlot,547
========
if(orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
if(orientation==PlotOrientation.VERTICAL){
rangeCrosshairLockedOnData=false;
}else {
return ;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
if(orientation==PlotOrientation.VERTICAL){
rangeCrosshairLockedOnData=false;
}else {
return ;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation!=that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation==null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(this.orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation!=null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation==that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation!=that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
org.jfree.chart.plot.CategoryPlot,550
========
if(orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation!=this.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==this.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
this.rangeGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'formatter\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.axisOffset=axisOffset;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.orientation=orientation;
this.axisOffset=axisOffset;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
Timeout!
TIMEOUT : 4500000
org.jfree.chart.JFreeChart,327
org.jfree.chart.JFreeChart,328
Find no block!
org.jfree.chart.JFreeChart,364
Find no block!
org.jfree.chart.JFreeChart,298
Find no block!
org.jfree.chart.JFreeChart,301
Find no block!
org.jfree.chart.JFreeChart,366
========
if(plot==null){
if(plot==null){
return ;
}
throw new NullPointerException("Null \'plot\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
org.jfree.chart.JFreeChart,371
========
this.notify=true;
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(plot!=null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(this.plot!=null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(this.plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(this.title!=null){
this.title.addChangeListener(this);
}
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(this.title!=null){
this.title.addChangeListener(this);
}
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(plot==null){
if(plot==null){
return ;
}
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
repaint();
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();

========
========
if(plot==null){
throw new NullPointerException("Null \'plot\' argument.");
}
this.progressListeners=new EventListenerList();
this.padding=plot.getInsets();
this.changeListeners=new EventListenerList();

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
org.jfree.chart.JFreeChart,372
========
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=false;
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.progressListeners=new EventListenerList();
setPadding(padding);
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.progressListeners=new EventListenerList();
this.title=description;
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=borderVisible;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderVisible){
notifyListeners(new TitleChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=notify;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new PlotChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=notify;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
if(notify){
fireChangeEvent();
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=borderVisible;

========
========
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=createLegend;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=createLegend;

========
========
if(borderVisible){
setAutoTickUnitSelection(false,false);
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
this.progressListeners=new EventListenerList();
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.progressListeners=new EventListenerList();
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
this.progressListeners=new EventListenerList();
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.progressListeners=new EventListenerList();
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;

========
========
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=false;

========
========
if(borderVisible){
setAutoTickUnitSelection(false,false);
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.progressListeners=new EventListenerList();
this.changeListeners=new EventListenerList();
this.notify=true;

========
org.jfree.chart.JFreeChart,373
========
this.borderVisible=false;
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderStroke=new BasicStroke(1.0);
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(this.title!=null){
this.title.addChangeListener(this);
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
setPadding(padding);
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.title=description;
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
this.changeListeners=new EventListenerList();
this.notify=true;
if(renderingHints==null){
throw new NullPointerException("RenderingHints given are null");
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.changeListeners=new EventListenerList();
this.notify=true;
if(renderingHints==null){
throw new NullPointerException("RenderingHints given are null");
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderVisible){
setAutoTickUnitSelection(false,false);
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
if(notify){
fireChangeEvent();
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
if(notify){
fireChangeEvent();
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
this.changeListeners=new EventListenerList();
this.notify=borderVisible;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderVisible){
notifyListeners(new TitleChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
this.changeListeners=new EventListenerList();
this.notify=notify;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new PlotChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=notify;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderVisible){
setAutoTickUnitSelection(false,false);
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
this.changeListeners=new EventListenerList();
this.notify=false;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.changeListeners=new EventListenerList();
this.notify=false;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(notify){
fireChangeEvent();
}
this.changeListeners=new EventListenerList();
this.notify=borderVisible;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
this.changeListeners=new EventListenerList();
this.notify=createLegend;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.changeListeners=new EventListenerList();
this.notify=createLegend;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
========
if(this.title!=null){
chart.title=(TextTitle)this.title.clone();
chart.title.addChangeListener((JFreeChart)super.clone());
}
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

========
org.jfree.chart.JFreeChart,376
========
this.changeListeners=new EventListenerList();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderStroke=new BasicStroke(1.0);
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(this.title!=null){
this.title.addChangeListener(this);
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.notify=true;
if(renderingHints==null){
throw new NullPointerException("RenderingHints given are null");
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.notify=true;
if(renderingHints==null){
throw new NullPointerException("RenderingHints given are null");
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=createLegend;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=createLegend;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
setPadding(padding);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.title=description;
this.borderVisible=false;

========
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(notify){
fireChangeEvent();
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(borderPaint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.borderVisible=false;

========
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
fireChangeEvent();
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
if(borderStroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.borderVisible=false;

========
========
if(createLegend){
setAutoTickUnitSelection(false,false);
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(createLegend){
setAutoTickUnitSelection(false,false);
}
if(notify){
notifyListeners(new AxisChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(notify){
fireChangeEvent();
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=createLegend;

========
========
this.notify=borderVisible;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(borderVisible){
notifyListeners(new TitleChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
if(notify){
notifyListeners(new RendererChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=borderVisible;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new PlotChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
========
this.notify=notify;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(notify){
notifyListeners(new ChartChangeEvent(this));
}
this.notify=notify;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
if(this.title!=null){
chart.title=(TextTitle)this.title.clone();
chart.title.addChangeListener((JFreeChart)super.clone());
}
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;

========
org.jfree.chart.JFreeChart,380
========
this.changeListeners=new EventListenerList();
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
========
this.notify=true;
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
========
if(this.title!=null){
this.title.addChangeListener(this);
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
========
if(renderingHints==null){
throw new NullPointerException("RenderingHints given are null");
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
========
fireChartChanged();
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
========
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=createLegend;
this.borderStroke=new BasicStroke(1.0);

========
========
if(this.title!=null){
chart.title=(TextTitle)this.title.clone();
chart.title.addChangeListener((JFreeChart)super.clone());
}
this.renderingHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);

========
org.jfree.chart.JFreeChart,381
UNKNOWN ASTNode type : catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

========
this.padding=RectangleInsets.ZERO_INSETS;
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.plot=plot;
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=true;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.createLegend=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.backgroundPaint=Color.black;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.createLegend=false;
this.backgroundPaint=Color.black;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.padding=new RectangleInsets(1.0,3.0,1.0,3.0);
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=black;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
fireChartChanged();
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.progressListeners=new EventListenerList();
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.titleFont=MeterPlot.DEFAULT_LABEL_FONT;
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
super(title);
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.titleFont=new Font("SansSerif",Font.PLAIN,12);
this.borderPaint=Color.black;

========
========
this.borderVisible=false;
this.backgroundImageAlpha=alpha;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;

========
org.jfree.chart.JFreeChart,382
UNKNOWN ASTNode type : catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

========
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.plot=plot;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.backgroundPaint=Color.black;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderVisible=true;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.backgroundPaint=Color.black;
this.borderVisible=false;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.backgroundPaint=new Color(255,255,192);
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
fireChartChanged();
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.progressListeners=new EventListenerList();
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.titleFont=MeterPlot.DEFAULT_LABEL_FONT;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
super(title);
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.titleFont=new Font("SansSerif",Font.PLAIN,12);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
setPadding(padding);
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=padding;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=RectangleInsets.ZERO_INSETS;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.title=null;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.backgroundImageAlpha=alpha;
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.titleFont=labelFont;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=padding;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=padding;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;

========
========
notifyListeners(new ChartChangeEvent(this));
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=padding;
this.padding=padding;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=padding;
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
super();
this.padding=RectangleInsets.ZERO_INSETS;

========
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
setBackgroundPaint(Color.WHITE);
this.padding=RectangleInsets.ZERO_INSETS;

========
org.jfree.chart.JFreeChart,384
UNKNOWN ASTNode type : catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

========
this.borderVisible=false;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderStroke=new BasicStroke(1.0);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
configure();
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
super(plot);
this.plot=plot;

========
========
this.borderPaint=Color.black;
this.backgroundImageAlpha=DEFAULT_TICK_MARK_INSIDE_LENGTH;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
repaint();
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
this.borderVisible=true;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireChartChanged();
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
this.borderVisible=false;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=true;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
this.borderVisible=false;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=true;
this.borderPaint=Color.black;
this.borderVisible=false;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=true;
this.borderPaint=Color.black;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=true;
this.borderPaint=Color.black;
this.borderVisible=false;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=false;
this.borderPaint=Color.black;
this.borderVisible=false;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=false;
this.borderPaint=Color.black;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=false;
this.borderPaint=Color.black;
this.borderVisible=false;
this.backgroundPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.titleFont=MeterPlot.DEFAULT_LABEL_FONT;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.titleFont=MeterPlot.DEFAULT_VALUE_FONT;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
setPadding(padding);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
this.padding=padding;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.titleFont=labelFont;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
super(title);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.titleFont=new Font("SansSerif",Font.PLAIN,12);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.changeListeners=new EventListenerList();
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.progressListeners=new EventListenerList();
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=padding;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=RectangleInsets.ZERO_INSETS;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.title=null;
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
this.titleFont=new Font("SansSerif",Font.PLAIN,10);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=padding;
this.padding=padding;
this.plot=plot;

========
========
this.titleFont=new Font("SansSerif",Font.PLAIN,9);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
if(DEFAULT_BACKGROUND_IMAGE==null){
throw new NullPointerException("Null \'image\' argument.");
}
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
setHeight(DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
setWidth(DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
this.borderStroke=new BasicStroke(1.0);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.backgroundPaint=new Color(255,255,192);
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
notifyListeners(new TitleChangeEvent(this));
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderPaint=Color.black;
this.padding=padding;
this.plot=plot;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
notifyListeners(new TitleChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;
this.plot=plot;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderPaint=Color.black;
this.padding=padding;
this.plot=plot;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
notifyListeners(new PlotChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;
this.plot=plot;

========
========
notifyListeners(new ChartChangeEvent(this));
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
notifyListeners(new ChartChangeEvent(this));
this.borderPaint=Color.black;
this.padding=padding;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
notifyListeners(new ChartChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
notifyListeners(new ChartChangeEvent(this));
this.borderPaint=Color.black;
if(padding==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.padding=padding;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderPaint=Color.black;
super();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
========
this.borderPaint=Color.black;
setBackgroundPaint(Color.WHITE);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
org.jfree.chart.JFreeChart,386
========
this.borderStroke=new BasicStroke(1.0);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.borderPaint=Color.black;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.plot.addChangeListener(this);
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=false;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.borderVisible=editable;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
configure();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
super(plot);
this.plot=plot;
plot.addChangeListener(this);

========
========
this.backgroundImageAlpha=DEFAULT_TICK_MARK_INSIDE_LENGTH;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.changeListeners=new EventListenerList();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
clone.listenerList=new EventListenerList();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.borderPaint=Color.red;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.padding=RectangleInsets.ZERO_INSETS;
this();
this.plot=plot;
plot.addChangeListener(this);

========
========
fireTableDataChanged();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.borderVisible=true;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
repaint();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setBaseLinesVisible(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setBaseShapesVisible(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setBackgroundPaint(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
super();
plot.addChangeListener(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setPlotLines(this);

========
========
setAxisRange();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.padding=plot;
this.plot=plot;
plot.addChangeListener(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setDatasetGroup(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setDomainAxis(this);

========
========
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.setRangeAxis(this);

========
========
this.notify=true;
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
fireDatasetChanged();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
========
fireChartChanged();
this.padding=RectangleInsets.ZERO_INSETS;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
========
this.padding=padding;
this.plot=plot;
plot.addChangeListener(this);

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
Timeout!
TIMEOUT : 4500000
org.jfree.chart.plot.Plot,1343
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(orientation==null){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.VERTICAL){

result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==null){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(!this.noDataMessage.equals(orientation.toString())){
return false;
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
org.jfree.chart.plot.Plot,1387
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(orientation==null){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){

result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(!this.noDataMessage.equals(orientation.toString())){
return false;
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
org.jfree.chart.plot.CategoryPlot,547
========
if(orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
if(orientation==PlotOrientation.VERTICAL){
rangeCrosshairLockedOnData=false;
}else {
return ;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.VERTICAL){
if(orientation==PlotOrientation.VERTICAL){
rangeCrosshairLockedOnData=false;
}else {
return ;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation==null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation!=null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation==that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation!=null){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(orientation!=that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
========
if(this.orientation==that.orientation){
if(this.orientation!=that.orientation){
return false;
}
throw new IllegalArgumentException("Null \'orientation\' argument.");
}

========
org.jfree.chart.plot.CategoryPlot,550
========
if(orientation!=null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation!=this.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==this.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==PlotOrientation.HORIZONTAL){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
this.rangeGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'formatter\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.axisOffset=axisOffset;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.orientation=orientation;
this.axisOffset=axisOffset;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.renderingOrder=renderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument.");
}
this.orientation=orientation;
this.renderingOrder=renderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.domainGridlineStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
this.domainGridlineStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.domainGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
this.domainGridlinePaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.orientation=orientation;
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'origin\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairPaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.orientation=orientation;
this.rangeCrosshairPaint=DEFAULT_CROSSHAIR_PAINT;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'font\' not allowed.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.DEFAULT_VALUE_LABEL_FONT=DEFAULT_VALUE_LABEL_FONT;
notifyListeners(new PlotChangeEvent(this));

========
========
if(orientation==null){
throw new IllegalArgumentException("Null \'direction\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
this.orientation=orientation;
this.DEFAULT_VALUE_LABEL_FONT=DEFAULT_VALUE_LABEL_FONT;
notifyListeners(new PlotChangeEvent(this));

========
========
if(orientation==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.orientation=orientation;
this.axisOffset=axisOffset;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'distributor\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'generator\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Requires \'size\' > 0.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.anchorValue=anchorValue;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Requires \'size\' > 0.");
}
this.orientation=orientation;
this.anchorValue=anchorValue;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'format\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.columnRenderingOrder=columnRenderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument.");
}
this.orientation=orientation;
this.columnRenderingOrder=columnRenderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.rowRenderingOrder=columnRenderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'order\' argument.");
}
this.orientation=orientation;
this.rowRenderingOrder=columnRenderingOrder;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'position\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.domainGridlinePosition=domainGridlinePosition;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'position\' argument.");
}
this.orientation=orientation;
this.domainGridlinePosition=domainGridlinePosition;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' not permitted.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'stroke\' not permitted.");
}
this.orientation=orientation;
this.domainGridlineStroke=DEFAULT_GRIDLINE_STROKE;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(orientation==null){
throw new IllegalArgumentException("Null \'pieChart\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
========
if(this.orientation!=that.orientation){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
========
if(this.orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
Timeout!
TIMEOUT : 4500000
Cannot get suspicious statement for non-existing file : /simfix/SimFix/sbfl/ochiai/chart/25/stmt-susps.txt
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,90
Find no block!
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,91
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,92
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,93
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,94
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,95
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,96
Find no block!
org.jfree.data.statistics.DefaultStatisticalCategoryDataset,107
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(this.masd!=null){
result=masd.getMean();
}

========
========
if(masd==null){
result=masd.getMean();
}

========
TESTING : org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
TESTING : chart_25
Successfully repair!

real	245m39.022s
user	98m17.960s
sys	33m48.899s
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cd patch/
apiarty> ls
chart
apiarty> cd chart/
apiarty> ls
25
apiarty> cd 25
apiarty> ls
3
apiarty> cd 3
apiarty> ls
1_DefaultStatisticalCategoryDataset.java
apiarty> ls
1_DefaultStatisticalCategoryDataset.java
apiarty> cd ..
apiarty> cd ..
apiarty> ls
25
apiarty> cd ..
apiarty> ls
chart
apiarty> cd ..
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> cp -r patch /apiarty/findings
apiarty> ls
LICENSE  README.html  README.md  d4j-info  doc	final  lib  log  patch	project.xml  res  sbfl	src  test  testfile
apiarty> 


real	245m39.022s
user	98m17.960s
sys	33m48.899s