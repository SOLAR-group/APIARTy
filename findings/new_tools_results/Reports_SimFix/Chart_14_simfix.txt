/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_14	start : 20/11/24 08:19

TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
TIMEOUT : 4500000
org.jfree.chart.plot.XYPlot,2465
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,2481
========
return removeRangeMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,2498
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(index,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,2517
========
if(marker==null){
throw new IllegalArgumentException("Null \'marker\' not permitted.");
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(marker==Layer.BACKGROUND){
throw new IllegalArgumentException("Null \'marker\' argument.");
}

========
org.jfree.chart.plot.XYPlot,2521
========
if(layer==Layer.BACKGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
break;
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
break;
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer!=null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
if(layer!=null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(domainCrosshairValue<item.value){
return this.rangeGridlinePaint;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(annotations.isEmpty()){
return null;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(layer==index){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
if(layer==weight){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
========
fireSeriesChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
org.jfree.chart.plot.XYPlot,2522
org.jfree.chart.plot.XYPlot,2529
========
if(removed&&use){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.useOutlinePaint=removed;
fireChangeEvent();
}

========
========
if(removed&&flag){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.baseShapesVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotLines=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotImages=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotDiscontinuous=notify;
fireChangeEvent();
}

========
========
if(removed&&visible){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&notify){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&visible){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&flag){
this.domainCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&flag){
this.domainCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&flag){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&flag){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.radiusGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.tickLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(range&&range){
fireChangeEvent();
}

========
========
if((weight>=0)&&(weight<this.quadrantPaint.removed)){
fireChangeEvent();
}

========
========
if((weight>=0)&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&(weight<this.quadrantPaint.removed)){
fireChangeEvent();
}

========
========
if(range&&notify){
fireChangeEvent();
}

========
========
if(removed&&range){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.subrangePaint[range]=DEFAULT_CROSSHAIR_PAINT;
fireChangeEvent();
}

========
========
if(removed&&index){
fireChangeEvent();
}

========
========
fireChangeEvent();
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(removed&&notify){
this.autoTickUnitSelection=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}

========
========
if(removed&&auto){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
if(this.notify){
autoAdjustRange();
}
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
if(this.notify){
autoAdjustRange();
}

fireChangeEvent();
}

========
========
if(removed&&visible){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
========
marker.addChangeListener(this);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(notify){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
marker.addChangeListener(this);
if(notify){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(JANUARY&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=row.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
double removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.annotations.remove(index);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}

========
========
if(index>=0){
return (TickUnit)this.annotations.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if((Object[])annotations.get(index+1)[0]==null){
weight=-((Integer)(Object[])annotations.get(index)[0]).intValue();
}else {
series=((Integer)curr[0]).intValue();
if(series<0){
series=-((Integer)prev[0]).intValue();
}
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(removed){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if((List)this.foregroundRangeMarkers.get(new Integer(index))==null){
labelList=new java.util.ArrayList();
this.foregroundRangeMarkers.put(new Integer(index),labelList);
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint((Comparable)annotations.get(index),true);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
rangeGridlinePaint=lookupSectionOutlinePaint((Comparable)annotations.get(index));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
rangeCrosshairStroke=lookupSectionOutlineStroke((Comparable)annotations.get(index));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
configureDomainAxes();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureDomainAxes();
configureRangeAxes();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureDomainAxes();
if(notify){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
if(notify){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureDomainAxes();
configureRangeAxes();
if(notify){
fireChangeEvent();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
this.rangeCrosshairLockedOnData=false;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeCrosshairLockedOnData=removed;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
fireDatasetChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
notifyListeners(new RendererChangeEvent(this));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData||this.notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&this.notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(includeInterval&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(annotations.isEmpty()){
return null;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.domainAxes.clear();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes.clear();
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.clear();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.clear();
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
int removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireSeriesChanged();
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(column&&notify){
fireChangeEvent();
}

========
========
if(index>=0){
return (KeyedObjects)this.annotations.get(weight).getObject(index);
}else {
return null;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}

========
========
fireSeriesChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
fireSeriesChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==index){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer!=null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(count&&notify){
fireChangeEvent();
}

========
========
if(domainCrosshairValue<item.value){
return this.rangeGridlinePaint;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(DEFAULT_CROSSHAIR_PAINT==null){
result=getTickLabelPaint();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((weight<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if((weight<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(weight<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint(getSectionKey(index),true);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
rangeGridlinePaint=lookupSectionOutlinePaint(getSectionKey(index));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
rangeCrosshairStroke=lookupSectionOutlineStroke(getSectionKey(index));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(this.rangeCrosshairLockedOnData){
return (SimpleHistogramBin)this.annotations.get(weight).getItemCount()/(bin.getUpperBound()-bin.getLowerBound());
}else {
return bin.getItemCount();
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((domainCrosshairValue-s.width)/2.0,0.0,s.width,s.height));
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(index>=getDatasetCount()){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&use){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.useOutlinePaint=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.baseShapesVisible=removed;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotLines=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotImages=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotDiscontinuous=removed;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairVisible=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.domainCrosshairVisible=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.domainCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleLabelsVisible=removed;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleGridlinesVisible=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.radiusGridlinesVisible=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.tickLabelsVisible=removed;
fireChangeEvent();
}

========
========
if(Plot.resolveDomainAxisLocation(getDomainAxisLocation(index),this.orientation)==null){
result=RectangleEdge.opposite(getDomainAxisEdge());
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(Plot.resolveRangeAxisLocation(getRangeAxisLocation(index),this.orientation)==null){
result=RectangleEdge.opposite(getRangeAxisEdge());
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&flag){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!notify||notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(VALUE_ANTIALIAS_OFF&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&VALUE_ANTIALIAS_ON){
fireChangeEvent();
}

========
========
fireChartChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(!notify||notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&flag){
fireChangeEvent();
}

========
========
if(Plot.resolveRangeAxisLocation(getRangeAxisLocation(index),this.orientation)==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&ORIENTATION_VERTICAL){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
this.weight+=weight;
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
this.weight+=weight;
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
this.annotations.remove(weight);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(getRenderer(index)==null){
renderer=getRenderer();
if(renderer==null){
return rangeCrosshairLockedOnData;
}
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(index>=0){
this.annotations.set(index,new PaintItem(domainCrosshairValue,DEFAULT_CROSSHAIR_PAINT));
}else {
this.lookupTable.add(-(index+1),item);
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==weight){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.annotations.add(layer);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
layer.addChangeListener(this);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.annotations.add(layer);
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.add(layer);
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.annotations.add(layer);
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoTickUnitSelection=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&auto){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}

fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(size&&notify){
fireChangeEvent();
}

========
========
if(!false){
throw new RuntimeException("No bin.");
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(notify){
notifyListeners(new DatasetChangeEvent(this,this));
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
long removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
domainCrosshairValue=direction%360;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
if(domainCrosshairValue<0.0){
direction=direction+360.0;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}

========
========
this.notify=true;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.removed=false;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
========
this.rangeCrosshairStroke=new BasicStroke(1.0);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}

========
org.jfree.chart.plot.XYPlot,501
org.jfree.chart.plot.XYPlot,502
Find no block!
org.jfree.chart.plot.Marker,144
org.jfree.chart.plot.Marker,145
Find no block!
org.jfree.chart.plot.Marker,153
org.jfree.chart.plot.Marker,155
Find no block!
org.jfree.chart.plot.ValueMarker,68
========
notifyListeners(new MarkerChangeEvent(this));
super();
this.value=value;

========
========
super();
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.value=value;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
notifyListeners(new AxisChangeEvent(this));
super();
this.value=value;

========
========
super();
this.value=lclip;

========
========
super();
this.value=uclip;

========
========
super();
this.value=angle1;

========
========
super();
this.value=total;

========
========
super();
this.value=min;

========
========
super();
this.value=max;

========
========
super();
this.value=negative;

========
========
super();
this.value=maxX;

========
========
super();
this.value=axisMin;

========
========
super();
this.value=axisMax;

========
========
super();
this.value=minX;

========
========
super();
this.value=minY;

========
========
super();
this.value=maxY;

========
org.jfree.chart.plot.ValueMarker,69
org.jfree.chart.plot.ValueMarker,70
Find no block!
org.jfree.chart.plot.XYPlot,520
========
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
this.domainAxes=new ObjectList();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
this.dataset=dataset;
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
super();
this.orientation=orientation;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
super();
this.orientation=orientation;
this.weight=1;

========
========
fireChangeEvent();
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
fireChangeEvent();
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;

========
========
configureRangeAxes();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
fireChangeEvent();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
========
if(getDomainAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(getRangeAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(getDomainAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
org.jfree.chart.plot.XYPlot,345
Find no block!
org.jfree.chart.plot.XYPlot,348
Find no block!
org.jfree.chart.plot.XYPlot,419
Find no block!
org.jfree.chart.plot.XYPlot,437
Find no block!
org.jfree.chart.plot.XYPlot,474
Find no block!
org.jfree.chart.plot.XYPlot,481
Find no block!
org.jfree.chart.plot.XYPlot,522
org.jfree.chart.plot.XYPlot,523
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
========
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.dataset=dataset;
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
super();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
org.jfree.chart.plot.XYPlot,524
========
super();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.weight=1;
super();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
this.rangeAxes=new ObjectList();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
fireChangeEvent();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureRangeAxes();
fireChangeEvent();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(getDomainAxis()!=null){
axis.configure();
}
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
if(getRangeAxis()!=null){
axis.configure();
}
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
if(getDomainAxis()!=null){
axis.configure();
}
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
org.jfree.chart.plot.XYPlot,527
========
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.weight=1;
this.foregroundDomainMarkers=new HashMap();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
super();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
========
this.rangeAxes=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,528
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
super();
this.foregroundDomainMarkers=new HashMap();

========
========
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
this.domainAxes=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,529
========
this.domainAxisLocations=new ObjectList();
this.rangeGridlinePaint=DEFAULT_GRIDLINE_PAINT;
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeGridlinePaint=DEFAULT_GRIDLINE_PAINT;
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,530
========
this.foregroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
========
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,532
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
org.jfree.chart.plot.XYPlot,533
========
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();

========
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();

========
========
clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
========
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.XYPlot,534
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxisLocations=new ObjectList();
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
this.rangeAxisLocations=new ObjectList();
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
clone.datasets=(ObjectList)this.datasets.clone();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,535
========
this.rangeAxes=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.datasets=(ObjectList)this.datasets.clone();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
org.jfree.chart.plot.XYPlot,537
========
this.rangeAxisLocations=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
addRangeMarker(new ValueMarker(0.0,new Color(0.8,0.8,0.8,0.5),new BasicStroke(1.0),new Color(0.85,0.85,0.95,0.5),new BasicStroke(1.0),0.6),Layer.BACKGROUND);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();

========
org.jfree.chart.plot.XYPlot,538
========
this.datasets=new ObjectList();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
org.jfree.chart.plot.XYPlot,540
========
this.backgroundRangeMarkers=new HashMap();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
========
this.datasets.set(0,dataset);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
org.jfree.chart.plot.XYPlot,541
========
this.datasets=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
clone.renderers=(ObjectList)ObjectUtilities.clone(this.renderers);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxes.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxes.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,getDataset(weight)));
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());

========
========
this.datasets.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.mapDatasetToRangeAxis(0,0);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(weight,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(renderer!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
rangeAxis.setAxisLineVisible(false);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
configureDomainAxes();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,renderer);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
datasetChanged(new DatasetChangeEvent(this,this.dataset));
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasetToDomainAxisMap.put(new Integer(weight),new Integer(weight));
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasetToRangeAxisMap.put(new Integer(weight),new Integer(weight));
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
(XYPlot)ChartFactory.createTimeSeriesChart("Legal & General Unit Trust Prices","Date","Price Per Unit",dataset,true,true,false).getPlot().setBackgroundPaint(Color.lightGray);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
if(dataset==null){
throw new IllegalArgumentException("Null \'dataset\' argument.");
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.dataset=dataset;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.rangeCrosshairLockedOnData=autoWidth;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.domainCrosshairValue=1.0;
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=1.0;
this.datasetToDomainAxisMap=new TreeMap();
if(dataset==null){
throw new IllegalArgumentException("Null \'dataset\' argument.");
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?y1:dataset.getYValue(weight,weight-1);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
org.jfree.chart.plot.XYPlot,543
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.renderers.set(0,renderer);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.renderers.set(0,renderer);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
super();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if(getDataset(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(existing!=null){
existing.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(existing!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
existing.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.renderers=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasets.set(weight,rangeAxis);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if(renderer!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.annotations=new java.util.ArrayList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(d!=null){
d.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(d!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
d.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
clone.renderers=(ObjectList)ObjectUtilities.clone(this.renderers);
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.domainCrosshairValue=0.5;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireChartChanged();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxis=rangeAxis;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?y1:dataset.getYValue(weight,weight-1);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=domainCrosshairValue;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?getRangeBase():y0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
domainCrosshairValue=domainCrosshairValue;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
uvalue=(IntervalXYDataset)dataset.getEndYValue(weight,weight);
dataset.addChangeListener(this);
}

========
org.jfree.chart.plot.XYPlot,544
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(d!=null){
d.addChangeListener(this);
}

========
========
if(d!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
d.addChangeListener(this);
}

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(existing!=null){
existing.addChangeListener(this);
}

========
========
if(existing!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
existing.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(this.dataset!=null){
setDatasetGroup(this.dataset.getGroup());
this.dataset.addChangeListener(this);
}
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
this.renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
this.rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset==null){
return null;
}
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.draw(this);
}

========
========
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
uvalue=(IntervalXYDataset)dataset.getEndYValue(weight,weight);
dataset.addChangeListener(this);
}

========
org.jfree.chart.plot.XYPlot,548
========
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxis.removeChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxis=rangeAxis;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(renderer!=null){
this.rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer!=null){
setDatasetGroup(this.dataset.getGroup());
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer!=null){
setDatasetGroup(dataset.getGroup());
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(d!=null){
d.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(d!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
d.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeAxis=rangeAxis;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(existing!=null){
existing.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
existing.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.dataset=dataset;
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,this.dataset));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYURLGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYZURLGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChartChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.domainGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.rangeGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainGridlinesVisible=false;
this.rangeGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYURLGenerator());
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(getPlot()==null){
return null;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.draw(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setAxisLineVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickMarksVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
new PolarPlot().setRenderer(new DefaultPolarItemRenderer());
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickMarksVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
if(Double.isNaN(dataset.getYValue(weight,weight))){
y1=0.0;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
new Object[3][0]=dataset.getSeriesKey(weight).toString();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.domainCrosshairValue=0.5;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=1.0;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
this.domainCrosshairValue=1.0;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
Timeout!
TIMEOUT : 4500000
org.jfree.chart.plot.CategoryPlot,2106
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,2122
========
return removeDomainMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,2139
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(index,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,2158
========
if(layer==Layer.BACKGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(layer==Layer.FOREGROUND){
break;
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
break;
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(annotations.isEmpty()){
return null;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==index){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==weight){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
fireSeriesChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
org.jfree.chart.plot.CategoryPlot,2159
org.jfree.chart.plot.CategoryPlot,2166
========
if(removed&&use){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.useOutlinePaint=removed;
fireChangeEvent();
}

========
========
if(removed&&flag){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.baseShapesVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotLines=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotImages=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotDiscontinuous=notify;
fireChangeEvent();
}

========
========
if(removed&&visible){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(removed&&notify){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(removed&&visible){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.radiusGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.tickLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(range&&range){
fireChangeEvent();
}

========
========
if((weight>=0)){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if((weight>=0)&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(range&&notify){
fireChangeEvent();
}

========
========
if(removed&&range){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.subrangePaint[range]=DEFAULT_CROSSHAIR_PAINT;
fireChangeEvent();
}

========
========
if(removed&&index){
fireChangeEvent();
}

========
========
fireChangeEvent();
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(removed&&notify){
this.autoTickUnitSelection=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}

========
========
if(removed&&auto){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
if(this.notify){
autoAdjustRange();
}
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
if(this.notify){
autoAdjustRange();
}

fireChangeEvent();
}

========
========
if(removed&&visible){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
========
ArrayList markers;
if(marker==null){
throw new IllegalArgumentException("Null \'marker\' argument.");
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
marker.addChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if((DialPointer)this.annotations.get(index)!=null){
pointer.removeChangeListener(this);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
fireChangeEvent();
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
return (TickUnit)this.annotations.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(removed){
fireChangeEvent();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if((Object[])annotations.get(index+1)[0]==null){
weight=-((Integer)(Object[])annotations.get(index)[0]).intValue();
}else {
series=((Integer)curr[0]).intValue();
if(series<0){
series=-((Integer)prev[0]).intValue();
}
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=row.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
double removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
if(!Arrays.equals((double[][])this.annotations.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if((List)this.backgroundDomainMarkers.get(new Integer(index))==null){
labelList=new java.util.ArrayList();
this.backgroundDomainMarkers.put(new Integer(index),labelList);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return result;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
notifyListeners(new RendererChangeEvent(this));
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
this.rangeCrosshairLockedOnData=false;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeCrosshairLockedOnData=this.rangeCrosshairLockedOnData;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeCrosshairLockedOnData=this.rangeCrosshairLockedOnData;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
this.rangeCrosshairLockedOnData=false;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint((Comparable)annotations.get(index),true);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
rangeGridlinePaint=lookupSectionOutlinePaint((Comparable)annotations.get(index));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
rangeCrosshairStroke=lookupSectionOutlineStroke((Comparable)annotations.get(index));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData||this.notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&this.notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(includeInterval&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(annotations.isEmpty()){
return null;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((Number)this.datasetToDomainAxisMap.get(weight)!=null){
anchorValue=n.doubleValue();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((List)this.markers.get(weight)!=null){
weight=urls.size();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if(foregroundDomainMarkers!=null){
weight=urlMap.size();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((List)this.annotations.get(weight)!=null){
weight=tooltips.size();
}
return removed;

========
========
if((BoxAndWhiskerItem)this.annotations.get(weight)!=null){
annotations=stats.getOutliers();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.remove(index);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
fireSeriesChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
fireSeriesChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==index){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(column&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
return (KeyedObjects)this.annotations.get(weight).getObject(index);
}else {
return null;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==notify){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(count&&notify){
fireChangeEvent();
}
return removed;

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((weight<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return VALUE_ANTIALIAS_ON;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((weight<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(weight<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(this.rangeCrosshairLockedOnData){
return (SimpleHistogramBin)this.annotations.get(weight).getItemCount()/(bin.getUpperBound()-bin.getLowerBound());
}else {
return bin.getItemCount();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((anchorValue-s.width)/2.0,0.0,s.width,s.height));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&use){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.useOutlinePaint=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.baseShapesVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotLines=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotImages=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotDiscontinuous=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairLockedOnData=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairLockedOnData=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairLockedOnData=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleLabelsVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.radiusGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.tickLabelsVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(getRenderer(index)==null){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(index>=getDatasetCount()){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(getRenderer(index)==null){
return ;
}
if(index>=getDatasetCount()){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!notify||notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(VALUE_ANTIALIAS_OFF&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&VALUE_ANTIALIAS_ON){
fireChangeEvent();
}
return removed;

========
========
fireChartChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(!notify||notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&ORIENTATION_VERTICAL){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
this.annotations.set(index,new PaintItem(anchorValue,DEFAULT_CROSSHAIR_PAINT));
}else {
this.lookupTable.add(-(index+1),item);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return foundData;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
removed=true;
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==weight){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.add(layer);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
layer.addChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.add(layer);
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.add(layer);
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.annotations.add(layer);
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoTickUnitSelection=notify;
fireChangeEvent();
}
return removed;

========
========
if(this.foregroundDomainMarkers!=null){
Set this.foregroundDomainMarkers.keySet()=this.foregroundRangeMarkers.keySet();
Iterator this.foregroundDomainMarkers.keySet().iterator()=keys.iterator();
while(iterator.hasNext()){
Integer (Integer)this.foregroundDomainMarkers.keySet().iterator().next()=(Integer)iterator.next();
clearRangeMarkers(key.intValue());
}
this.foregroundRangeMarkers.clear();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&auto){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}

fireChangeEvent();
}
return removed;

========
========
if(!false){
throw new RuntimeException("No bin.");
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(notify){
notifyListeners(new DatasetChangeEvent(this,this));
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
long removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
anchorValue=direction%360;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(anchorValue<0.0){
direction=direction+360.0;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
if(this.foregroundDomainMarkers!=null){
Set this.foregroundDomainMarkers.keySet()=this.foregroundRangeMarkers.keySet();
Iterator this.foregroundDomainMarkers.keySet().iterator()=keys.iterator();
while(iterator.hasNext()){
Integer (Integer)this.foregroundDomainMarkers.keySet().iterator().next()=(Integer)iterator.next();
clearRangeMarkers(key.intValue());
}
this.foregroundRangeMarkers.clear();
}
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return black;

========
========
this.notify=true;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.removed=false;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeCrosshairStroke=new BasicStroke(1.0);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeGridlinePaint=Color.black;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryMarker,80
========
this(key,gray,new BasicStroke(1.0));

========
org.jfree.chart.plot.CategoryMarker,81
Find no block!
org.jfree.chart.plot.CategoryMarker,91
org.jfree.chart.plot.CategoryMarker,92
Find no block!
org.jfree.chart.plot.CategoryMarker,107
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.CONTRACT);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.outlinePaint=Color.gray;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=Color.black;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.paint=Color.red;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.stroke=new BasicStroke(3.0,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL);
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.drawAsLine=autoSort;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super.setDrawSeriesLineAsPath(true);
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.alpha=0.5;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
fireChangeEvent();
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
fireDatasetChanged();
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlineStroke=outlineStroke;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.alpha=alpha;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
this.outlinePaint=paint;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
this.outlineStroke=stroke;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(this.outlineStroke!=null){
if(this.outlineStroke.equals(stroke)){
return ;
}
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(this.outlinePaint!=null){
if(this.outlinePaint.equals(paint)){
return ;
}
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
default :

super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(getIndex(key)<0){
throw new UnknownKeyException("The key ("+key);
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.stroke=stroke;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(getIndex(key)<0){
throw new UnknownKeyException("The key ("+key.toString());
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.stroke=stroke;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=fillPaint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(stroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(stroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.outlineStroke=stroke;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.outlinePaint=paint;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.drawAsLine=true;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=fillPaint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.stroke=stroke;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=category2;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.paint=paint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.stroke=stroke;
this.paint=paint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.drawAsLine=true;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=outlinePaint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.drawAsLine=lineVisible;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
repaint();
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(key==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.outlinePaint=backgroundPaint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
if(drawAsLine){
fireChangeEvent();
}
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=FastScatterPlot.DEFAULT_GRIDLINE_PAINT;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.paint=Color.red;
this.drawAsLine=true;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setSeriesKey(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
case Types.DECIMAL :

setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
case Types.DATE :

super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(this.outlinePaint!=null){
if(this.backgroundPaint.equals(paint)){
return ;
}
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.paint=DEFAULT_PAINT;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.alpha=baselineOffset;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.paint=DEFAULT_PAINT;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
if(stroke==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.outlinePaint=null;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument");
}
this.outlinePaint=paint;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(stroke==null){
throw new IllegalArgumentException("Null \'stroke\' not permitted.");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(stroke==null){
throw new IllegalArgumentException("Null \'stroke\' not permitted.");
}
this.outlineStroke=stroke;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.paint=Color.black;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.outlinePaint=Color.gray;
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.outlinePaint=new Color(100,100,150);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.stroke=new BasicStroke(2.0);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.paint=paint;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
if(paint==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(alpha<0.0||alpha>1.0){
throw new IllegalArgumentException("Requires \'alpha\' in the range 0.0 to 1.0.");
}
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
this.alpha=alpha;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(alpha<0.0||alpha>1.0)throw new IllegalArgumentException("The \'alpha\' value must be in the range 0.0f to 1.0f");
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
if(alpha<0.0||alpha>1.0)throw new IllegalArgumentException("The \'alpha\' value must be in the range 0.0f to 1.0f");
this.alpha=alpha;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=outlinePaint;
this.outlineStroke=outlineStroke;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=outlinePaint;
this.drawAsLine=lineVisible;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlineStroke=outlineStroke;
this.drawAsLine=lineVisible;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
========
this.outlinePaint=outlinePaint;
this.outlineStroke=outlineStroke;
this.drawAsLine=lineVisible;
super(paint,stroke,outlinePaint,outlineStroke,alpha);
this.key=key;
setLabelOffsetType(LengthAdjustmentType.EXPAND);

========
org.jfree.chart.plot.CategoryMarker,72
Find no block!
org.jfree.chart.plot.CategoryMarker,108
org.jfree.chart.plot.CategoryMarker,109
org.jfree.chart.plot.CategoryMarker,110
Find no block!
org.jfree.chart.plot.Marker,490
org.jfree.chart.plot.Marker,493
========
if(adj==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.paint=paint;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.labelOffsetType=adj;
this.paint=paint;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.stroke=stroke;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'stroke\' argument.");
}
this.labelOffsetType=adj;
this.stroke=stroke;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
if(alpha<0.0||alpha>1.0)throw new IllegalArgumentException("The \'alpha\' value must be in the range 0.0f to 1.0f");
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.alpha=alpha;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
if(alpha<0.0||alpha>1.0)throw new IllegalArgumentException("The \'alpha\' value must be in the range 0.0f to 1.0f");
this.alpha=alpha;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'alignment\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'sources\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'edge\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'padding\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'scale\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'line\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'bar\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'area\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires p > 0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires w > 0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires h > 0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'generator\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'type\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'icon\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Negative \'radius\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'value\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'formatter\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.labelFont=font;
notifyListeners(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("Null \'insets\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.labelOffset=insets;
notifyListeners(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("The \'radius\' must be positive.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("The \'increment\' must be positive.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Negative \'length\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("The \'count\' cannot be negative.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'t\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires radius > 0.0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'label\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.label=label;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'label\' argument.");
}
this.labelOffsetType=adj;
this.label=label;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("The \'radius\' cannot be negative.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.labelTextAnchor=anchor;
notifyListeners(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
this.labelOffset=padding;
notifyListeners(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("Null \'first\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'last\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'c\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'arrow\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'range\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'positions\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'position\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'rangeType\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires \'count\' > 0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'type\' argument");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException(""+"The \'radius\' must be positive.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
if(alpha<0.0||alpha>1.0){
throw new IllegalArgumentException("Requires \'alpha\' in the range 0.0 to 1.0.");
}
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
if(alpha<0.0||alpha>1.0){
throw new IllegalArgumentException("Requires \'alpha\' in the range 0.0 to 1.0.");
}
this.alpha=alpha;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Requires 0.0 <= margin < 1.0.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Lower bound must be less than upper bound.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Lower must be less than upper.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj!=null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new NullPointerException("Null \'image\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
setType(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
if(isAutoRange()){
autoAdjustRange();
}
notifyListeners(new MarkerChangeEvent(this));

========
========
notifyListeners(new AxisChangeEvent(this));
if(adj==null){
throw new IllegalArgumentException("Null \'adj\' argument.");
}
this.labelOffsetType=adj;
notifyListeners(new MarkerChangeEvent(this));

========
========
if(adj==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
this.labelOffsetType=adj;
this.labelFont=font;
notifyListeners(new MarkerChangeEvent(this));

========
org.jfree.chart.plot.Marker,494
org.jfree.chart.plot.Marker,495
Find no block!
org.jfree.chart.plot.CategoryPlot,430
org.jfree.chart.plot.CategoryPlot,431
Find no block!
org.jfree.chart.plot.CategoryPlot,899
========
if(parent instanceof CategoryPlot){
rangeAxis=(XYPlot)parent.getRangeAxis();
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}

========
========
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getDomainAxis(index);
}

========
========
if(result==null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getDomainAxis(index);
}
}

========
========
if(axis==null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
========
if(result!=null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(axis!=null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
========
if(yAxis==null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
========
this.index=index;
if(result==null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
========
if(yAxis!=null){
Plot parent=getParent();
if(parent instanceof CategoryPlot){
CategoryPlot cp=(CategoryPlot)parent;
result=cp.getRangeAxis(index);
}
}

========
org.jfree.chart.plot.CategoryPlot,900
org.jfree.chart.event.MarkerChangeEvent,65
org.jfree.chart.event.MarkerChangeEvent,66
org.jfree.chart.event.MarkerChangeEvent,67
Find no block!
org.jfree.chart.plot.Marker,559
========
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).chartChanged(event);
}

========
========
if(listeners[i]!=MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(clone.datasets[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}

========
========
if(listeners[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(listeners[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).setPaint(event);
}

========
========
label+=label.substring(0,i)+label;
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).chartChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=ls.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listenerList.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
invalidateRangeInfo();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]!=MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=listeners.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(clone.datasets[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=listeners.length-2;i>=data.length;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-1;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).setPaint(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(array1[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
start=i+1;
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]!=MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=ls.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listenerList.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]!=MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(clone.datasets[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(clone.datasets[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=data.length;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).setPaint(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
clone.labelInfo=new PeriodAxisLabelInfo[this.labelInfo.length];
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
if(listeners.length==0){
return ;
}
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(array1[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(array1[i]!=array2[i]){
return false;
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(array2[i]==null){
if(array1[i]!=null){
return false;
}
}
if(array1[i]!=array2[i]){
return false;
}

if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-1;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=this.length-Long.toHexString(serialVersionUID).toUpperCase().length();i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
new StringBuffer("0x").append(Long.toHexString(serialVersionUID).toUpperCase());
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(i==label.length()-1){
throw new TimePeriodFormatException("Q found at end of string.");
}
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-1;i>=0;i-=2){
if(getRenderer(i)!=null){
ValueAxis getDomainAxisForDataset(i)=getDomainAxisForDataset(i);
ValueAxis getRangeAxisForDataset(i)=getRangeAxisForDataset(i);
}
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
label+=label.substring(0,i)+label;
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
if(i+label.length()<label.length()){
label+=searchReplace(inputString.substring(i+searchString.length()),searchString,label);
}
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]!=MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]==null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=length;i-=2){
if(listeners[i]!=null){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
if(i>xData.length){
throw new IllegalArgumentException("Period can\'t be longer than dataset.");
}
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
if(data1.length!=data2.length){
throw new IllegalArgumentException("\'data1\' and \'data2\' arrays must have same length.");
}
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
clone.listenerList=new EventListenerList();
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
clone.event=null;
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
Object[] listeners=this.listenerList.getListenerList();
for(int i=listeners.length-2;i>=0;i-=2){
if(listeners[i]==MarkerChangeListener.class){
((MarkerChangeListener)listeners[i+1]).markerChanged(event);
}
}

========
org.jfree.chart.plot.Marker,560
org.jfree.chart.plot.Marker,566
Find no block!
org.jfree.chart.plot.CategoryPlot,447
========
this.domainAxisLocations=new ObjectList();
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.dataset=dataset;
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
========
super();
this.orientation=orientation;
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();

========
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,326
Find no block!
org.jfree.chart.plot.CategoryPlot,333
Find no block!
org.jfree.chart.plot.CategoryPlot,339
Find no block!
org.jfree.chart.plot.CategoryPlot,387
Find no block!
org.jfree.chart.plot.CategoryPlot,449
org.jfree.chart.plot.CategoryPlot,452
========
this.rangeAxes=new ObjectList();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.orientation=orientation;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.orientation=orientation;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=orientation;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
========
this.dataset=dataset;
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,453
========
this.rangeAxisLocations=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.domainAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.domainAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.domainAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,454
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,455
========
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,457
========
this.domainAxisLocations=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,458
========
this.rangeAxes=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();

========
========
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();

========
org.jfree.chart.plot.CategoryPlot,460
========
this.rangeAxisLocations=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
========
this.datasets.set(0,dataset);
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();
this.datasets=new ObjectList();

========
org.jfree.chart.plot.CategoryPlot,462
========
this.datasetToDomainAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new ObjectList();
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxes.set(0,rangeAxis);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if((CategoryItemRenderer)this.renderers.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,renderer);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,DEFAULT_VALUE_LABEL_FONT);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,DEFAULT_VALUE_LABEL_FONT);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
super();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.dataset=dataset;
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,getDataset(weight)));
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());

========
========
this.datasets.set(0,rangeAxis);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(weight,rangeAxis);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
configureDomainAxes();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,domainAxis);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToDomainAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasets.set(0,domainAxis);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToDomainAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,domainAxis);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToDomainAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.mapDatasetToDomainAxis(0,0);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasets.set(0,domainAxis);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(this.dataset!=null){
this.dataset.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).clearRangeMarkers();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setOrientation(orientation);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
(CategoryPlot)ChartFactory.createBarChart("Bar Chart Demo 1","Category","Value",dataset,PlotOrientation.VERTICAL,true,true,false).getPlot().setBackgroundPaint(Color.lightGray);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(this.dataset!=null){
this.dataset.removeChangeListener(this);
}
this.dataset=dataset;
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(this.dataset!=null){
this.dataset.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(this.dataset!=null){
this.dataset.removeChangeListener(this);
}
this.dataset=dataset;
this.datasets.set(0,dataset);

========
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
this.datasets.set(0,dataset);

========
========
this.datasets.set(weight,domainAxis);
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(domainAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
org.jfree.chart.plot.CategoryPlot,463
========
this.datasetToRangeAxisMap=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new ObjectList();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.renderers.set(0,renderer);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToDomainAxisMap=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.dataset=dataset;
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
if(getDataset(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.drawSharedDomainAxis=false;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.drawSharedDomainAxis=false;
this.datasets.set(0,rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.drawSharedDomainAxis=false;
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets.set(weight,rangeAxis);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,renderer);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,renderer);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
new MultiplePiePlot(dataset).setBackgroundPaint(null);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireChangeEvent();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset.getRowCount()==0||dataset.getColumnCount()==0){
return true;
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,DEFAULT_VALUE_LABEL_FONT);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasets=new ObjectList();
this.datasets.set(0,DEFAULT_VALUE_LABEL_FONT);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setColumnRenderingOrder(SortOrder.DESCENDING);
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setOrientation(orientation);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==PlotOrientation.HORIZONTAL){
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setRowRenderingOrder(SortOrder.DESCENDING);
plot.setColumnRenderingOrder(SortOrder.DESCENDING);
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
if(dataset.getValue(weight,weight)!=null){
anchorValue=anchorValue+n.doubleValue();
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).clearRangeMarkers();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).clearRangeMarkers();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireChartChanged();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setOrientation(orientation);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxis=rangeAxis;
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasets=new ObjectList();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=weight){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasets=new ObjectList();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets.set(weight,domainAxis);
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(domainAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets=new ObjectList();
if(renderer!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
org.jfree.chart.plot.CategoryPlot,464
========
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
this.rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
setDatasetGroup(this.dataset.getGroup());
dataset.addChangeListener(this);
}

========
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.CategoryPlot,468
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset==null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
new MultiplePiePlot(dataset).setBackgroundPaint(null);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset.getRowCount()==0||dataset.getColumnCount()==0){
return true;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.annotations=new java.util.ArrayList();
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.renderer.addChangeListener(this);
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
this.rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
setDatasetGroup(this.dataset.getGroup());
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
fireChartChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.rangeAxis=rangeAxis;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(dataset==null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setOrientation(orientation);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(orientation==PlotOrientation.HORIZONTAL){
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setRowRenderingOrder(SortOrder.DESCENDING);
plot.setColumnRenderingOrder(SortOrder.DESCENDING);
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(orientation==PlotOrientation.HORIZONTAL){
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).setColumnRenderingOrder(SortOrder.DESCENDING);
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).clearRangeMarkers();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
new CategoryPlot(dataset,domainAxis,rangeAxis,renderer).clearRangeMarkers();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
========
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
if(dataset!=weight){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);

========
org.jfree.chart.plot.CategoryPlot,470
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.orientation=PlotOrientation.VERTICAL;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.orientation=PlotOrientation.VERTICAL;
this.domainAxisLocations=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.weight=1;
this.domainAxes=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.weight=1;
this.domainAxisLocations=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
Timeout!
TIMEOUT : 4500000
org.jfree.chart.plot.XYPlot,2232
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,2248
========
return removeDomainMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,2265
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(index,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,2285
========
if(layer==Layer.BACKGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(layer==Layer.FOREGROUND){
break;
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
break;
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(domainCrosshairValue<item.value){
return this.rangeGridlinePaint;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(annotations.isEmpty()){
return null;
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==index){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
if(layer==weight){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
========
fireSeriesChanged();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}

========
org.jfree.chart.plot.XYPlot,2286
org.jfree.chart.plot.XYPlot,2293
========
if(removed&&use){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.useOutlinePaint=removed;
fireChangeEvent();
}

========
========
if(removed&&flag){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.baseShapesVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotLines=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotImages=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.plotDiscontinuous=notify;
fireChangeEvent();
}

========
========
if(removed&&visible){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&notify){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&visible){
this.rangeGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.domainCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.domainCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.domainCrosshairLockedOnData=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.rangeCrosshairVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&flag){
this.rangeCrosshairLockedOnData=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.angleGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.radiusGridlinesVisible=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.tickLabelsVisible=notify;
fireChangeEvent();
}

========
========
if(range&&range){
fireChangeEvent();
}

========
========
if((weight>=0)&&(weight<this.quadrantPaint.removed)){
fireChangeEvent();
}

========
========
if((weight>=0)&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&(weight<this.quadrantPaint.removed)){
fireChangeEvent();
}

========
========
if(range&&notify){
fireChangeEvent();
}

========
========
if(removed&&range){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.subrangePaint[range]=DEFAULT_CROSSHAIR_PAINT;
fireChangeEvent();
}

========
========
if(removed&&index){
fireChangeEvent();
}

========
========
fireChangeEvent();
if(removed&&notify){
fireChangeEvent();
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(removed&&notify){
this.autoTickUnitSelection=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}

========
========
if(removed&&auto){
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
fireChangeEvent();
}

========
========
if(removed&&notify){
if(this.notify){
autoAdjustRange();
}
fireChangeEvent();
}

========
========
if(removed&&notify){
this.autoRange=removed;
if(this.notify){
autoAdjustRange();
}

fireChangeEvent();
}

========
========
if(removed&&visible){
this.domainGridlinesVisible=removed;
fireChangeEvent();
}

========
========
ArrayList markers;
if(marker==null){
throw new IllegalArgumentException("Null \'marker\' argument.");
}
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
marker.addChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer!=Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer!=null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.remove(index);
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if((DialPointer)this.annotations.get(index)!=null){
pointer.removeChangeListener(this);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
fireChangeEvent();
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
return (TickUnit)this.annotations.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(removed){
fireChangeEvent();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if((Object[])annotations.get(index+1)[0]==null){
weight=-((Integer)(Object[])annotations.get(index)[0]).intValue();
}else {
series=((Integer)curr[0]).intValue();
if(series<0){
series=-((Integer)prev[0]).intValue();
}
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=row.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
double removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(!Arrays.equals((double[][])this.annotations.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
if(!Arrays.equals((double[][])this.annotations.get(index)[1],(double[][])that.seriesList.get(index)[1])){
return false;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if((List)this.backgroundDomainMarkers.get(new Integer(index))==null){
labelList=new java.util.ArrayList();
this.backgroundDomainMarkers.put(new Integer(index),labelList);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return result;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
notifyListeners(new RendererChangeEvent(this));
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
this.rangeCrosshairLockedOnData=false;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeCrosshairLockedOnData=this.rangeCrosshairLockedOnData;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeCrosshairLockedOnData=this.rangeCrosshairLockedOnData;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
this.rangeCrosshairLockedOnData=false;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint((Comparable)annotations.get(index),true);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
rangeGridlinePaint=lookupSectionOutlinePaint((Comparable)annotations.get(index));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
rangeCrosshairStroke=lookupSectionOutlineStroke((Comparable)annotations.get(index));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData||this.notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!rangeCrosshairLockedOnData&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&this.notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(includeInterval&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(annotations.isEmpty()){
return null;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.get(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((Number)this.rangeAxisLocations.get(weight)!=null){
domainCrosshairValue=n.doubleValue();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((List)this.markers.get(weight)!=null){
weight=urls.size();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if(foregroundDomainMarkers!=null){
weight=urlMap.size();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
if((List)this.annotations.get(weight)!=null){
weight=tooltips.size();
}
return removed;

========
========
if((BoxAndWhiskerItem)this.annotations.get(weight)!=null){
annotations=stats.getOutliers();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.remove(index);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
fireSeriesChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
fireSeriesChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(index);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==index){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(column&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
return (KeyedObjects)this.annotations.get(weight).getObject(index);
}else {
return null;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==notify){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(count&&notify){
fireChangeEvent();
}
return removed;

========
========
if(domainCrosshairValue<item.value){
return this.rangeGridlinePaint;
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((weight<0)||(seriesIndex>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return VALUE_ANTIALIAS_ON;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((weight<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(weight<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
if(this.rangeCrosshairLockedOnData){
return (SimpleHistogramBin)this.annotations.get(weight).getItemCount()/(bin.getUpperBound()-bin.getLowerBound());
}else {
return bin.getItemCount();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((domainCrosshairValue-s.width)/2.0,0.0,s.width,s.height));
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==PlotOrientation.HORIZONTAL){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&use){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.useOutlinePaint=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.baseShapesVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotLines=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotImages=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.plotDiscontinuous=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.rangeGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.domainCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.domainCrosshairLockedOnData=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.domainCrosshairLockedOnData=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.rangeCrosshairLockedOnData=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&flag){
this.rangeCrosshairLockedOnData=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleLabelsVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.angleGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.radiusGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.tickLabelsVisible=rangeCrosshairLockedOnData;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(getRenderer(index)==null){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(index>=getDatasetCount()){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(getRenderer(index)==null){
return ;
}
if(index>=getDatasetCount()){
return ;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(!notify||notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(flag&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(VALUE_ANTIALIAS_OFF&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&VALUE_ANTIALIAS_ON){
fireChangeEvent();
}
return removed;

========
========
fireChartChanged();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(!notify||notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.get(marker);
if(removed&&flag){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&ORIENTATION_VERTICAL){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
int removed=markers.remove(marker);
if(index&&notify){
fireChangeEvent();
}
return removed;

========
========
if(index>=0){
this.annotations.set(index,new PaintItem(domainCrosshairValue,DEFAULT_CROSSHAIR_PAINT));
}else {
this.lookupTable.add(-(index+1),item);
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
invalidateRangeInfo();
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return foundData;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
removed=true;
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==weight){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.add(layer);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
layer.addChangeListener(this);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.annotations.add(layer);
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.add(layer);
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.annotations.add(layer);
fireChangeEvent();
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.notify=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoTickUnitSelection=notify;
fireChangeEvent();
}
return removed;

========
========
if(this.foregroundDomainMarkers!=null){
Set this.foregroundDomainMarkers.keySet()=this.foregroundRangeMarkers.keySet();
Iterator this.foregroundDomainMarkers.keySet().iterator()=keys.iterator();
while(iterator.hasNext()){
Integer (Integer)this.foregroundDomainMarkers.keySet().iterator().next()=(Integer)iterator.next();
clearRangeMarkers(key.intValue());
}
this.foregroundRangeMarkers.clear();
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&auto){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
this.autoRange=notify;
if(this.rangeCrosshairLockedOnData){
autoAdjustRange();
}

fireChangeEvent();
}
return removed;

========
========
if(!false){
throw new RuntimeException("No bin.");
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(notify){
notifyListeners(new DatasetChangeEvent(this,this));
}
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
long removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
domainCrosshairValue=direction%360;
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
if(domainCrosshairValue<0.0){
direction=direction+360.0;
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&visible){
this.domainGridlinesVisible=notify;
fireChangeEvent();
}
return removed;

========
========
if(this.foregroundDomainMarkers!=null){
Set this.foregroundDomainMarkers.keySet()=this.foregroundRangeMarkers.keySet();
Iterator this.foregroundDomainMarkers.keySet().iterator()=keys.iterator();
while(iterator.hasNext()){
Integer (Integer)this.foregroundDomainMarkers.keySet().iterator().next()=(Integer)iterator.next();
clearRangeMarkers(key.intValue());
}
this.foregroundRangeMarkers.clear();
}
fireChangeEvent();
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return black;

========
========
this.notify=true;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.removed=false;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeCrosshairStroke=new BasicStroke(1.0);
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
========
this.rangeGridlinePaint=Color.black;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==Layer.FOREGROUND){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeGridlinePaint=Color.black;
this.axisOffset=RectangleInsets.ZERO_INSETS;
ArrayList markers;
if(layer==null){
markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));
}
boolean removed=markers.remove(marker);
if(removed&&notify){
fireChangeEvent();
}
return removed;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,501
org.jfree.chart.plot.XYPlot,502
Find no block!
org.jfree.chart.plot.Marker,144
org.jfree.chart.plot.Marker,145
Find no block!
org.jfree.chart.plot.Marker,153
org.jfree.chart.plot.Marker,155
Find no block!
org.jfree.chart.plot.ValueMarker,68
========
notifyListeners(new MarkerChangeEvent(this));
super();
this.value=value;

========
========
super();
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.value=value;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
notifyListeners(new AxisChangeEvent(this));
super();
this.value=value;

========
========
super();
this.value=lclip;

========
========
super();
this.value=uclip;

========
========
super();
this.value=angle1;

========
========
super();
this.value=total;

========
========
super();
this.value=min;

========
========
super();
this.value=max;

========
========
super();
this.value=negative;

========
========
super();
this.value=maxX;

========
========
super();
this.value=axisMin;

========
========
super();
this.value=axisMax;

========
========
super();
this.value=minX;

========
========
super();
this.value=minY;

========
========
super();
this.value=maxY;

========
org.jfree.chart.plot.ValueMarker,69
org.jfree.chart.plot.ValueMarker,70
Find no block!
org.jfree.chart.plot.XYPlot,520
========
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
this.domainAxes=new ObjectList();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
this.dataset=dataset;
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.domainAxes=new ObjectList();
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
super();
this.orientation=orientation;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
super();
this.orientation=orientation;
this.weight=1;

========
========
fireChangeEvent();
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
fireChangeEvent();
super();
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;

========
========
configureRangeAxes();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
fireChangeEvent();
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
========
if(getDomainAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(getRangeAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;

========
========
if(getDomainAxis()!=null){
axis.configure();
}
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=weight;

========
org.jfree.chart.plot.XYPlot,345
Find no block!
org.jfree.chart.plot.XYPlot,348
Find no block!
org.jfree.chart.plot.XYPlot,419
Find no block!
org.jfree.chart.plot.XYPlot,437
Find no block!
org.jfree.chart.plot.XYPlot,474
Find no block!
org.jfree.chart.plot.XYPlot,481
Find no block!
org.jfree.chart.plot.XYPlot,522
org.jfree.chart.plot.XYPlot,523
========
super();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
========
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
fireChangeEvent();
this.orientation=orientation;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.dataset=dataset;
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
super();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);

========
org.jfree.chart.plot.XYPlot,524
========
super();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
this.orientation=PlotOrientation.VERTICAL;
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.weight=1;
super();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
this.rangeAxes=new ObjectList();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.weight=1;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
configureRangeAxes();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
configureRangeAxes();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
configureRangeAxes();
fireChangeEvent();
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
configureRangeAxes();
fireChangeEvent();
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(getDomainAxis()!=null){
axis.configure();
}
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
if(getRangeAxis()!=null){
axis.configure();
}
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
========
if(getDomainAxis()!=null){
axis.configure();
}
this.weight=weight;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();

========
org.jfree.chart.plot.XYPlot,527
========
this.weight=1;
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.weight=1;
this.foregroundDomainMarkers=new HashMap();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
super();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
========
this.rangeAxes=new ObjectList();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.axisOffset=new RectangleInsets(4.0,4.0,4.0,4.0);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,528
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
super();
this.foregroundDomainMarkers=new HashMap();

========
========
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;
this.domainAxes=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,529
========
this.domainAxisLocations=new ObjectList();
this.rangeGridlinePaint=DEFAULT_GRIDLINE_PAINT;
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeGridlinePaint=DEFAULT_GRIDLINE_PAINT;
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.rangeAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,530
========
this.foregroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
========
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.foregroundDomainMarkers=new HashMap();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,532
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();

========
org.jfree.chart.plot.XYPlot,533
========
this.domainAxes=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxes=new ObjectList();
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();

========
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();

========
========
clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
========
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxes=new ObjectList();
if(domainAxis!=null){
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
}
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
org.jfree.chart.plot.XYPlot,534
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundDomainMarkers=new HashMap();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundDomainMarkers=new HashMap();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainAxisLocations=new ObjectList();
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
this.rangeAxisLocations=new ObjectList();
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
========
clone.datasets=(ObjectList)this.datasets.clone();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();

========
org.jfree.chart.plot.XYPlot,535
========
this.rangeAxes=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes=new ObjectList();
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.foregroundDomainMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.datasets=(ObjectList)this.datasets.clone();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();

========
org.jfree.chart.plot.XYPlot,537
========
this.rangeAxisLocations=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
addRangeMarker(new ValueMarker(0.0,new Color(0.8,0.8,0.8,0.5),new BasicStroke(1.0),new Color(0.85,0.85,0.95,0.5),new BasicStroke(1.0),0.6),Layer.BACKGROUND);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();

========
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();

========
org.jfree.chart.plot.XYPlot,538
========
this.datasets=new ObjectList();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.foregroundRangeMarkers=new HashMap();
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.setDataset(dataset);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();

========
org.jfree.chart.plot.XYPlot,540
========
this.backgroundRangeMarkers=new HashMap();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.backgroundRangeMarkers=new HashMap();
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
========
this.datasets.set(0,dataset);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(this.fixedDomainAxisSpace!=null){
clone.fixedDomainAxisSpace=(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);
}
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();

========
org.jfree.chart.plot.XYPlot,541
========
this.datasets=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets=new ObjectList();
this.renderers=new ObjectList();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
clone.renderers=(ObjectList)ObjectUtilities.clone(this.renderers);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxes.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxes.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.datasets.set(0,renderer);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
datasetChanged(new DatasetChangeEvent(this,getDataset(weight)));
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());

========
========
this.datasets.set(0,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.mapDatasetToRangeAxis(0,0);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(weight,rangeAxis);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
if(renderer!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);

========
========
this.datasets.set(0,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
rangeAxis.setAxisLineVisible(false);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
configureDomainAxes();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,renderer);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
datasetChanged(new DatasetChangeEvent(this,this.dataset));
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasetToDomainAxisMap.put(new Integer(weight),new Integer(weight));
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasetToRangeAxisMap.put(new Integer(weight),new Integer(weight));
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
(XYPlot)ChartFactory.createTimeSeriesChart("Legal & General Unit Trust Prices","Date","Price Per Unit",dataset,true,true,false).getPlot().setBackgroundPaint(Color.lightGray);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
if(dataset==null){
throw new IllegalArgumentException("Null \'dataset\' argument.");
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.dataset=dataset;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.datasetToDomainAxisMap=new TreeMap();
this.rangeCrosshairLockedOnData=autoWidth;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
========
this.domainCrosshairValue=1.0;
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=1.0;
this.datasetToDomainAxisMap=new TreeMap();
if(dataset==null){
throw new IllegalArgumentException("Null \'dataset\' argument.");
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?y1:dataset.getYValue(weight,weight-1);
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);

========
org.jfree.chart.plot.XYPlot,543
========
this.datasetToDomainAxisMap=new TreeMap();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.renderers.set(0,renderer);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToDomainAxisMap=new TreeMap();
this.renderers.set(0,renderer);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
super();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if(getDataset(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(existing!=null){
existing.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(existing!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
existing.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.dataset=dataset;
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
this.mapDatasetToRangeAxis(0,0);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.renderers=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.renderers=new ObjectList();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
this.datasets.set(0,rangeAxis);
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasets.set(weight,rangeAxis);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasets.set(weight,rangeAxis);
if(rangeAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if(renderer!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,renderer);
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if((ValueDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if((CategoryDataset)this.datasets.get(weight)!=null){
existing.removeChangeListener(this);
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,(ValueAxis)rangeAxis.clone());
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.annotations=new java.util.ArrayList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(d!=null){
d.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(d!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
d.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
clone.renderers=(ObjectList)ObjectUtilities.clone(this.renderers);
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.domainCrosshairValue=0.5;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireChartChanged();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxis=rangeAxis;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
this.datasetToRangeAxisMap=new TreeMap();
if(rangeAxis==null){
throw new IllegalArgumentException("Null \'axis\' argument.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?y1:dataset.getYValue(weight,weight-1);
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=domainCrosshairValue;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
domainCrosshairValue=Double.isNaN(domainCrosshairValue)?getRangeBase():y0;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
domainCrosshairValue=dataset.getXValue(weight,weight-1);
domainCrosshairValue=domainCrosshairValue;
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxisLocations=new ObjectList();
this.datasetToRangeAxisMap=new TreeMap();
this.datasets=new ObjectList();
this.datasets.set(0,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.datasetToRangeAxisMap=new TreeMap();
this.datasets.set(0,dataset);
if(dataset!=null){
uvalue=(IntervalXYDataset)dataset.getEndYValue(weight,weight);
dataset.addChangeListener(this);
}

========
org.jfree.chart.plot.XYPlot,544
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(d!=null){
d.addChangeListener(this);
}

========
========
if(d!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
d.addChangeListener(this);
}

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(existing!=null){
existing.addChangeListener(this);
}

========
========
if(existing!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
existing.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(this.dataset!=null){
setDatasetGroup(this.dataset.getGroup());
this.dataset.addChangeListener(this);
}
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
this.renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
this.rangeAxis.addChangeListener(this);
dataset.addChangeListener(this);
}

========
========
if(dataset==null){
return null;
}
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.draw(this);
}

========
========
if(dataset!=null){
renderer.addChangeListener(this);
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
uvalue=(IntervalXYDataset)dataset.getEndYValue(weight,weight);
dataset.addChangeListener(this);
}

========
org.jfree.chart.plot.XYPlot,548
========
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxis.removeChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxis=rangeAxis;
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(renderer!=null){
this.rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer!=null){
setDatasetGroup(this.dataset.getGroup());
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(renderer!=null){
setDatasetGroup(dataset.getGroup());
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(this.dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(this.renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(d!=null){
d.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(d!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
d.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(clone.dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
this.datasets[0]=dataset;
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
this.renderers.set(0,rangeAxis);
if(renderer!=null){
rangeAxis.addChangeListener(this);
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeAxis=rangeAxis;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setPlot(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
fireChangeEvent();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer==null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(existing!=null){
existing.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(existing!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
existing.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
this.dataset=dataset;
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
datasetChanged(new DatasetChangeEvent(this,this.dataset));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYURLGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChangeEvent();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
fireChartChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireDatasetChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYZURLGenerator());
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(weight<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
fireChartChanged();
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.domainGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.rangeGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainGridlinesVisible=false;
this.rangeGridlinesVisible=false;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(dataset!=null){
dataset.addChangeListener(this);
}
if(rangeCrosshairLockedOnData){
renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardXYURLGenerator());
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
fireChangeEvent();
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(getPlot()==null){
return null;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new RendererChangeEvent(this));
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
if(dataset!=null){
dataset.draw(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setAxisLineVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickMarksVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
new PolarPlot().setRenderer(new DefaultPolarItemRenderer());
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickMarksVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
rangeAxis.setAxisLineVisible(false);
rangeAxis.setTickMarksVisible(false);
rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));
new PolarPlot().setAxis(rangeAxis);
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
if(Double.isNaN(dataset.getYValue(weight,weight))){
y1=0.0;
}
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
new Object[3][0]=dataset.getSeriesKey(weight).toString();
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.dataset=dataset;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.rangeCrosshairLockedOnData=autoWidth;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
========
this.domainCrosshairValue=0.5;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=1.0;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
this.domainCrosshairValue=1.0;
if(dataset!=null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=Double.POSITIVE_INFINITY;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
========
this.domainCrosshairValue=0.5;
this.domainCrosshairValue=1.0;
if(dataset==null){
dataset.addChangeListener(this);
}
this.renderers.set(0,renderer);
if(renderer!=null){
renderer.setPlot(this);
renderer.addChangeListener(this);
}

========
TESTING : org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
Timeout!
TIMEOUT : 4500000
org.jfree.chart.plot.CategoryPlot,2378
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.CategoryPlot,2396
========
return removeRangeMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(weight,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.CategoryPlot,2415
========
return removeRangeMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeRangeMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(index,marker,layer,true);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(0,marker,layer);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
return removeDomainMarker(marker,Layer.FOREGROUND);

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
org.jfree.chart.plot.CategoryPlot,2436
========
if(marker==null){
throw new IllegalArgumentException("Null \'marker\' not permitted.");
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
========
if(marker==Layer.BACKGROUND){
throw new IllegalArgumentException("Null \'marker\' argument.");
}

========
org.jfree.chart.plot.CategoryPlot,2440
========
if(layer==Layer.BACKGROUND){
markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));
}else {
markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));
}

========
TESTING : org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
TESTING : chart_14
Successfully repair!

real	233m57.629s
user	286m48.883s
sys	86m16.772s
