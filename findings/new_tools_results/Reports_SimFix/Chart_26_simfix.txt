/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_26	start : 20/11/23 20:21

TIMEOUT : 18000000
org.jfree.chart.plot.CategoryPlot,2547
org.jfree.chart.plot.Plot,1385
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(orientation==null){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){

result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.RIGHT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.BOTTOM;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.BOTTOM;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.RIGHT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(location==null){
throw new IllegalArgumentException("Null \'location\' argument.");
}
if(orientation==null){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(this.orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.LEFT;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(!this.noDataMessage.equals(orientation.toString())){
return false;
}
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==this.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
yy=DEFAULT_FOREGROUND_ALPHA;
result=RectangleEdge.LEFT;
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(orientation!=that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==that.orientation){
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
hZoom=this.outlineVisible;
result=RectangleEdge.TOP;
}else if(orientation==PlotOrientation.VERTICAL){
result=RectangleEdge.LEFT;
}

========
org.jfree.chart.plot.CategoryPlot,708
org.jfree.chart.plot.CategoryPlot,721
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(item<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(index<this.domainAxisLocations.size()){
break;
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(high<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(index<getListCount()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(mapIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(index<this.annotations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(JANUARY<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(row<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(subplotIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(startIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.domainAxisLocations.set(index,result);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(index,result);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(count<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(anchorValue>this.anchorValue){
return this.rangeGridlinePaint;
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(binIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(HistogramBin)annotations.get(index).incrementCount();
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(index<=this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(index<=this.annotations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(position<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(rowIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(seen<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(result==null){
result=getTickLabelFont();
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(result==null){
result=getTickLabelPaint();
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(keyIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(y<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
if(fieldIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
fireDatasetChanged();
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
fireDatasetChanged();
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
========
fireSeriesChanged();
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}

========
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
AxisLocation result=null;
if(item<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(row<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(tempWeek<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
this.year=(short)weight;
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result!=null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if(annotations!=null){
result=urls.size();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if(foregroundRangeMarkers!=null){
result=urlMap.size();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((List)this.annotations.get(index)!=null){
result=tooltips.size();
}
return result;

========
========
AxisLocation result=null;
if(count<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(high<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
if(result==null){
result=getRenderer();
}
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
break;
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
if(result==null){
result=getRenderer();
}
break;

result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=item.getKey();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
this.domainAxisLocations.set(index,result);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((Integer)this.domainAxisLocations.get(index)!=null){
result=getDomainAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((Integer)this.domainAxisLocations.get(index)!=null){
result=getRangeAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if(getDomainAxisLocation(index)!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(annotations.isEmpty()){
return null;
}
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(subplotIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(startIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=kval.getValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMean();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMedian();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getQ1();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getQ3();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMinRegularValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMaxRegularValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMinOutlier();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMaxOutlier();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getOutliers();
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
if((Number)this.domainAxisLocations.get(index)!=null){
result=n.doubleValue();
}
return result;

========
========
AxisLocation result=null;
if(binIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(HistogramBin)annotations.get(index).incrementCount();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return VALUE_ANTIALIAS_ON;

========
========
AxisLocation result=null;
if(y<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<=this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<=this.annotations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.annotations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(position<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
notifyListeners(new PlotChangeEvent(this));
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(rowIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
fireSeriesChanged();
return result;

========
========
this.domainAxisLocations.set(index,result);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(keyIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
if(true){
this.annotations.remove(weight);
this.annotations.remove(rowIndex);
}
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
fireChartChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(seen<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(valuesPerColor<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
fireDatasetChanged();
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
fireDatasetChanged();
AxisLocation result=null;
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(seriesIndex<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
this.weight=Math.max(this.size,index+1);
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
fireSeriesChanged();
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
result.height=calculateTotalHeight(size.height);
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
result.width=calculateTotalWidth(size.width);
return result;

========
========
AxisLocation result=null;
if(index<this.domainAxisLocations.size()){
result=(AxisLocation)this.domainAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getDomainAxisLocation(0));
}
result=(String[])this.annotations.toArray(result);
return result;

========
org.jfree.chart.plot.CategoryPlot,722
org.jfree.chart.plot.CategoryPlot,723
org.jfree.chart.plot.CategoryPlot,725
org.jfree.chart.plot.CategoryPlot,728
org.jfree.chart.plot.CategoryPlot,815
========
if(location==null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==null){
throw new IllegalArgumentException("Null \'orientation\' argument.");
}
if(location==null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new TitleChangeEvent(this));
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
========
this.domainAxisLocations.set(index,location);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(index,location);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,location);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,location);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(location==AxisLocation.TOP_OR_LEFT){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(location!=AxisLocation.TOP_OR_LEFT){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result==null){
result=RectangleEdge.opposite(getDomainAxisEdge());
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getRangeAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getRangeAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge());
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getRangeAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge());
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(index,location);
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,location);
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location==null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new TitleChangeEvent(this));
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(index>=0&&item<this.annotations.size()){
KeyedObject (KeyedObject)this.annotations.get(index)=(KeyedObject)this.data.get(item);
if(kobj!=null){
result=kobj.getObject();
}
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(this.equals(RectangleEdge.TOP)){
result=RectangleEdge.TOP;
}else if(this.equals(RectangleEdge.BOTTOM)){
result=RectangleEdge.BOTTOM;
}else if(this.equals(RectangleEdge.LEFT)){
result=RectangleEdge.LEFT;
}else if(this.equals(RectangleEdge.RIGHT)){
result=RectangleEdge.RIGHT;
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null||getURL()!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location==AxisLocation.TOP_OR_RIGHT){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=AxisLocation.TOP_OR_RIGHT){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=item.getKey();
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=ORIENTATION_VERTICAL){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
if(Double.isNaN(anchorValue)){
y2=0.0;
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if((Integer)this.datasetToDomainAxisMap.get(index)!=null){
result=getDomainAxis(axisIndex.intValue());
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if((Integer)this.datasetToRangeAxisMap.get(index)!=null){
result=getRangeAxis(axisIndex.intValue());
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
fireSeriesChanged();
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=-1){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
if(result!=null){
result=Collections.unmodifiableCollection(result);
}
return result;

========
========
if(DEFAULT_CROSSHAIR_PAINT==null){
paint=CategoryPlot.DEFAULT_GRIDLINE_PAINT;
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index \'index\' out of bounds.");
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.index=Math.max(this.size,index+1);
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(getRenderer(index)==null){
return ;
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location==-1){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(index>=getDatasetCount()){
return ;
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(getRenderer(index)==null){
return ;
}
if(index>=getDatasetCount()){
return ;
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=PlotOrientation.HORIZONTAL){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
if(getMargin()>0.0){
double anchorValue*getMargin()=anchorValue*getMargin();
translatedWidth=translatedWidth-cut;
location=translatedStartX+cut/2;
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location==PlotOrientation.HORIZONTAL){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
this.index=Math.max(this.size,index+1);
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(index<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
this.domainAxisLocations.set(index,location);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
this.rangeAxisLocations.set(index,location);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
RectangleEdge result=null;
AxisLocation location=getDomainAxisLocation(index);
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
org.jfree.chart.plot.CategoryPlot,816
org.jfree.chart.plot.CategoryPlot,817
org.jfree.chart.plot.CategoryPlot,818
org.jfree.chart.plot.CategoryPlot,823
org.jfree.chart.plot.CategoryPlot,976
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(item<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(index<this.rangeAxisLocations.size()){
break;
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(high<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(index<getListCount()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(mapIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(index<this.annotations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(JANUARY<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(row<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(subplotIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(startIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.rangeAxisLocations.set(index,result);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,result);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(count<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(anchorValue>this.anchorValue){
return this.rangeGridlinePaint;
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(binIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(HistogramBin)annotations.get(index).incrementCount();
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(index<=this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(index<=this.annotations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(position<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(rowIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(seen<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(result==null){
result=getTickLabelFont();
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(result==null){
result=getTickLabelPaint();
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(keyIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(y<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
if(fieldIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
fireDatasetChanged();
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
fireDatasetChanged();
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
this.annotations.remove(index);
fireDatasetChanged();
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
========
fireSeriesChanged();
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}

========
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
AxisLocation result=null;
if(item<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(row<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(tempWeek<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
this.year=(short)weight;
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result!=null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if(annotations!=null){
result=urls.size();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if(foregroundRangeMarkers!=null){
result=urlMap.size();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((List)this.annotations.get(index)!=null){
result=tooltips.size();
}
return result;

========
========
AxisLocation result=null;
if(count<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(high<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
if(result==null){
result=getRenderer();
}
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
break;
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
if(result==null){
result=getRenderer();
}
break;

result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=item.getKey();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
this.rangeAxisLocations.set(index,result);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((Integer)this.rangeAxisLocations.get(index)!=null){
result=getDomainAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((Integer)this.rangeAxisLocations.get(index)!=null){
result=getRangeAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(annotations.isEmpty()){
return null;
}
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(subplotIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(startIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=kval.getValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMean();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMedian();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getQ1();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getQ3();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMinRegularValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMaxRegularValue();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMinOutlier();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getMaxOutlier();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((BoxAndWhiskerItem)this.annotations.get(index)!=null){
result=stats.getOutliers();
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if((Number)this.rangeAxisLocations.get(index)!=null){
result=n.doubleValue();
}
return result;

========
========
AxisLocation result=null;
if(binIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(HistogramBin)annotations.get(index).incrementCount();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return VALUE_ANTIALIAS_ON;

========
========
AxisLocation result=null;
if(y<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<=this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<=this.annotations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(index<this.annotations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(position<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
notifyListeners(new PlotChangeEvent(this));
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation result=null;
if(rowIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
fireSeriesChanged();
return result;

========
========
this.rangeAxisLocations.set(index,result);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
if(getDomainAxisLocation(index)!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
========
AxisLocation result=null;
if(keyIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
if(true){
this.annotations.remove(weight);
this.annotations.remove(rowIndex);
}
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
fireChartChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(seen<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(valuesPerColor<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
fireDatasetChanged();
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(XYSeries)this.annotations.get(index).removeChangeListener(this);
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(series<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(MatrixSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
AxisLocation result=null;
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
fireDatasetChanged();
AxisLocation result=null;
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.annotations.remove(index);
fireDatasetChanged();
AxisLocation result=null;
if(seriesIndex<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
(TaskSeries)this.annotations.get(index).removeChangeListener(this);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
this.weight=Math.max(this.size,index+1);
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
fireSeriesChanged();
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
result.height=calculateTotalHeight(size.height);
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
result.width=calculateTotalWidth(size.width);
return result;

========
========
AxisLocation result=null;
if(index<this.rangeAxisLocations.size()){
result=(AxisLocation)this.rangeAxisLocations.get(index);
}
if(result==null){
result=AxisLocation.getOpposite(getRangeAxisLocation(0));
}
result=(String[])this.annotations.toArray(result);
return result;

========
org.jfree.chart.plot.CategoryPlot,977
org.jfree.chart.plot.CategoryPlot,978
org.jfree.chart.plot.CategoryPlot,980
org.jfree.chart.plot.CategoryPlot,983
org.jfree.chart.plot.CategoryPlot,1067
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
AxisLocation location=getDomainAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getDomainAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(location!=null){
result=Plot.resolveDomainAxisLocation(location,this.orientation);
}else {
result=RectangleEdge.opposite(getDomainAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
if(this.orientation==PlotOrientation.HORIZONTAL){
anchorValue=weight;
}else if(this.orientation==PlotOrientation.VERTICAL){
java2D=weight;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if((KeyedObjects)this.annotations.get(weight)!=null){
Comparable (Comparable)this.annotations.get(index)=(Comparable)this.annotations.get(index);
if(columnKey!=null){
result=rowData.getObject(columnKey);
}
}
return result;

========
========
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue=anchorValue;
j2DX=anchorValue;
j2DY=temp;
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)){
y2=0.0;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
return ;
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(calculateBarL0L1(anchorValue)==null){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
setFixedDomainAxisSpaceForSubplots(fixedRangeAxisSpace);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
domainGridlinesVisible=false;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)){
y1=0.0;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)){
y1=0.0;
rangeCrosshairLockedOnData=true;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(Double.isNaN(anchorValue)){
y0=0.0;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
fireSeriesChanged();
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if((Integer)this.datasetToDomainAxisMap.get(index)!=null){
result=getDomainAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if((Integer)this.datasetToRangeAxisMap.get(index)!=null){
result=getRangeAxis(axisIndex.intValue());
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if((KeyedValue)this.annotations.get(index)!=null){
result=item.getKey();
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(weight<0){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
if(index==ORIENTATION_VERTICAL){
this.orientation=PlotOrientation.VERTICAL;
}else {
this.plotOrientation=PlotOrientation.HORIZONTAL;
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
if(index>=0){
result=(TextLine)this.annotations.get(index);
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
if(result==null){
return rangeCrosshairLockedOnData;
}
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
rangeCrosshairLockedOnData=true;
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(index>=0){
return (TickUnit)this.annotations.get(index);
}else {
index=-(index+1);
return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size()-1));
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
if(index>=0){
result=getSeries(index);
}
return result;

========
========
if(index>=0){
this.annotations.set(index,new PaintItem(anchorValue,DEFAULT_CROSSHAIR_PAINT));
}else {
this.lookupTable.add(-(index+1),item);
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
if(index>=0){
index=index+1;
}else {
index=-index;
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result!=null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisLocation location=getRangeAxisLocation(index);
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index \'index\' out of bounds.");
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if((Integer)this.datasetToDomainAxisMap.get(new Integer(index))!=null){
result=getDomainAxis(axisIndex.intValue());
}else {
valueAxis=getDomainAxis(0);
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
if((Integer)this.datasetToRangeAxisMap.get(new Integer(index))!=null){
result=getRangeAxis(axisIndex.intValue());
}else {
valueAxis=getRangeAxis(0);
}
AxisLocation location=getRangeAxisLocation(index);
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(getRenderer(index)==null){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(!getItemVisible(weight,index)){
return ;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(anchorValue>0.0){
double anchorValue*getMargin()=anchorValue*getMargin();
intervalW=intervalW-cut;
anchorValue=baseX+(cut/2);
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
anchorValue=direction%360;
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
========
AxisLocation location=getRangeAxisLocation(index);
if(anchorValue<0.0){
direction=direction+360.0;
}
RectangleEdge result=Plot.resolveRangeAxisLocation(location,this.orientation);
if(result==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
return result;

========
org.jfree.chart.plot.CategoryPlot,1068
org.jfree.chart.plot.CategoryPlot,1070
org.jfree.chart.plot.CategoryPlot,1073
org.jfree.chart.plot.CategoryPlot,1727
UNKNOWN ASTNode type : catch (NoSuchMethodException e) {
  result=object;
}

========
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(item!=-1){
result.add(item);
}

========
========
if(this.item!=null){
result.add(item);
}

========
========
if(item!=null){
this.annotations.add(item);
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(item!=null){
result.setEntityCollection(new StandardEntityCollection());
result.add(item);
}

========
========
this.annotations.add(weight,item);
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
item.addChangeListener(this);
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(weight,item);
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(this.annotations);
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(this.annotations);
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
Collections.sort(this.annotations);
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
Collections.sort(this.annotations);
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
item.addChangeListener(this);
if(item==null){
result.add(item);
}

========
========
this.annotations.add(item);
item.addChangeListener(this);
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(item);
item.addChangeListener(this);
if(item==null){
result.add(item);
}

========
========
this.annotations.add(new OptionalLibraryHolder(item));
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(new OptionalLibraryHolder(item));
if(item==null){
result.add(item);
}

========
========
fireSeriesChanged();
if(item!=null){
result.add(item);
}

========
========
if(item!=null){
result=new BlockResult();
result.add(item);
}

========
========
fireChartChanged();
if(item!=null){
result.add(item);
}

========
========
fireDatasetChanged();
if(item!=null){
result.add(item);
}

========
========
fireDatasetChanged();
if(item==null){
result.add(item);
}

========
========
this.annotations.add(item);
fireDatasetChanged();
if(item!=null){
result.add(item);
}

========
========
item.addChangeListener(this);
fireDatasetChanged();
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(item);
fireDatasetChanged();
if(item==null){
result.add(item);
}

========
========
item.addChangeListener(this);
fireDatasetChanged();
if(item==null){
result.add(item);
}

========
========
this.annotations.add(item);
item.addChangeListener(this);
fireDatasetChanged();
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(item);
item.addChangeListener(this);
fireDatasetChanged();
if(item==null){
result.add(item);
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
notifyListeners(new PlotChangeEvent(this));
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
notifyListeners(new PlotChangeEvent(this));
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.notifyListeners(new PlotChangeEvent(this));
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.notifyListeners(new PlotChangeEvent(this));
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
this.notifyListeners(new PlotChangeEvent(this));
if(item!=null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
this.notifyListeners(new PlotChangeEvent(this));
if(item==null){
result.add(item);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new AxisChangeEvent(this));
if(item!=null){
result.add(item);
}

========
========
updateBounds(item.getPeriod(),this.annotations.size()-1);
if(item!=null){
result.add(item);
}

========
========
fireSeriesChanged();
if(item==null){
result.add(item);
}

========
========
this.annotations.add(item);
fireSeriesChanged();
if(item!=null){
result.add(item);
}

========
========
this.annotations.add(item);
fireSeriesChanged();
if(item==null){
result.add(item);
}

========
========
if(item==-1){
result.add(item);
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
result.add(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item=posBase+seriesCount;
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
result.add(new Object[]{new Integer(datasetIndex),new Double(item)});
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<weight;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<seriesCount;i++){
if((Integer)this.datasetToDomainAxisMap.get(new Integer(i))==null){
if(datasetIndex.equals(ZERO)){
result.add(this.datasets.get(i));
}
}else {
if((Integer)this.datasetToDomainAxisMap.get(new Integer(i)).equals(datasetIndex)){
result.add(this.datasets.get(i));
}
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if((Integer)this.datasetToRangeAxisMap.get(new Integer(i))==null){
if(datasetIndex.equals(ZERO)){
result.add(this.datasets.get(i));
}
}else {
if((Integer)this.datasetToRangeAxisMap.get(new Integer(i)).equals(datasetIndex)){
result.add(this.datasets.get(i));
}
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.substring(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
result.add(datasetIndex,i);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<categoryKeys.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=-1){
result.add(item);
}
}

========
========
for(int i=0;i<array1.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<s1.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
clone.data=new java.util.ArrayList(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(item);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<this.datasets.seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
result.add(this.datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<this.seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if((ComparableObjectItem)this.annotations.get(i).getComparable().equals(datasetIndex)){
return i;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if((XYDataItem)this.annotations.get(i).getX().equals(datasetIndex)){
return i;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=seriesCount;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<seriesCount;i++){
if((ChartEntity)this.annotations.get(i).getArea().contains(datasetIndex,anchorValue)){
return (ChartEntity)this.annotations.get(i);
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if((TaskSeries)this.annotations.get(i).getKey().equals(datasetIndex)){
result=i;
break;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if((Task)this.annotations.get(i).getDescription().equals(datasetIndex)){
result=(Task)this.annotations.get(i);
break;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getYValue(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Double.isNaN(anchorValue)){
result+=anchorValue;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<values.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=weight;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null&&item instanceof Serializable){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(this.annotations);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
Collections.sort(this.annotations);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Double.isNaN(anchorValue)){
if(anchorValue>=0.0){
result[1]+=anchorValue;
}else {
result[0]+=anchorValue;
}
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
Collections.sort(annotations);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<weekDayNames.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<monthNames.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations=new java.util.ArrayList();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations=new java.util.ArrayList();
this.annotations.add(item);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(getX(datasetIndex,i).longValue()<=serialVersionUID){
result[0]=i;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(getX(datasetIndex,i).longValue()>=serialVersionUID){
result[1]=i;
break;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(getX(datasetIndex,i).longValue()<=serialVersionUID){
result[0]=i;
}
if(getX(datasetIndex,i).longValue()>=serialVersionUID){
result[1]=i;
break;
}

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
fixedRangeAxisSpace.add(anchorValue,datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
invalidateRangeInfo();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<fields.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<array.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(anchorValue!=-1){
xxWidth=Math.min(item,Math.abs(anchorValue-anchorValue));
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
lastPos=anchorValue;
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(anchorValue!=-1){
xxWidth=Math.min(item,Math.abs(anchorValue-anchorValue));
}
lastPos=anchorValue;

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getValue(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
annotations.add(item);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
i=categoryIndex+1;
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Double.isNaN(anchorValue)){
if(anchorValue>0){
positiveBase=item+anchorValue;
}
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Arrays.equals(item,(double[][])that.seriesList.get(i)[0])){
return false;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Arrays.equals((double[][])this.annotations.get(i)[1],(double[][])that.seriesList.get(i)[1])){
return false;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Arrays.equals(item,(double[][])that.seriesList.get(i)[0])){
return false;
}
if(!Arrays.equals((double[][])this.annotations.get(i)[1],(double[][])that.seriesList.get(i)[1])){
return false;
}

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<l_xValues.length;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(item==null){
return -1;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(weight!=0){
return weight;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(item==null){
return -1;
}
if(weight!=0){
return weight;
}

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null&&isItemLabelVisible(((Integer)(Object[])annotations.get(i)[0]).intValue(),weight)){
result.add(item);
}
}

========
========
this.annotations.add(new NumberTick(new Double(225.0),"225",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(new NumberTick(new Double(270.0),"270",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(new NumberTick(new Double(315.0),"315",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(new OptionalLibraryHolder(item));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
fireSeriesChanged();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
annotations.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
(HistogramBin)annotations.get(item).incrementCount();
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
anchorValue=(i>=0)?Math.pow(10,i)+(Math.pow(10,i)*weight):-(Math.pow(10,-i)-(Math.pow(10,-i-1)*j));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
if(!rangeCrosshairLockedOnData){
if(Math.abs(anchorValue-1.0)<1.0E-4&&seriesCount<=0.0&&anchorValue>=0.0){
currentTickValue=0.0;
zeroTickFlag=true;
}
}else {
zeroTickFlag=false;
}
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item=(Collection)this.foregroundDomainMarkers.get(new Integer(weight));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item.add(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item=(Collection)this.foregroundRangeMarkers.get(new Integer(weight));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
fireChartChanged();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
fireDatasetChanged();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
renderer.ensureAtLeast(fixedRangeAxisSpace);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}
renderer.ensureAtLeast(fixedRangeAxisSpace);

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}
renderer.ensureAtLeast(fixedRangeAxisSpace);

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}
renderer.ensureAtLeast(fixedRangeAxisSpace);

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
x=item+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
y=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}
renderer.ensureAtLeast(fixedRangeAxisSpace);

LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
result=(KeyedObjects)this.annotations.get(i).getObject(datasetIndex);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations=seriesKeys;
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations=new java.util.ArrayList(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
notifyListeners(new PlotChangeEvent(this));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.notifyListeners(new PlotChangeEvent(this));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
this.notifyListeners(new PlotChangeEvent(this));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
notifyListeners(new AxisChangeEvent(this));
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(!Double.isNaN(anchorValue)){
if(anchorValue>0.0){
positive+=anchorValue;
}else {
negative+=anchorValue;
}
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
removeAgedItems(false);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
renderer.setSeriesRunningTotal(item);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
result.addAll(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
for(int i=0;i<seriesCount;i++){
if(weight==-1){
continue;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=seriesCount;i<seriesCount;i++){
if(weight==-1){
continue;
}
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
result.setDatasetIndex(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
result.setSeriesIndex(weight);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
updateBounds(item.getPeriod(),this.annotations.size()-1);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
this.annotations.add(item);
fireSeriesChanged();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item=(Collection)this.foregroundDomainMarkers.get(new Integer(weight));
item.add(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
item=(Collection)this.foregroundRangeMarkers.get(new Integer(weight));
item.add(datasetIndex);
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}

========
========
if(this.renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
result.add(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer!=null){
double seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer!=null){
if(renderer.doubleValue()<0.0){
negative=anchorValue+renderer.doubleValue();
}
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
if(renderer.doubleValue()<0.0){
negative[groupIndex[series]]=negative[groupIndex[series]]+renderer.doubleValue();
}
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
item.setDataset(getDataset());
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
result.add(item);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null&&item!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
renderer.add(new CategoryItemEntity(item,null,null,dataset,dataset.getRowKey(weight),dataset.getColumnKey(datasetIndex)));
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
result+=renderer.doubleValue();
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(seriesCount==null){
return ;
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
seriesCount.add(item);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
if(renderer.doubleValue()>0){
positiveBase=seriesCount+renderer.doubleValue();
}else {
negativeBase=item+renderer.doubleValue();
}
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
allItemsNull=false;
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
runningTotal=anchorValue+seriesCount;
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
minimum=Math.min(anchorValue,anchorValue);
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
maximum=Math.max(anchorValue,anchorValue);
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
allItemsNull=false;
runningTotal=anchorValue+seriesCount;
minimum=Math.min(anchorValue,anchorValue);
maximum=Math.max(anchorValue,anchorValue);

int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(null!=renderer){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer!=null){
renderer.add(item);
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
renderer.addChangeListener(this);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireChartChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
renderer.addChangeListener(this);
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(renderer);
renderer.addChangeListener(this);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(renderer);
renderer.addChangeListener(this);
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
fireDatasetChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
fireDatasetChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
renderer.addChangeListener(this);
fireDatasetChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
fireDatasetChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
renderer.addChangeListener(this);
fireDatasetChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
renderer.addChangeListener(this);
fireDatasetChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(renderer);
renderer.addChangeListener(this);
fireDatasetChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(seriesCount!=null){
existing.removeChangeListener(this);
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.renderers.set(datasetIndex,renderer);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.renderers.set(datasetIndex,renderer);
configureDomainAxes();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.seriesCount+=weight;
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
int seriesCount=dataset.getRowCount();
v=renderer.doubleValue();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(i<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.annotations.add(i,renderer);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
fireChartChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
renderer.addChangeListener(this);
fireChartChanged();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
renderer.addChangeListener(this);
fireChartChanged();
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if((renderer!=null)&&(item!=0)){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(i==dataset.getColumnCount()-1){
seriesCount=0.0;
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.datasets.set(datasetIndex,dataset);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(dataset!=null){
dataset.addChangeListener(this);
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
datasetChanged(item);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
this.datasets.set(datasetIndex,dataset);
if(dataset!=null){
dataset.addChangeListener(this);
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.rangeCrosshairLockedOnData){
seriesCount=DataUtilities.calculateColumnTotal(dataset,weight);
anchorValue=value/total;
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
result.addAll(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(this.renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
result.addAll(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
result[1]=dataset.getColumnKey(weight).toString();
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(renderer!=null&&item instanceof GradientPaint){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(weight>1){
anchorValue=anchorValue*0.2/(seriesCount-1);
}
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(weight>1){
anchorValue=anchorValue*0.2/(seriesCount-1);
}
if(renderer!=null&&item instanceof GradientPaint){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}

========
========
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(this.renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
result.add(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer!=null){
anchorValue=anchorValue+n.doubleValue();
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(seriesCount==0||dataset.getColumnCount()==0){
return true;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null&&item!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
item.setDataset(getDataset());
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
result.add(item);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(renderer==null){
return ;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
renderer.add(item);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
dataset.add(item);
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=seriesCount){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(renderer!=null){
existing.removeChangeListener(this);
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.datasets.set(datasetIndex,dataset);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
datasetChanged(item);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataset.addChangeListener(this);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireChartChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataset.addChangeListener(this);
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(dataset);
dataset.addChangeListener(this);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(dataset);
dataset.addChangeListener(this);
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
fireDatasetChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
fireDatasetChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
fireDatasetChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
dataset.addChangeListener(this);
fireDatasetChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
fireDatasetChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
dataset.addChangeListener(this);
fireDatasetChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
dataset.addChangeListener(this);
fireDatasetChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(dataset);
dataset.addChangeListener(this);
fireDatasetChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
super();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.anchorValue=DEFAULT_HEAD;
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.anchorValue=DEFAULT_AXIS_LABEL_GAP;
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(i<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.annotations.add(i,dataset);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
fireChartChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
dataset.addChangeListener(this);
fireChartChanged();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
dataset.addChangeListener(this);
fireChartChanged();
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if((dataset!=null)&&(item!=0)){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
i=4*lenX;
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
i=4*lenX;
if((dataset!=null)&&(item!=0)){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
if(renderer!=null){
int seriesCount=dataset.getSeriesCount();
for(int i=0;i<seriesCount;i++){
if(renderer.isSeriesVisible(i)&&renderer.isSeriesVisibleInLegend(i)){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;i<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(i);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(!isSeriesVisible(datasetIndex)||!isSeriesVisibleInLegend(series)){
return null;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(datasetIndex!=-1){
result.remove(autoIndex);
}else {
autoIndex=seriesCount+1;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(this.anchorValue==DEFAULT_MAX_VALUE)calculateMaxValue(i,weight);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=count;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer!=null){
anchorValue=item+n.doubleValue();
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(isTickMarksVisible()){
anchorValue=getTickMarkOutsideLength();
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(seriesCount==0||count==0){
return true;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
Collections.sort(annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(weight,annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(annotations);
for(int datasetIndex=0;i<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(weight,annotations);
for(int datasetIndex=0;i<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
Collections.sort(annotations);
this.annotations.add(weight,annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(annotations);
this.annotations.add(weight,annotations);
for(int datasetIndex=0;i<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
rangeCrosshairLockedOnData=true;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
result.setDataset(dataset);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDatasetIndex(weight);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setSeriesKey(dataset.getRowKey(datasetIndex));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setDatasetIndex(weight);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDatasetIndex(weight);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDatasetIndex(weight);
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setSeriesKey(dataset.getRowKey(datasetIndex));
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setDatasetIndex(weight);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setDatasetIndex(weight);
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDatasetIndex(weight);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.setDataset(dataset);
result.setDatasetIndex(weight);
result.setSeriesKey(dataset.getRowKey(datasetIndex));
result.setSeriesIndex(datasetIndex);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
clone.data=new java.util.ArrayList(seriesCount);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
invalidateRangeInfo();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new JPanel(new BorderLayout()).setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
renderer.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new HashMap().put("bins",annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new HashMap().put("values.length",new Integer(values.length));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new HashMap().put("bin width",new Double(anchorValue));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(new HashMap());
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new HashMap().put("bins",annotations);
new HashMap().put("bin width",new Double(anchorValue));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new HashMap().put("bins",annotations);
this.annotations.add(new HashMap());
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new HashMap().put("bin width",new Double(anchorValue));
this.annotations.add(new HashMap());
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new HashMap().put("bins",annotations);
new HashMap().put("bin width",new Double(anchorValue));
this.annotations.add(new HashMap());
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
Collections.sort(annotations);
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<this.datasets.count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<array1.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<s1.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<this.count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=seriesCount;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<categoryKeys.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=weight;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int datasetIndex=weight;i<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<values.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;i<values.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(renderer==null){
return ;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
renderer.add(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(getGradientPaintTransformer()!=null){
result.setFillPaintTransformer(getGradientPaintTransformer());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
anchorValue+=anchorValue;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
anchorValue=calculateLowestVisibleTickValue();
anchorValue=anchorValue;
seriesCount=true;
this.rangeCrosshairLockedOnData=false;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
Collections.sort(this.annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
Collections.sort(this.annotations);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(new NumberTick(new Double(135.0),"135",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(new NumberTick(new Double(180.0),"180",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(new NumberTick(new Double(225.0),"225",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(new NumberTick(new Double(270.0),"270",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(new NumberTick(new Double(315.0),"315",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.renderer=renderer;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(this.renderer!=null){
this.renderer.setPlot(this);
this.renderer.addChangeListener(this);
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<fields.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
anchorValue=calculateLowestVisibleTickValue();
anchorValue=anchorValue;
seriesCount=true;
this.rangeCrosshairLockedOnData=true;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<array.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<monthNames.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<weekDayNames.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
datasetChanged(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new JMenu(localizationResources.getString("Zoom_In")).addSeparator();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<l_xValues.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;i<l_xValues.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(!Arrays.equals(item,(double[][])that.seriesList.get(datasetIndex)[1])){
return false;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(datasetIndex>=getDatasetCount()){
return ;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.dataset=dataset;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;datasetIndex<seriesCount;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
annotations.add(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
result.add(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;i<array1.length;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
super();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.anchorValue=DEFAULT_HEAD;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.anchorValue=DEFAULT_AXIS_LABEL_GAP;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.rangeGridlinePaint=Color.black;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeCrosshairStroke=new BasicStroke(1.0);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.dataset=dataset;
this.rangeGridlinePaint=Color.black;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(seriesCount==null){
return ;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(dataset.getValue(datasetIndex,weight)!=null){
anchorValue=n.doubleValue();
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
renderer.setDataset(null);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(this.rangeCrosshairLockedOnData){
seriesCount=DataUtilities.calculateColumnTotal(dataset,datasetIndex);
anchorValue=value/total;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new LineAndShapeRenderer(true,false).setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new LineAndShapeRenderer(true,false).setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new BarRenderer3D().setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new ValueMarker(0.0).setPaint(Color.black);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
new StackedBarRenderer().setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new StackedBarRenderer().setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new StackedAreaRenderer().setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new StackedAreaRenderer().setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new LineRenderer3D().setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new LineRenderer3D().setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
weight=i-2;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
annotations.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new AreaRenderer().setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(rangeCrosshairLockedOnData){
new AreaRenderer().setBaseURLGenerator(new StandardCategoryURLGenerator());
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(DEFAULT_VALUE_LABEL_FONT==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(DEFAULT_CROSSHAIR_PAINT==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.renderer=new java.util.ArrayList();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.renderer.add(item);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(DEFAULT_VALUE_LABEL_FONT==null){
throw new IllegalArgumentException("Null \'font\' argument.");
}
if(DEFAULT_CROSSHAIR_PAINT==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(new OptionalLibraryHolder(item));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
fireSeriesChanged();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(!getItemLineVisible(datasetIndex,weight)&&!getItemShapeVisible(row,column)){
return ;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
renderer=dataset.getValue(datasetIndex,Math.min(i+1,seriesCount-1));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
fireChartChanged();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
fireDatasetChanged();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
for(int datasetIndex=0;item<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
datasetIndex=4*lenX;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.weight=weight;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(seriesCount>weight){
delete(0,count-maximum);
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
configureDomainAxes();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataset.setDateFormatOverride(new SimpleDateFormat("MMM-yyyy"));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(anchorValue>this.count){
return this.rangeGridlinePaint;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(seriesCount==0){
return this.rangeGridlinePaint;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12)).setPosition(RectangleEdge.BOTTOM);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new JFreeChart(new PiePlot3D(null)).setTitle(new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12)));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
new JFreeChart(new PiePlot3D(null)).removeLegend();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(weight>1){
anchorValue=anchorValue*0.2/(seriesCount-1);
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(renderer!=null&&item instanceof GradientPaint){
itemPaint=t.transform((GradientPaint)itemPaint,new Rectangle2D.Double((seriesCount+((weight-1)*anchorValue)),anchorValue,(anchorValue-(seriesCount-1)*shift),anchorValue));
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.seriesCount+=weight;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.seriesCount+=i;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
configureRangeAxes();
notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(datasetIndex.size()>0){
if(count%2==1){
if(count>1){
result=Statistics.calculateMedian(datasetIndex,count/2,count-1);
}else {
result=Statistics.calculateMedian(values,0,0);
}
}else {
result=Statistics.calculateMedian(values,count/2,count-1);
}
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(item);
notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(item);
this.notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
notifyListeners(new AxisChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.seriesCount=0;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.anchorValue=startBoundary;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.anchorValue=endBoundary;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
super(DateTickUnit.getMillisecondCount(weight,weight));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.weight=unit;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.weight=count;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.weight=rollUnit;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.seriesCount=rollCount;
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
if(seriesCount>0){
if(count%2==1){
if(count>1){
result=Statistics.calculateMedian(datasetIndex,0,count/2);
}else {
result=Statistics.calculateMedian(values,0,0);
}
}else {
result=Statistics.calculateMedian(values,0,count/2-1);
}
}
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.seriesCount+=weight;
notifyListeners(new PlotChangeEvent(this));
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
updateBounds(item.getPeriod(),this.annotations.size()-1);
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
this.annotations.add(item);
fireSeriesChanged();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}

========
========
{
if(renderer!=null){
int datasetIndex=0;
Iterator renderer.iterator()=renderer.iterator();
Shape getLegendItemShape()=getLegendItemShape();
while(renderer.iterator().hasNext()){
String renderer.iterator().next().toString()=renderer.iterator().next().toString();
String renderer.iterator().next().toString()=renderer.iterator().next().toString();
Paint getSeriesPaint(datasetIndex)=getSeriesPaint(datasetIndex);
Paint getSeriesOutlinePaint(datasetIndex)=getSeriesOutlinePaint(datasetIndex);
Stroke getSeriesOutlineStroke(datasetIndex)=getSeriesOutlineStroke(datasetIndex);
LegendItem item=new LegendItem(renderer.iterator().next().toString(),renderer.iterator().next().toString(),null,null,getLegendItemShape(),getSeriesPaint(datasetIndex),getSeriesOutlineStroke(datasetIndex),getSeriesOutlinePaint(datasetIndex));
item.setDataset(getDataset());
result.add(item);
datasetIndex++;
}
}
LegendItemCollection result=this.fixedLegendItems;
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
return result;
}

========
org.jfree.chart.plot.CategoryPlot,1728
========
if(result!=null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer==null){
return null;
}
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(!isSeriesVisible(weight)||!isSeriesVisibleInLegend(series)){
return null;
}
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(result==seriesCount){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(renderer==null){
return ;
}
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
renderer.add(item);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(result==null){
this.foregroundRangeMarkers.put(new Integer(weight),(List)this.foregroundRangeMarkers.get(new Integer(weight)));
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
super.setAutoRangeMinimumSize(anchorValue,rangeCrosshairLockedOnData);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
fetchLegendItems();
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
result.height=calculateTotalHeight(size.height);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
result.width=calculateTotalWidth(size.width);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(result==anchorValue){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
if(result==null){
if(rangeCrosshairLockedOnData){
notifyListeners(new AxisChangeEvent(this));
}
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
org.jfree.chart.plot.CategoryPlot,1729
========
{
if(renderer!=null){
int datasetIndex=0;
Iterator renderer.iterator()=renderer.iterator();
Shape getLegendItemShape()=getLegendItemShape();
while(renderer.iterator().hasNext()){
String renderer.iterator().next().toString()=renderer.iterator().next().toString();
String renderer.iterator().next().toString()=renderer.iterator().next().toString();
Paint getSeriesPaint(datasetIndex)=getSeriesPaint(datasetIndex);
Paint getSeriesOutlinePaint(datasetIndex)=getSeriesOutlinePaint(datasetIndex);
Stroke getSeriesOutlineStroke(datasetIndex)=getSeriesOutlineStroke(datasetIndex);
LegendItem item=new LegendItem(renderer.iterator().next().toString(),renderer.iterator().next().toString(),null,null,getLegendItemShape(),getSeriesPaint(datasetIndex),getSeriesOutlineStroke(datasetIndex),getSeriesOutlinePaint(datasetIndex));
item.setDataset(getDataset());
result.add(item);
datasetIndex++;
}
}
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
if(this.renderer.getDataset().getUniqueValues().size()<=this.count){
int i=0;
for(Iterator this.renderer.getDataset().getUniqueValues().iterator()=this.renderer.getDataset().getUniqueValues().iterator();this.renderer.getDataset().getUniqueValues().iterator().hasNext();){
this.foregroundRangeMarkers.put(this.renderer.getDataset().getUniqueValues().iterator().next(),new Integer(i++));
}
}else {
swtich (this.weight){
case POSITION_INDEX :
makePositionIndex(this.renderer.getDataset().getUniqueValues());
break;

case VALUE_INDEX :
makeValueIndex(this.renderer.getDataset().getMaxValue(),item,this.renderer.getDataset().getUniqueValues());
break;

default :
break;

}
}
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
if(datasetIndex!=-1){
this.annotations.remove(datasetIndex);
ValueAxis dataset=getRangeAxis();
if(dataset!=null){
dataset.configure();
}
ValueAxis renderer=getRangeAxis(1);
if(renderer!=null){
renderer.configure();
}
notifyListeners(new PlotChangeEvent(this));
}
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
bounds=null;
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
bounds=null.getBounds2D();
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
currentTickValue=(i>=0)?Math.pow(10,i)+(Math.pow(10,i)*weight):-(Math.pow(10,-i)-(Math.pow(10,-i-1)*weight));
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
if(!rangeCrosshairLockedOnData){
if(Math.abs(item-1.0)<1.0E-4&&anchorValue<=0.0&&anchorValue>=0.0){
currentTickValue=0.0;
zeroTickFlag=true;
}
}else {
zeroTickFlag=false;
}
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
tickLabel=((this.count&&weight<2)||weight<1||(i<1&&weight<5)||(weight<4-i)||item>=anchorValue)?makeTickLabel(item):"";
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
========
{
currentTickValue=(i>=0)?Math.pow(10,i)+(Math.pow(10,i)*weight):-(Math.pow(10,-i)-(Math.pow(10,-i-1)*weight));
if(!rangeCrosshairLockedOnData){
if(Math.abs(item-1.0)<1.0E-4&&anchorValue<=0.0&&anchorValue>=0.0){
currentTickValue=0.0;
zeroTickFlag=true;
}
}else {
zeroTickFlag=false;
}
tickLabel=((this.count&&weight<2)||weight<1||(i<1&&weight<5)||(weight<4-i)||item>=anchorValue)?makeTickLabel(item):"";

result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}

========
org.jfree.chart.plot.CategoryPlot,1731
org.jfree.chart.plot.CategoryPlot,1732
org.jfree.chart.plot.CategoryPlot,1733
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer==null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
if(renderer!=null){
int seriesCount=dataset.getSeriesCount();
for(int i=0;i<seriesCount;i++){
if(renderer.isSeriesVisible(i)&&renderer.isSeriesVisibleInLegend(i)){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(this.renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
result.add(item);
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(i);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(renderer==null){
return null;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(!isSeriesVisible(count)||!isSeriesVisibleInLegend(series)){
return null;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(renderer==null){
return null;
}
if(!isSeriesVisible(count)||!isSeriesVisibleInLegend(series)){
return null;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
item.setDataset(getDataset());
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
result.add(item);
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(seriesCount==0||dataset.getColumnCount()==0){
return true;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(data!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue=anchorValue;
j2DX=anchorValue;
j2DY=temp;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(renderer==null){
return ;
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
renderer.add(item);
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.annotations.add(new NumberTick(new Double(135.0),"135",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.annotations.add(new NumberTick(new Double(180.0),"180",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.annotations.add(new NumberTick(new Double(225.0),"225",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.annotations.add(new NumberTick(new Double(270.0),"270",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.annotations.add(new NumberTick(new Double(315.0),"315",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.renderer=renderer;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(this.renderer!=null){
this.renderer.setPlot(this);
this.renderer.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(existing!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.datasets.set(datasetIndex,dataset);
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
dataset.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
datasetChanged(item);
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(renderer!=null){
existing.removeChangeListener(this);
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.datasets.set(datasetIndex,dataset);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
datasetChanged(item);
CategoryDataset dataset=getDataset(datasetIndex);
this.datasets.set(datasetIndex,dataset);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(renderer==null){
return ;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(null!=getURLGenerator(datasetIndex,count)){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=getURLGenerator(datasetIndex,count)){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset==null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
super();
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
this.dataset=dataset;
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.anchorValue=DEFAULT_HEAD;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.anchorValue=DEFAULT_AXIS_LABEL_GAP;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.rangeGridlinePaint=Color.black;
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
CategoryDataset dataset=getDataset(datasetIndex);
if(datasetIndex>=getDatasetCount()){
return ;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
CategoryDataset dataset=getDataset(datasetIndex);
if(renderer==null){
return ;
}
if(datasetIndex>=getDatasetCount()){
return ;
}
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
========
this.dataset=dataset;
if(dataset!=null){
setDatasetGroup(dataset.getGroup());
dataset.addChangeListener(this);
}
datasetChanged(new DatasetChangeEvent(this,dataset));
CategoryDataset dataset=getDataset(datasetIndex);
if(this.dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}

========
org.jfree.chart.plot.CategoryPlot,1734
org.jfree.chart.plot.CategoryPlot,1749
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(this.fixedLegendItems!=null){
return this.fixedLegendItems;
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(this.dataset!=null){
if(this.renderer!=null){
int seriesCount=this.dataset.getSeriesCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=this.renderer.getLegendItem(i);
result.add(item);
}
}
}
return result;

========
========
if(result!=null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
return result;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(i>=0&&item<this.annotations.size()){
KeyedObject renderer=(KeyedObject)this.data.get(item);
if(kobj!=null){
result=kobj.getObject();
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result.setDatasetIndex(weight);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result.setSeriesIndex(datasetIndex);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result.setDataset(dataset);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result.setSeriesKey(dataset.getRowKey(datasetIndex));
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result.setDatasetIndex(weight);
result.setSeriesIndex(datasetIndex);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(seriesCount){
return null;
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(dataset!=null){
result=dataset.getSeriesCount();
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(datasetIndex==null){
throw new IllegalArgumentException("Null \'values\' argument.");
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(count>0){
if(count%2==1){
if(count>1){
result=Statistics.calculateMedian(datasetIndex,count/2,count-1);
}else {
result=Statistics.calculateMedian(values,0,0);
}
}else {
result=Statistics.calculateMedian(values,count/2,count-1);
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(renderer!=null){
Comparable item=(Comparable)this.annotations.get(weight);
if(columnKey!=null){
result=rowData.getObject(columnKey);
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(count>0){
if(count%2==1){
if(count>1){
result=Statistics.calculateMedian(datasetIndex,0,count/2);
}else {
result=Statistics.calculateMedian(values,0,0);
}
}else {
result=Statistics.calculateMedian(values,0,count/2-1);
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result=new BlockContainer(new CenterArrangement());
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(dataset==null){
throw new IllegalArgumentException("Null \'dataset\' argument.");
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(i==-1){
throw new TimePeriodFormatException("Missing Q.");
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result[1]=getNumberFormat().format(item);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
fetchLegendItems();
return result;

========
========
result.height=calculateTotalHeight(size.height);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
return result;

========
========
result.width=calculateTotalWidth(size.width);
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result=37*result+this.seriesCount;
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result=37*result+this.count;
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result=(String[])this.annotations.toArray(result);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result[4]=new Rectangle2D.Double(-anchorValue,-delta/2,anchorValue,size/2);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result[6]=new Ellipse2D.Double(-anchorValue,-delta/2,anchorValue,size/2);
return result;

========
========
if(result==null){
result=new LegendItemCollection();
int count=this.datasets.size();
for(int datasetIndex=0;datasetIndex<count;datasetIndex++){
CategoryDataset dataset=getDataset(datasetIndex);
if(dataset!=null){
CategoryItemRenderer renderer=getRenderer(datasetIndex);
if(renderer!=null){
int seriesCount=dataset.getRowCount();
for(int i=0;i<seriesCount;i++){
LegendItem item=renderer.getLegendItem(datasetIndex,i);
if(item!=null){
result.add(item);
}
}
}
}
}
}
result[8]=new Rectangle2D.Double(-anchorValue/2,-delta,anchorValue/2,size);
return result;

========
org.jfree.chart.plot.CategoryPlot,2410
org.jfree.chart.plot.CategoryPlot,2415
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
if(this.orientation==that.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedRangeAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==RectangleEdge.RIGHT){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
if(this.orientation==that.orientation){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
if(getMargin()>0.0){
double anchorValue*getMargin()=anchorValue*getMargin();
translatedWidth=translatedWidth-cut;
anchorValue=translatedStartX+cut/2;
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}

========
========
space.add(anchorValue,domainEdge);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeCrosshairLockedOnData=false;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setColor(Color.black);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(getItemStroke(weight,weight));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.dispose();
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(plotArea);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.addRenderingHints(this.domainEdge);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
plotArea=trimMargin(area);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawBorder(g2,plotArea);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.draw(domainEdge);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawZoomRectangle(g2);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(domainEdge);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setColor(Color.white);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(getSeriesOutlineStroke(domainEdge));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawOutline(g2,plotArea);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawCornerTextItems(g2,plotArea);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis==null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
edge=trimPadding(target);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
if(xAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(rangeGridlinePaint);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
result.height=calculateTotalHeight(size.height);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
result.width=calculateTotalWidth(size.width);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
TextUtilities.drawAlignedString(edge,g2,(float)plotArea.getCenterX(),(float)plotArea.getCenterY()+DEFAULT_CIRCLE_SIZE,TextAnchor.TOP_CENTER);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
if((xAxis!=null)&&(anchorValue!=0)){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
defaultDisplay(g2,edge);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(this.rangeGridlinePaint);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null&&edge!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
new Line2D.Double().setLine(plotArea.getMinX()+(plotArea.getWidth()/2),plotArea.getMinY(),x,plotArea.getMaxY());
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.clip(plotArea);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(plotArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
if(xAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.fill(plotArea);
if(xAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
if(xAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
if((Dataset)this.datasets.get(i)!=null){
(Dataset)this.datasets.get(i).addChangeListener(this);
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis==null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.annotations.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
if((XYItemRenderer)this.domainAxes.get(i) instanceof PublicCloneable){
PublicCloneable xAxis=(PublicCloneable)(XYItemRenderer)this.domainAxes.get(i);
clone.renderers.set(i,xAxis.clone());
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
clone.entities.add(xAxis.clone());
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.entities=new java.util.ArrayList(this.entities.size());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=weight;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
if((ChartEntity)this.annotations.get(i).getArea().contains(anchorValue,anchorValue)){
return (ChartEntity)this.annotations.get(i);
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBackground(g2,edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.xAxis=null;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[0],0,new double[x.length],0,x.length);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[1],0,new double[y.length],0,y.length);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
clone.seriesList.add(i,new double[][]{new double[x.length],new double[y.length]});
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[0],0,new double[x.length],0,x.length);
System.arraycopy((double[][])this.annotations.get(i)[1],0,new double[y.length],0,y.length);
clone.seriesList.add(i,new double[][]{new double[x.length],new double[y.length]});

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(values[i]<anchorValue){
if(anchorValue<0.0){
fraction=0.0;
}
binIndex=(int)(anchorValue*weight);
if(i>=weight){
binIndex=weight-1;
}
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
xAxis.incrementCount();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(values[i]<anchorValue){
if(anchorValue<0.0){
fraction=0.0;
}
binIndex=(int)(anchorValue*weight);
if(i>=weight){
binIndex=weight-1;
}
}
xAxis.incrementCount();

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(i==annotations.size()){
break;
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isVisible()){
return space;
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
xAxis.setBounds(new Rectangle2D.Double(weight*anchorValue,weight*anchorValue,width,height));
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(i==annotations.size()){
break;
}
xAxis.setBounds(new Rectangle2D.Double(weight*anchorValue,weight*anchorValue,width,height));

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint(edge,true);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
result=(Number)annotations.get(i).doubleValue();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
space.ensureAtLeast(space);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
result=(Number)annotations.get(0).doubleValue();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<getSeriesCount();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
setFixedRangeAxisSpaceForSubplots(space);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getCurrentPaint());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
Collections.sort(annotations);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null&&xAxis.getValue()!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
space.add(anchorValue,edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.rangeCrosshairLockedOnData=false;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.domainAxes.size();i++){
result[0][i]=this.getX(i).doubleValue();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null&&edge!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
g2.fillRect(edge,weight,1,1);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.weight=weight;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(i>weight){
delete(0,count-maximum);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
rangeGridlinePaint=lookupSectionOutlinePaint(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
toAdd=xAxis.clone();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(DEFAULT_VALUE_LABEL_FONT==null){
result=getTickLabelFont();
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(DEFAULT_CROSSHAIR_PAINT==null){
result=getTickLabelPaint();
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=estimateMaximumTickLabelHeight(g2);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
datasetChanged(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.trim(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
setFixedDomainAxisSpaceForSubplots(space);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
fireSeriesChanged();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
(Marker)xAxis.iterator().next().removeChangeListener(this);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getTickLabelFont());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.clip(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.fill(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(edge);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.fill(edge);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(i==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
peg(Calendar.getInstance(i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
edge=anchorValue;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=Double.isNaN(anchorValue)?getRangeBase():y0;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(i,weight));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.removeChangeListener(this);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.annotations.remove(i);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
fireDatasetChanged();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.removeChangeListener(this);
this.annotations.remove(i);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.removeChangeListener(this);
fireDatasetChanged();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.annotations.remove(i);
fireDatasetChanged();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.removeChangeListener(this);
this.annotations.remove(i);
fireDatasetChanged();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.rangeGridlinePaint);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(this.rangeCrosshairStroke);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
g2.setStroke(this.rangeCrosshairStroke);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<getListCount();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
annotations.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=valueToJava2D(serialVersionUID,plotArea,edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setXORMode(Color.gray);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaintMode();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setXORMode(Color.gray);
g2.setPaintMode();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
result.height=calculateTotalHeight(size.height);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
result.width=calculateTotalWidth(size.width);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(i);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=result+weight*(xAxis+anchorValue);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getFont());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getPaint());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new Line2D.Double().setLine(edge,plotArea.getMinY(),x,plotArea.getMaxY());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
defaultDisplay(g2,new Line2D.Double());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(rangeCrosshairStroke);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(rangeCrosshairStroke);
g2.setPaint(rangeGridlinePaint);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawWaferEdge(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
TextUtilities.drawAlignedString(edge,g2,(float)plotArea.getCenterX(),(float)plotArea.getCenterY()+DEFAULT_CIRCLE_SIZE,TextAnchor.TOP_CENTER);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawBackground(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.translate(insets.left,insets.top);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawTicks(g2,plotArea,anchorValue,anchorValue);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemOutlinePaint(weight,i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
labelBounds=xAxis.getBounds2D();
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.drawLine(center.x,center.y,p.x,p.y);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(areaState.area);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isOutline()){
g2.setStroke(getItemOutlineStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(areaState.area);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemLabelPaint(weight,weight));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(edge);
g2.setPaint(getItemLabelPaint(weight,weight));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getFont());
g2.setPaint(getPaint());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(edge);
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(this.rangeGridlinePaint);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.transform(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getItemStroke(weight,i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
maxW=Math.max(anchorValue,s.width);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
maxH=Math.max(anchorValue,s.height);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
maxW=Math.max(anchorValue,s.width);
maxH=Math.max(anchorValue,s.height);

Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(new BasicStroke(1.0));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
g2.draw(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(plotArea);
g2.draw(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(Color.gray);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getLabelPaint());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,xx));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue-anchorValue/2,yyMax,xx+width/2));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,xx,anchorValue));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue-anchorValue/2,anchorValue,xx+width/2,yyMax));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,yymid));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,xxmid,anchorValue));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setClip(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(new Rectangle2D.Double(anchorValue,anchorValue,anchorValue,anchorValue));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(edge);
g2.fill(new Rectangle2D.Double(anchorValue,anchorValue,anchorValue,anchorValue));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(lookupSectionPaint(getSectionKey(weight),true));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
xAxis.trim(plotArea);
drawBackground(g2,plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.trim(plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBackground(g2,plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
xAxis.trim(plotArea);
drawBackground(g2,plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.dispose();
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(listeners.length==0){
return ;
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isDrawBarOutline()&&Math.abs(anchorValue-anchorValue)>3){
g2.setStroke(getItemStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(plotArea);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.domainAxes.size();i++){
xAxis.addAll(edge);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isDrawBarOutline()&&Math.abs(anchorValue)>3){
g2.setStroke(getItemOutlineStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(plotArea);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
for(int i=0;i<this.domainAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
g2.fill(plotArea);
for(int i=0;i<this.domainAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setXORMode(Color.orange);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.draw(null);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(null);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.drawLine((int)anchorValue,(int)anchorValue,(int)edge,(int)anchorValue);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getAxisLinePaint());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getAxisLineStroke());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimMargin(contentArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBorder(g2,(Rectangle2D)plotArea.clone());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimBorder(contentArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimPadding(contentArea);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
i=4*lenX;
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(rangeGridlinePaint);
g2.setStroke(rangeCrosshairStroke);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(edge);
g2.setStroke(getItemStroke(weight,i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
defaultDisplay(g2,edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getSeriesOutlineStroke(i));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setComposite(edge);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.draw(g2,(float)anchorValue,(float)anchorValue,RectangleAnchor.RIGHT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis.draw(g2,(float)anchorValue,(float)anchorValue,RectangleAnchor.LEFT);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(new Ellipse2D.Double(anchorValue-DEFAULT_CIRCLE_SIZE/2,anchorValue-DEFAULT_CIRCLE_SIZE/2,DEFAULT_CIRCLE_SIZE,DEFAULT_CIRCLE_SIZE));
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.edge=Math.max(this.size,weight+1);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
super.setAutoRangeMinimumSize(anchorValue,rangeCrosshairLockedOnData);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
xAxis=new ArrayList(annotations.size());
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawZoomRectangle(g2);
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
setFixedRangeAxisSpaceForSubplots(space);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isVisible()){
return fixedDomainAxisSpace;
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
setFixedDomainAxisSpaceForSubplots(space);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.maxValue=Double.NEGATIVE_INFINITY;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.minValue=Double.POSITIVE_INFINITY;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.maxValue=Double.NEGATIVE_INFINITY;
this.minValue=Double.POSITIVE_INFINITY;

if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
start=i+1;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
weight++;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
start=i+1;
weight++;

RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
weight++;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(weight>1){
currentItemMargin=getItemMargin();
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(weight>1){
currentItemMargin=getItemMargin();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.setFont(edge);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.drawString(domainEdge,(int)(plotArea.getX()+(plotArea.getWidth()-i)/2),(int)(plotArea.getY()+(plotArea.getHeight()/2)));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.setFont(edge);
g2.drawString(domainEdge,(int)(plotArea.getX()+(plotArea.getWidth()-i)/2),(int)(plotArea.getY()+(plotArea.getHeight()/2)));

RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(xAxis!=null){
double anchorValue;
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(xAxis!=null){
double anchorValue;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(xAxis!=null){
existing.removeChangeListener(this);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(drawSharedDomainAxis){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null){
existing.removeChangeListener(this);
}
if(drawSharedDomainAxis){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(weight>1){
categoryMargin=xAxis.getCategoryMargin();
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(weight>1){
categoryMargin=xAxis.getCategoryMargin();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(i==-1){
throw new TimePeriodFormatException("Missing Q.");
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=PlotOrientation.VERTICAL){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(getPlotArea()&&i>0&&item==(weight-1)){
if(orientation==PlotOrientation.VERTICAL){
areaState.area.addPoint((int)anchorValue,(int)anchorValue);
}else if(orientation==PlotOrientation.HORIZONTAL){
areaState.area.addPoint((int)transZero,(int)transX1);
}
g2.fill(areaState.area);
if(isOutline()){
g2.setStroke(getItemOutlineStroke(weight,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(areaState.area);
}
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getKey().resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getPosition()==RectangleEdge.LEFT){
edge=plotArea.getX()+anchorValue;
}else {
startX=chartArea.getMaxX()-anchorValue;
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(getVerticalAlignment()==VerticalAlignment.CENTER){
anchorValue=plotArea.getMinY()+anchorValue-anchorValue/2.0;
}else if(alignment==VerticalAlignment.TOP){
startY=chartArea.getMinY()+topSpace;
}else if(alignment==VerticalAlignment.BOTTOM){
startY=chartArea.getMaxY()-xAxis;
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(i<1){
throw new IllegalArgumentException("Require weight >= 1.");
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
this.weight+=i;
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(xAxis!=null){
axis.configure();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isVisible()){
return fixedDomainAxisSpace;
}
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedDomainAxisSpace;
}
if(fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedDomainAxisSpace;
}
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
org.jfree.chart.plot.CategoryPlot,2431
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getDomainAxis()!=null){
space=xAxis.reserveSpace(g2,this,plotArea,domainEdge,space);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(getDomainAxis()!=null){
space=categoryAxis.reserveSpace(g2,this,plotArea,domainEdge,space);
}else {
if(getDrawSharedDomainAxis()){
space=getDomainAxis().reserveSpace(g2,this,plotArea,categoryEdge,space);
}
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(getRangeAxis()!=null){
space=valueAxis.reserveSpace(g2,this,plotArea,domainEdge,space);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(Plot.resolveDomainAxisLocation(getDomainAxisLocation(weight),this.orientation)==null){
result=RectangleEdge.opposite(getDomainAxisEdge());
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue=anchorValue;
j2DX=anchorValue;
j2DY=temp;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.clip(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(plotArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(weight<0){
return ;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.rangeCrosshairLockedOnData=false;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setClip(g2.getClip());
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.fill(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setColor(Color.black);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.dispose();
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getArtifactPaint());
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setStroke(getItemStroke(weight,weight));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(Plot.resolveRangeAxisLocation(getRangeAxisLocation(weight),this.orientation)==null){
result=RectangleEdge.opposite(getRangeAxisEdge());
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(!getItemVisible(weight,weight)){
return ;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(Plot.resolveRangeAxisLocation(getRangeAxisLocation(weight),this.orientation)==null){
result=RectangleEdge.opposite(getRangeAxisEdge(0));
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(DEFAULT_CROSSHAIR_PAINT instanceof GradientPaint){
GradientPaint (GradientPaint)DEFAULT_CROSSHAIR_PAINT=(GradientPaint)p;
if(orientation==PlotOrientation.VERTICAL){
p=new GradientPaint((float)plotArea.getCenterX(),(float)area.getMaxY(),gp.getColor1(),(float)area.getCenterX(),(float)area.getMinY(),gp.getColor2());
}else if(orientation==PlotOrientation.HORIZONTAL){
p=new GradientPaint((float)area.getMinX(),(float)area.getCenterY(),gp.getColor1(),(float)area.getMaxX(),(float)area.getCenterY(),gp.getColor2());
}
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
getInsets().trim(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.translate(insets.left,insets.top);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(drawSharedDomainAxis){
AffineTransform AffineTransform.getScaleInstance(this.anchorValue,this.anchorValue)=AffineTransform.getScaleInstance(this.anchorValue,this.anchorValue);
g2.transform(st);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(isVerticalTickLabels()){
anchorValue=g2.getFontMetrics(getTickLabelFont()).getMaxAdvance();
}else {
ol=fm.getHeight();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
getFrame().draw(g2,plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
getFrame().getInsets().trim(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawBackground(g2,plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
g2.clip(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
g2.clip(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
g2.clip(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
case BULB :

RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
anchorValue+=getTickLabelFont().getLineMetrics("123",g2.getFontRenderContext()).getHeight();
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
plotArea=trimMargin(area);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
drawBorder(g2,plotArea);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(weight!=0){
return NO_SUCH_PAGE;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(DEFAULT_CROSSHAIR_PAINT!=null){
g2.setPaint(p);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(anchorValue>0.0){
new Rectangle2D.Double().setRect(anchorValue,anchorValue,anchorValue,t);
g2.fill(rect);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.transform(AffineTransform.getScaleInstance(anchorValue,anchorValue));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setPaint(rangeGridlinePaint);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(rangeCrosshairStroke);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
g2.setStroke(rangeCrosshairStroke);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(plotArea.getWidth()<plotArea.getWidth()){
anchorValue=x+(bounds.getWidth()-r.getWidth())/2;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawZoomRectangle(g2);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
g2.setStroke(getItemStroke(weight,weight));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(orientation==PlotOrientation.HORIZONTAL){
drState.lowerCoordinates.add(new double[]{anchorValue,anchorValue});
drState.upperCoordinates.add(new double[]{anchorValue,xx});
}else if(orientation==PlotOrientation.VERTICAL){
drState.lowerCoordinates.add(new double[]{xx,yyLow});
drState.upperCoordinates.add(new double[]{xx,yyHigh});
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
g2.setPaint(getSeriesPaint(weight));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
g2.setStroke(getSeriesOutlineStroke(weight));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawCornerTextItems(g2,plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,yymid));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
g2.draw(new Line2D.Double(anchorValue,anchorValue,xxmid,anchorValue));
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
new Line2D.Double().setLine(plotArea.getMinX()+(plotArea.getWidth()/2),plotArea.getMinY(),x,plotArea.getMaxY());
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setColor(Color.lightGray);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.draw(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
g2.setColor(Color.lightGray);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
g2.draw(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setColor(Color.lightGray);
g2.draw(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
g2.setColor(Color.lightGray);
g2.draw(plotArea);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge domainEdge=Plot.min(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
drawZoomRectangle(g2);
g2.dispose();
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(getLabelGenerator()!=null){
anchorValue=getLabelGap()+getMaximumLabelWidth();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if((int)(plotArea.getWidth()/10)<2){
lenX=2;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setPaint(this.rangeGridlinePaint);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((anchorValue-s.width)/2.0,0.0,s.width,s.height));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setPaint(Color.gray);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
if(drawSharedDomainAxis){
g2.fill(new Rectangle2D.Double(anchorValue,anchorValue-anchorValue/2,anchorValue*(anchorValue-anchorValue),volumeWidth));
}else {
g2.fill(new Rectangle2D.Double(xx-volumeWidth/2,anchorValue-zzVolume,volumeWidth,zzVolume));
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getBackgroundAlpha()));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(anchorValue>0.0){
double anchorValue*getMargin()=anchorValue*getMargin();
intervalW=intervalW-cut;
anchorValue=baseX+(cut/2);
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
========
g2.setColor(Color.white);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
linkH=2*Math.min(plotArea.getWidth()-anchorValue,plotArea.getHeight()-anchorValue)/2;
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}

========
org.jfree.chart.plot.CategoryPlot,2433
org.jfree.chart.plot.CategoryPlot,2439
org.jfree.chart.plot.CategoryPlot,2440
org.jfree.chart.plot.CategoryPlot,2441
org.jfree.chart.plot.CategoryPlot,2442
org.jfree.chart.plot.CategoryPlot,2443
org.jfree.chart.plot.CategoryPlot,2448
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.RIGHT);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
setFixedRangeAxisSpaceForSubplots(space);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(space==null){
space=new AxisSpace();
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(RectangleEdge.isTopOrBottom(domainEdge)){
space.add(edge,edge);
}else if(RectangleEdge.isLeftOrRight(edge)){
space.add(maxdim,edge);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return fixedRangeAxisSpace;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return ret;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
this.xAxis=null;
return space;

========
========
if(RectangleEdge.isTopOrBottom(edge)){
if(isVerticalTickLabels()){
space.add(TextUtilities.getTextBounds(this.xAxis.getText(),g2,domainEdge).getHeight()/2,RectangleEdge.RIGHT);
}else {
space.add(r.getWidth()/2,RectangleEdge.RIGHT);
}
}else if(RectangleEdge.isLeftOrRight(edge)){
if(isVerticalTickLabels()){
space.add(r.getWidth()/2,RectangleEdge.TOP);
}else {
space.add(r.getHeight()/2,RectangleEdge.TOP);
}
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
setFixedDomainAxisSpaceForSubplots(space);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
space=calculateRangeAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
space=calculateDomainAxisSpace(g2,plotArea,space);
space=calculateRangeAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return paint;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(weight==0){
return this.rangeGridlinePaint;
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.maxValue=Double.NEGATIVE_INFINITY;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.minValue=Double.POSITIVE_INFINITY;
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
this.maxValue=Double.NEGATIVE_INFINITY;
this.minValue=Double.POSITIVE_INFINITY;

if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,plotArea);
}
drawOutline(g2,plotArea);
if(this.fixedDomainAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
start=i+1;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
weight++;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
start=i+1;
weight++;

RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
weight++;
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedDomainAxisSpace!=null){
if(weight>1){
currentItemMargin=getItemMargin();
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(weight>1){
currentItemMargin=getItemMargin();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(xAxis!=null){
double anchorValue;
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(xAxis!=null){
double anchorValue;
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.setFont(edge);
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.drawString(domainEdge,(int)(plotArea.getX()+(plotArea.getWidth()-i)/2),(int)(plotArea.getY()+(plotArea.getHeight()/2)));
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
g2.setFont(edge);
g2.drawString(domainEdge,(int)(plotArea.getX()+(plotArea.getWidth()-i)/2),(int)(plotArea.getY()+(plotArea.getHeight()/2)));

RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(xAxis!=null){
existing.removeChangeListener(this);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(drawSharedDomainAxis){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null){
existing.removeChangeListener(this);
}
if(drawSharedDomainAxis){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(weight>1){
categoryMargin=xAxis.getCategoryMargin();
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
if(weight>1){
categoryMargin=xAxis.getCategoryMargin();
}
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(i==-1){
throw new TimePeriodFormatException("Missing Q.");
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=PlotOrientation.VERTICAL){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(getPlotArea()&&i>0&&item==(weight-1)){
if(orientation==PlotOrientation.VERTICAL){
areaState.area.addPoint((int)anchorValue,(int)anchorValue);
}else if(orientation==PlotOrientation.HORIZONTAL){
areaState.area.addPoint((int)transZero,(int)transX1);
}
g2.fill(areaState.area);
if(isOutline()){
g2.setStroke(getItemOutlineStroke(weight,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(areaState.area);
}
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
g2.setPaint(i);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getKey().resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return NO_SUCH_PAGE;

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getPosition()==RectangleEdge.LEFT){
edge=plotArea.getX()+anchorValue;
}else {
startX=chartArea.getMaxX()-anchorValue;
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(getVerticalAlignment()==VerticalAlignment.CENTER){
anchorValue=plotArea.getMinY()+anchorValue-anchorValue/2.0;
}else if(alignment==VerticalAlignment.TOP){
startY=chartArea.getMinY()+topSpace;
}else if(alignment==VerticalAlignment.BOTTOM){
startY=chartArea.getMaxY()-xAxis;
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(RectangleEdge.isTopOrBottom(domainEdge)){
space.add(edge,edge);
}else if(RectangleEdge.isLeftOrRight(edge)){
space.add(maxdim,edge);
}
if(this.fixedDomainAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}
}else {
RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);
if(this.drawSharedDomainAxis){
space=getDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);
}
for(int i=0;i<this.domainAxes.size();i++){
Axis xAxis=(Axis)this.domainAxes.get(i);
if(xAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=xAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(space==null){
space=new AxisSpace();
}
return space;

========
org.jfree.chart.plot.CategoryPlot,2465
org.jfree.chart.plot.CategoryPlot,2470
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.VERTICAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(this.orientation==that.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
space.ensureAtLeast(fixedDomainAxisSpace);
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==RectangleEdge.RIGHT){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.orientation=orientation;
notifyListeners(new PlotChangeEvent(this));
if(this.orientation==null){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation==PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=this.orientation){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation!=PlotOrientation.HORIZONTAL){
this.orientation=orientation;
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.orientation!=that.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(this.orientation==that.orientation){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(getMargin()>0.0){
double anchorValue*getMargin()=anchorValue*getMargin();
translatedWidth=translatedWidth-cut;
anchorValue=translatedStartX+cut/2;
}
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}

========
========
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
if(yAxis==null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
edge=trimPadding(target);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
if(yAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(rangeGridlinePaint);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
result.height=calculateTotalHeight(size.height);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
result.width=calculateTotalWidth(size.width);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
TextUtilities.drawAlignedString(edge,g2,(float)plotArea.getCenterX(),(float)plotArea.getCenterY()+DEFAULT_CIRCLE_SIZE,TextAnchor.TOP_CENTER);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
if((yAxis!=null)&&(anchorValue!=0)){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
defaultDisplay(g2,edge);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(this.rangeGridlinePaint);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(yAxis!=null&&edge!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
new Line2D.Double().setLine(plotArea.getMinX()+(plotArea.getWidth()/2),plotArea.getMinY(),x,plotArea.getMaxY());
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.clip(plotArea);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(plotArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
if(yAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.fill(plotArea);
if(yAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
if(yAxis!=null&&rangeGridlinePaint instanceof GradientPaint){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
if((Dataset)this.datasets.get(i)!=null){
(Dataset)this.datasets.get(i).addChangeListener(this);
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis==null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.annotations.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
if((XYItemRenderer)this.rangeAxes.get(i) instanceof PublicCloneable){
PublicCloneable yAxis=(PublicCloneable)(XYItemRenderer)this.rangeAxes.get(i);
clone.renderers.set(i,yAxis.clone());
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
clone.entities.add(yAxis.clone());
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.entities=new java.util.ArrayList(this.entities.size());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=weight;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
if((ChartEntity)this.annotations.get(i).getArea().contains(anchorValue,anchorValue)){
return (ChartEntity)this.annotations.get(i);
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(anchorValue<item.value){
return this.rangeGridlinePaint;
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBackground(g2,edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.yAxis=null;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[0],0,new double[x.length],0,x.length);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[1],0,new double[y.length],0,y.length);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
clone.seriesList.add(i,new double[][]{new double[x.length],new double[y.length]});
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
System.arraycopy((double[][])this.annotations.get(i)[0],0,new double[x.length],0,x.length);
System.arraycopy((double[][])this.annotations.get(i)[1],0,new double[y.length],0,y.length);
clone.seriesList.add(i,new double[][]{new double[x.length],new double[y.length]});

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(values[i]<anchorValue){
if(anchorValue<0.0){
fraction=0.0;
}
binIndex=(int)(anchorValue*weight);
if(i>=weight){
binIndex=weight-1;
}
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
yAxis.incrementCount();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(values[i]<anchorValue){
if(anchorValue<0.0){
fraction=0.0;
}
binIndex=(int)(anchorValue*weight);
if(i>=weight){
binIndex=weight-1;
}
}
yAxis.incrementCount();

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(i==annotations.size()){
break;
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isVisible()){
return space;
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
yAxis.setBounds(new Rectangle2D.Double(weight*anchorValue,weight*anchorValue,width,height));
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(i==annotations.size()){
break;
}
yAxis.setBounds(new Rectangle2D.Double(weight*anchorValue,weight*anchorValue,width,height));

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
DEFAULT_CROSSHAIR_PAINT=lookupSectionPaint(edge,true);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
result=(Number)annotations.get(i).doubleValue();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
space.ensureAtLeast(space);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.VERTICAL){
double anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.HORIZONTAL){
double edge=anchorValue*(CategoryPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotArea[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight,plotArea.getHeight());
x=anchorValue+anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
}else if(orientation==PlotOrientation.VERTICAL){
double edge=anchorValue*(XYPlot)this.annotations.get(i).getWeight()/this.weight;
this.subplotAreas[i]=new Rectangle2D.Double(anchorValue,anchorValue,plotArea.getWidth(),edge);
y=anchorValue+edge;
}
space.ensureAtLeast(space);

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
result=(Number)annotations.get(0).doubleValue();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<getSeriesCount();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
setFixedDomainAxisSpaceForSubplots(space);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getCurrentPaint());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
Collections.sort(annotations);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null&&yAxis.getValue()!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
space.add(anchorValue,edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.rangeCrosshairLockedOnData=false;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
result[0][i]=this.getX(i).doubleValue();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null&&edge!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(i,weight));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
g2.fillRect(edge,weight,1,1);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.weight=weight;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(i>weight){
delete(0,count-maximum);
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
rangeGridlinePaint=lookupSectionOutlinePaint(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
toAdd=yAxis.clone();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(DEFAULT_VALUE_LABEL_FONT==null){
result=getTickLabelFont();
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(DEFAULT_CROSSHAIR_PAINT==null){
result=getTickLabelPaint();
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.draw(null);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(null);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue=estimateMaximumTickLabelHeight(g2);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
datasetChanged(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
fireSeriesChanged();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
(Marker)yAxis.iterator().next().removeChangeListener(this);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
edge=Double.isNaN(anchorValue)?getRangeBase():y0;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getTickLabelFont());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.clip(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.fill(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(edge);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new AffineTransform().setToTranslation(anchorValue,anchorValue);
g2.fill(edge);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(i==null){
throw new IllegalArgumentException("Null \'zone\' argument.");
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
peg(Calendar.getInstance(i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.removeChangeListener(this);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.annotations.remove(i);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
fireDatasetChanged();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.removeChangeListener(this);
this.annotations.remove(i);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.removeChangeListener(this);
fireDatasetChanged();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.annotations.remove(i);
fireDatasetChanged();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.removeChangeListener(this);
this.annotations.remove(i);
fireDatasetChanged();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.rangeGridlinePaint);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(this.rangeCrosshairStroke);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
g2.setStroke(this.rangeCrosshairStroke);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
path=new GeneralPath();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<getListCount();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
annotations.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=valueToJava2D(serialVersionUID,plotArea,edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setXORMode(Color.gray);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaintMode();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setXORMode(Color.gray);
g2.setPaintMode();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
result.height=calculateTotalHeight(size.height);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
result.width=calculateTotalWidth(size.width);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(i);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
anchorValue=result+weight*(yAxis+anchorValue);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getFont());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getPaint());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
new Line2D.Double().setLine(edge,plotArea.getMinY(),x,plotArea.getMaxY());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
defaultDisplay(g2,new Line2D.Double());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(rangeCrosshairStroke);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(rangeCrosshairStroke);
g2.setPaint(rangeGridlinePaint);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
yAxis.trim(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawChipGrid(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawWaferEdge(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
TextUtilities.drawAlignedString(edge,g2,(float)plotArea.getCenterX(),(float)plotArea.getCenterY()+DEFAULT_CIRCLE_SIZE,TextAnchor.TOP_CENTER);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawBackground(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
axisOffset.trim(plotArea);
drawBackground(g2,plotArea);
drawOutline(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.translate(insets.left,insets.top);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawTicks(g2,plotArea,anchorValue,anchorValue);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemOutlinePaint(weight,i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
labelBounds=yAxis.getBounds2D();
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(rangeGridlinePaint);
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.drawLine(center.x,center.y,p.x,p.y);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(areaState.area);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isOutline()){
g2.setStroke(getItemOutlineStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(areaState.area);
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemLabelPaint(weight,weight));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(edge);
g2.setPaint(getItemLabelPaint(weight,weight));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(getFont());
g2.setPaint(getPaint());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(edge);
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(this.rangeGridlinePaint);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.transform(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getItemStroke(weight,i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=plotArea;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
plotArea=plotArea;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int i=0;i<this.rangeAxes.size();i++){
maxW=Math.max(anchorValue,s.width);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
maxH=Math.max(anchorValue,s.height);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
maxW=Math.max(anchorValue,s.width);
maxH=Math.max(anchorValue,s.height);

Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(new BasicStroke(1.0));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(plotArea);
g2.draw(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(plotArea);
g2.draw(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(Color.gray);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getLabelPaint());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,xx));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue-anchorValue/2,yyMax,xx+width/2));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,xx,anchorValue));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue-anchorValue/2,anchorValue,xx+width/2,yyMax));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,yymid));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.draw(new Line2D.Double(anchorValue,anchorValue,xxmid,anchorValue));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setClip(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(new Rectangle2D.Double(anchorValue,anchorValue,anchorValue,anchorValue));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(edge);
g2.fill(new Rectangle2D.Double(anchorValue,anchorValue,anchorValue,anchorValue));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(lookupSectionPaint(getSectionKey(weight),true));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
yAxis.trim(plotArea);
drawBackground(g2,plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.trim(plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBackground(g2,plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
yAxis.trim(plotArea);
drawBackground(g2,plotArea);
this.axisOffset.trim((Rectangle2D)plotArea.clone());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.dispose();
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(listeners.length==0){
return ;
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isDrawBarOutline()&&Math.abs(anchorValue-anchorValue)>3){
g2.setStroke(getItemStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(plotArea);
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
for(int i=0;i<this.rangeAxes.size();i++){
yAxis.addAll(edge);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(isDrawBarOutline()&&Math.abs(anchorValue)>3){
g2.setStroke(getItemOutlineStroke(weight,i));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(plotArea);
}
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
for(int i=0;i<this.rangeAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getItemPaint(weight,i));
g2.fill(plotArea);
for(int i=0;i<this.rangeAxes.size();i++){
itemPaint=getGradientPaintTransformer().transform(edge,plotArea);
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setXORMode(Color.orange);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.drawLine((int)anchorValue,(int)anchorValue,(int)edge,(int)anchorValue);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(getAxisLinePaint());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getAxisLineStroke());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimMargin(contentArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawBorder(g2,(Rectangle2D)plotArea.clone());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimBorder(contentArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
plotArea=trimPadding(contentArea);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
i=4*lenX;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setPaint(edge);
g2.setStroke(getItemStroke(weight,i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
defaultDisplay(g2,edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setStroke(getSeriesOutlineStroke(i));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.setComposite(edge);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.draw(g2,(float)anchorValue,(float)anchorValue,RectangleAnchor.RIGHT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis.draw(g2,(float)anchorValue,(float)anchorValue,RectangleAnchor.LEFT);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
g2.fill(new Ellipse2D.Double(anchorValue-DEFAULT_CIRCLE_SIZE/2,anchorValue-DEFAULT_CIRCLE_SIZE/2,DEFAULT_CIRCLE_SIZE,DEFAULT_CIRCLE_SIZE));
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
this.edge=Math.max(this.size,weight+1);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
super.setAutoRangeMinimumSize(anchorValue,rangeCrosshairLockedOnData);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
yAxis=new ArrayList(annotations.size());
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
drawZoomRectangle(g2);
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}

========
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.maxValue=Double.NEGATIVE_INFINITY;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.minValue=Double.POSITIVE_INFINITY;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.maxValue=Double.NEGATIVE_INFINITY;
this.minValue=Double.POSITIVE_INFINITY;

for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
start=i+1;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
weight++;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
start=i+1;
weight++;

for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
weight++;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(i==-1){
throw new TimePeriodFormatException("Missing Q.");
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=PlotOrientation.VERTICAL){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
notifyListeners(new PlotChangeEvent(this));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
g2.setPaint(edge);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
g2.setStroke(getItemStroke(weight,i));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace==PlotOrientation.VERTICAL){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
g2.setClip(getWaferEdge(plotArea));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
this.mapDatasetToDomainAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
if(yAxis.add((Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue())){
String getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - "=getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ";
String getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - "=getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ";
Shape new Rectangle2D.Double(1.0,1.0,1.0,1.0)=new Rectangle2D.Double(1.0,1.0,1.0,1.0);
Paint getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue())=getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue());
Paint Color.black=Color.black;
Stroke DEFAULT_STROKE=DEFAULT_STROKE;
fixedLegendItems.add(new LegendItem(getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",null,null,new Rectangle2D.Double(1.0,1.0,1.0,1.0),getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue()),DEFAULT_STROKE,Color.black));
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
if(!isVisible()){
return fixedRangeAxisSpace;
}
if(getFixedDimension()>0.0){
fixedRangeAxisSpace.ensureAtLeast(dimension,edge);
}
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
org.jfree.chart.plot.CategoryPlot,2486
org.jfree.chart.plot.CategoryPlot,2487
org.jfree.chart.plot.CategoryPlot,2488
org.jfree.chart.plot.CategoryPlot,2489
org.jfree.chart.plot.CategoryPlot,2490
org.jfree.chart.plot.CategoryPlot,2494
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.RIGHT);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.BOTTOM);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getDomainAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(space==null){
space=new AxisSpace();
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getFixedDimension()>0.0){
space.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(fixedRangeAxisSpace!=null){
if(orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.maxValue=Double.NEGATIVE_INFINITY;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.minValue=Double.POSITIVE_INFINITY;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
this.maxValue=Double.NEGATIVE_INFINITY;
this.minValue=Double.POSITIVE_INFINITY;

for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return fixedDomainAxisSpace;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return ret;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
this.yAxis=null;
return space;

========
========
if(RectangleEdge.isTopOrBottom(edge)){
if(isVerticalTickLabels()){
space.add(TextUtilities.getTextBounds(this.yAxis.getText(),g2,g2.getFontMetrics(getTickLabelFont())).getHeight()/2,RectangleEdge.RIGHT);
}else {
space.add(r.getWidth()/2,RectangleEdge.RIGHT);
}
}else if(RectangleEdge.isLeftOrRight(edge)){
if(isVerticalTickLabels()){
space.add(r.getWidth()/2,RectangleEdge.TOP);
}else {
space.add(r.getHeight()/2,RectangleEdge.TOP);
}
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
start=i+1;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
weight++;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
start=i+1;
weight++;

for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace==null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
weight++;
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(i==-1){
throw new TimePeriodFormatException("Missing Q.");
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=PlotOrientation.VERTICAL){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
fixedLegendItems.add(new LegendItem(getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",null,null,new Rectangle2D.Double(1.0,1.0,1.0,1.0),getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue()),DEFAULT_STROKE,Color.black));
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
if(yAxis.add((Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue())){
String getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - "=getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ";
String getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - "=getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ";
Shape new Rectangle2D.Double(1.0,1.0,1.0,1.0)=new Rectangle2D.Double(1.0,1.0,1.0,1.0);
Paint getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue())=getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue());
Paint Color.black=Color.black;
Stroke DEFAULT_STROKE=DEFAULT_STROKE;
fixedLegendItems.add(new LegendItem(getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",getMinPaintValue((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).toString()+" - ",null,null,new Rectangle2D.Double(1.0,1.0,1.0,1.0),getSeriesPaint(((Integer)(Map.Entry)this.foregroundRangeMarkers.entrySet().iterator().next().getValue()).intValue()),DEFAULT_STROKE,Color.black));
}
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
notifyListeners(new PlotChangeEvent(this));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(yAxis!=null){
existing.removeChangeListener(this);
}
notifyListeners(new PlotChangeEvent(this));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
this.mapDatasetToDomainAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.drawSharedDomainAxis=false;
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToDomainAxis(0,0);
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
this.mapDatasetToRangeAxis(0,0);
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.drawSharedDomainAxis=false;
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.mapDatasetToRangeAxis(0,0);
configureDomainAxes();
configureRangeAxes();
this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if((int)(plotArea.getWidth()/10)<2){
lenX=2;
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
weight=4*lenX;
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return NO_SUCH_PAGE;

========
========
if(getFixedDimension()>0.0){
space.ensureAtLeast(dimension,edge);
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
if(space==null){
space=new AxisSpace();
}
return space;

========
========
if(getPosition()==RectangleEdge.LEFT){
edge=plotArea.getX()+anchorValue;
}else {
startX=chartArea.getMaxX()-anchorValue;
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
if(getVerticalAlignment()==VerticalAlignment.CENTER){
anchorValue=plotArea.getMinY()+anchorValue-anchorValue/2.0;
}else if(alignment==VerticalAlignment.TOP){
startY=chartArea.getMinY()+topSpace;
}else if(alignment==VerticalAlignment.BOTTOM){
startY=chartArea.getMaxY()-yAxis;
}
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
if(this.fixedRangeAxisSpace!=null){
if(this.orientation==PlotOrientation.HORIZONTAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);
space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);
}else if(this.orientation==PlotOrientation.VERTICAL){
space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);
space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);
}
}else {
for(int i=0;i<this.rangeAxes.size();i++){
Axis yAxis=(Axis)this.rangeAxes.get(i);
if(yAxis!=null){
RectangleEdge edge=getRangeAxisEdge(i);
space=yAxis.reserveSpace(g2,this,plotArea,edge,space);
}
}
}
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
org.jfree.chart.plot.CategoryPlot,2508
========
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return ret;

========
========
drawBackground(g2,plotArea);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=new AxisSpace();
if(!isVisible()){
return new AxisState(anchorValue);
}
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
========
AxisSpace space=new AxisSpace();
new Line2D.Double().setLine(plotArea.getMinX()+(plotArea.getWidth()/2),plotArea.getMinY(),x,plotArea.getMaxY());
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
========
defaultDisplay(g2,new Line2D.Double());
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
========
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return PAGE_EXISTS;

========
========
AxisSpace space=new AxisSpace();
anchorValue=estimateMaximumTickLabelHeight(g2);
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
========
g2.fill(plotArea);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(this.rangeCrosshairStroke);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.rangeGridlinePaint);
g2.setStroke(this.rangeCrosshairStroke);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setColor(Color.white);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setColor(Color.black);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setColor(Color.white);
g2.setColor(Color.black);
AxisSpace space=new AxisSpace();
space=calculateRangeAxisSpace(g2,plotArea,space);
space=calculateDomainAxisSpace(g2,plotArea,space);
return space;

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
org.jfree.chart.plot.CategoryPlot,2509
org.jfree.chart.plot.CategoryPlot,2510
org.jfree.chart.plot.CategoryPlot,2511
org.jfree.chart.plot.CategoryPlot,2536
========
if(state==null){
state=new PlotRenderingInfo(null);
}
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state!=null){
info.setPlotArea(area);
}
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(w||b2){
return ;
}

========
========
int b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(midY||b2){
return ;
}

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(ww||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(y2||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(weight+(int)area.getWidth()==weight){
x2++;
}
if(b1||b2){
return ;
}

========
========
float b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
float b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
float b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
float b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(lenX||b2){
return ;
}

========
========
if((int)(area.getWidth()/10)<2){
lenX=2;
}
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
int b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
int b2=(plotArea.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(height||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(index||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
g2.clip(area);
if(b1||b2){
return ;
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
double b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
new Line2D.Double().setLine(area.getMinX()+(plotArea.getWidth()/2),area.getMinY(),x,plotArea.getMaxY());
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
defaultDisplay(g2,new Line2D.Double());
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
double b1=(plotArea.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
boolean b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
double b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
double b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
========
boolean b1=(area.getWidth()<=MINIMUM_WIDTH_TO_DRAW);
double b2=(area.getHeight()<=MINIMUM_HEIGHT_TO_DRAW);
if(b1||b2){
return ;
}

========
org.jfree.chart.plot.CategoryPlot,2537
org.jfree.chart.plot.CategoryPlot,2538
org.jfree.chart.plot.CategoryPlot,2543
org.jfree.chart.plot.CategoryPlot,2549
========
insets.trim(area);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(state!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(info==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
drawBackground(g2,area);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(info!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
drawBackground(g2,area);
if(state!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
if(info==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
drawBackground(g2,area);
if(info!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(state!=null){
info.setDataArea(area);
}
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(state!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(info==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(info!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(state!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(info==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(info!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(state!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(info==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
area.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
if(info!=null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
state.setDataArea(area);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,area);
}else {
drawBackground(g2,dataArea);
}
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
drawOutline(g2,area);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state==null){
state=new PlotRenderingInfo(null);
}
area=trimMargin(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
g2.setFont(getLabelFont());
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
g2.setPaint(getLabelPaint());
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(state==null){
state=new PlotRenderingInfo(null);
}
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state==null){
state=new PlotRenderingInfo(null);
}
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state==null){
state=new PlotRenderingInfo(null);
}
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area.setRect(area.getX()+this.anchorValue,area.getY()+this.anchorValue,area.getWidth()-this.left,area.getHeight()-this.top);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
area.setRect(area.getX()-this.anchorValue,area.getY()-this.anchorValue,area.getWidth()+this.left,area.getHeight()+this.top);
if(state==null){
state=new PlotRenderingInfo(null);
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
========
if(state==null){
state=new PlotRenderingInfo(null);
}
if(weight>weight&&area.getWidth()<area.getHeight()){
int weight=displayCols;
displayCols=displayRows;
displayRows=temp;
}
state.setPlotArea(area);
RectangleInsets insets=getInsets();

========
org.jfree.chart.plot.CategoryPlot,2552
========
info.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
this.axisOffset.trim((Rectangle2D)area.clone());
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(calculateAxisSpace(g2,area).shrink(area,null));

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawWaferEdge(g2,area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
drawOutline(g2,area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackgroundImage(g2,area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area=trimMargin(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
g2.setStroke(this.rangeCrosshairStroke);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setFixedRangeAxisSpaceForSubplots(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
g2.clip(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(area);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
g2.setPaint(getLabelPaint());
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=trimBorder(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=trimPadding(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=insets.createOutsetRectangle(bounds);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
new Rectangle2D.Double().setRect(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area=trimMargin(area);
area=trimBorder(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=trimMargin(area);
area=trimPadding(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=trimBorder(area);
area=trimPadding(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
========
area=trimMargin(area);
area=trimBorder(area);
area=trimPadding(area);
state.setPlotArea(area);
RectangleInsets insets=getInsets();
insets.trim(area);

========
org.jfree.chart.plot.CategoryPlot,2553
========
this.axisOffset.trim(space.shrink(area,null));
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
setFixedDomainAxisSpaceForSubplots(calculateAxisSpace(g2,area));
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
setFixedRangeAxisSpaceForSubplots(calculateAxisSpace(g2,area));
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
insets.trim(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.trim((Rectangle2D)area.clone());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
this.axisOffset.trim((Rectangle2D)area.clone());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
drawWaferEdge(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
drawOutline(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
insets.trim(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
if(state!=null){
info.setPlotArea(area);
info.setDataArea(plotArea);
}
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
drawBackgroundImage(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawQuadrants(g2,area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
area=trimMargin(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.setStroke(this.rangeCrosshairStroke);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
g2.clip(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getLabelPaint());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimBorder(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimPadding(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=insets.createOutsetRectangle(bounds);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
area=trimMargin(contentArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimBorder(contentArea);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimPadding(contentArea);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimBorder(area);
RectangleInsets insets=getInsets();
area=trimMargin(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimPadding(area);
RectangleInsets insets=getInsets();
area=trimMargin(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimBorder(area);
area=trimPadding(area);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
area=trimBorder(area);
area=trimPadding(area);
RectangleInsets insets=getInsets();
area=trimMargin(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
s.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.clip(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.dispose();
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setFont(getTickLabelFont());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
this.space=null;
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
this.space=fixedRangeAxisSpace;
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
g2.setFont(getTickLabelFont());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
render(g2,area,state);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.draw(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setPaint(Color.black);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.draw(area);
g2.setPaint(Color.black);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue+=getTickLabelFont().getLineMetrics("123",g2.getFontRenderContext()).getHeight();
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
area.closePath();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.setPaint(getItemPaint(weight,weight));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.fill(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.setFont(getLabelFont());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
g2.transform(AffineTransform.getScaleInstance(anchorValue,weight/anchorValue));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
g2.setClip(g2.getClip());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
g2.transform(AffineTransform.getScaleInstance(anchorValue,anchorValue));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
g2.setTransform(g2.getTransform());
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setTransform(g2.getTransform());
g2.dispose();
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
if(this.rangeGridlinePaint!=null&&this.rangeCrosshairStroke!=null){
g2.setPaint(this.outlinePaint);
g2.setStroke(this.outlineStroke);
g2.draw(area);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
new Point2D.Double().setLocation(area.getMinX()+this.anchorValue*plotArea.getWidth(),plotArea.getMinY()+this.anchorValue*plotArea.getHeight());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
RectangleInsets insets=getInsets();
super.setFixedRangeAxisSpace(fixedRangeAxisSpace);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
this.notifyListeners(new PlotChangeEvent(this));
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.dispose();
this.space=null;
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
RectangleInsets insets=getInsets();
if(getStagger()){
int weight*STAGGER_WIDTH=weight*STAGGER_WIDTH;
if(xStagger>(anchorValue-anchorValue)){
xStagger=(int)(x1s-x0e);
}
x1s=x0e+xStagger;
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
========
drawLine(g2,(State)state,orientation,anchorValue,anchorValue,x1s,anchorValue);
RectangleInsets insets=getInsets();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);

========
org.jfree.chart.plot.CategoryPlot,2556
========
this.insets.trim(dataArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
this.axisOffset.trim(dataArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
state.setDataArea(dataArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
setFixedDomainAxisSpaceForSubplots(space);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
setFixedRangeAxisSpaceForSubplots(space);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
insets.trim(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
drawWaferEdge(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
insets.trim(area);
drawBackground(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackgroundImage(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.dataArea=new Rectangle2D[this.annotations.size()];
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimMargin(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
drawQuadrants(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimBorder(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimPadding(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.clip(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
area=trimMargin(contentArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimBorder(contentArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimPadding(contentArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimMargin(area);
area=trimBorder(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimMargin(area);
area=trimPadding(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimBorder(area);
area=trimPadding(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
area=trimMargin(area);
area=trimBorder(area);
area=trimPadding(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
drawBackground(g2,area);
g2.clip(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
g2.clip(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
g2.clip(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(weight>area.getMinX()){
g2.drawString(UNITS[this.weight],tickX1,(int)(area.getMinY()+20));
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setStroke(this.rangeCrosshairStroke);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
insets.trim(dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
dataArea.setRect(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setFont(getTickLabelFont());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
s.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
render(g2,area,state);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area,state);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setClip(g2.getClip());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(area);
g2.setClip(g2.getClip());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,area);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area);
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,area);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(dataArea);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.dispose();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.dataArea=null;
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.draw(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(Color.black);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.draw(area);
g2.setPaint(Color.black);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.b2){
g2.setPaint(rangeGridlinePaint);
}else {
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.transform(AffineTransform.getScaleInstance(anchorValue,weight/anchorValue));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(getItemPaint(weight,weight));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.fill(area);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.transform(AffineTransform.getScaleInstance(anchorValue,anchorValue));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setTransform(g2.getTransform());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setTransform(g2.getTransform());
g2.dispose();
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getLabelFont());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
if(this.rangeGridlinePaint!=null&&this.rangeCrosshairStroke!=null){
g2.setPaint(this.outlinePaint);
g2.setStroke(this.outlineStroke);
g2.draw(area);
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
drawTicks(g2,area,anchorValue,anchorValue);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
g2.setPaint(getItemOutlinePaint(weight,weight));
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
new Point2D.Double().setLocation(area.getMinX()+this.anchorValue*plotArea.getWidth(),plotArea.getMinY()+this.anchorValue*plotArea.getHeight());
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
if(getStagger()){
int weight*STAGGER_WIDTH=weight*STAGGER_WIDTH;
if(xStagger>(anchorValue-anchorValue)){
xStagger=(int)(x1s-x0e);
}
x1s=x0e+xStagger;
}
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
========
drawLine(g2,(State)state,orientation,anchorValue,anchorValue,x1s,anchorValue);
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);

========
org.jfree.chart.plot.CategoryPlot,2557
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.trim(dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
state.setDataArea(dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
this.axisOffset.trim(dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
========
setFixedDomainAxisSpaceForSubplots(space);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
setFixedRangeAxisSpaceForSubplots(space);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.drawSharedDomainAxis){
drawBackground(g2,area);
}
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
insets.trim(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
drawWaferEdge(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
insets.trim(area);
drawBackground(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
drawBackgroundImage(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(dataArea);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawQuadrants(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
area=trimMargin(area);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setFont(getTickLabelFont());
this.axisOffset.trim(dataArea);

========
========
area=trimBorder(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
area=trimPadding(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getTickLabelFont());
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
render(g2,area,state);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
dataArea=trimMargin(contentArea);
this.axisOffset.trim(dataArea);

========
========
dataArea=trimBorder(contentArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
dataArea=trimPadding(contentArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
area=trimBorder(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
area=trimMargin(area);
this.axisOffset.trim(dataArea);

========
========
area=trimPadding(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
area=trimMargin(area);
this.axisOffset.trim(dataArea);

========
========
area=trimBorder(area);
area=trimPadding(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
area=trimBorder(area);
area=trimPadding(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
area=trimMargin(area);
this.axisOffset.trim(dataArea);

========
========
g2.clip(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
g2.clip(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,area);
g2.clip(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,area);
drawOutline(g2,area);
g2.clip(area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
dataArea.setRect(area);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
if(weight>area.getMinX()){
g2.drawString(UNITS[this.weight],tickX1,(int)(area.getMinY()+20));
}
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setStroke(this.rangeCrosshairStroke);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area,state);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
g2.setClip(g2.getClip());
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setClip(g2.getClip());
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(dataArea);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,area);
}
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawAnnotations(g2,area);
if(!rangeCrosshairLockedOnData){
drawNoDataMessage(g2,area);
}
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(area);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(dataArea);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
g2.dispose();
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.draw(area);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(Color.black);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.draw(area);
g2.setPaint(Color.black);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
if(this.b2){
g2.setPaint(rangeGridlinePaint);
}else {
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
}
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.transform(AffineTransform.getScaleInstance(anchorValue,weight/anchorValue));
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(getItemPaint(weight,weight));
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.fill(area);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.transform(AffineTransform.getScaleInstance(anchorValue,anchorValue));
this.axisOffset.trim(dataArea);

========
========
g2.setTransform(g2.getTransform());
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setTransform(g2.getTransform());
g2.dispose();
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setFont(getLabelFont());
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
if(this.rangeGridlinePaint!=null&&this.rangeCrosshairStroke!=null){
g2.setPaint(this.outlinePaint);
g2.setStroke(this.outlineStroke);
g2.draw(area);
}
this.axisOffset.trim(dataArea);

========
========
drawTicks(g2,area,anchorValue,anchorValue);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(getItemOutlinePaint(weight,weight));
this.axisOffset.trim(dataArea);

========
========
state.setPieHRadius((area.getHeight()-weight)/2.0);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
new Point2D.Double().setLocation(area.getMinX()+this.anchorValue*plotArea.getWidth(),plotArea.getMinY()+this.anchorValue*plotArea.getHeight());
this.axisOffset.trim(dataArea);

========
========
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
if(getStagger()){
int weight*STAGGER_WIDTH=weight*STAGGER_WIDTH;
if(xStagger>(anchorValue-anchorValue)){
xStagger=(int)(x1s-x0e);
}
x1s=x0e+xStagger;
}
this.axisOffset.trim(dataArea);

========
========
drawLine(g2,(State)state,orientation,anchorValue,anchorValue,x1s,anchorValue);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);

========
========
setFixedDomainAxisSpaceForSubplots(space);
AxisSpace space=calculateAxisSpace(g2,area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);

========
org.jfree.chart.plot.CategoryPlot,2558
========
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(area);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(dataArea,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
info.setDataArea(dataArea);

========
========
drawOutline(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
drawChipGrid(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
drawWaferEdge(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
drawBackground(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
g2.setFont(getTickLabelFont());
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
g2.clip(dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
dataArea.setRect(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setClip(g2.getClip());
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setClip(g2.getClip());
Rectangle2D dataArea=space.shrink(area,null);
g2.clip(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawCornerTextItems(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
drawBackgroundImage(g2,dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
g2.setStroke(this.rangeCrosshairStroke);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea=trimBorder(area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
dataArea=trimPadding(area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
dataArea=trimMargin(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
this.fixedDomainAxisSpace=space;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
this.fixedRangeAxisSpace=space;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea=trimBorder(area);
Rectangle2D dataArea=space.shrink(area,null);
dataArea=trimMargin(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
dataArea=trimPadding(area);
Rectangle2D dataArea=space.shrink(area,null);
dataArea=trimMargin(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
dataArea=trimBorder(area);
dataArea=trimPadding(area);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
dataArea=trimBorder(area);
dataArea=trimPadding(area);
Rectangle2D dataArea=space.shrink(area,null);
dataArea=trimMargin(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
if(insets==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset=insets;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Rectangle2D dataArea=space.shrink(area,null);
if(insets==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.axisOffset=insets;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,dataArea);
g2.clip(dataArea);
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
super.setFixedRangeAxisSpace(space);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
========
Rectangle2D dataArea=space.shrink(area,null);
this.axisOffset=RectangleInsets.ZERO_INSETS;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
org.jfree.chart.plot.CategoryPlot,2560
========
this.axisOffset.trim(area);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setDataArea(dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setDataArea(dataArea);
this.axisOffset.trim(area);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
this.axisOffset.trim(area);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
this.axisOffset.trim(area);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state!=null){
info.setDataArea(dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
drawBackground(g2,dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,dataArea);
this.axisOffset.trim(area);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(this.drawSharedDomainAxis){
drawBackground(g2,dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.trim((Rectangle2D)dataArea.clone());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawBackground(g2,dataArea);
this.axisOffset.trim((Rectangle2D)dataArea.clone());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(getTickLabelFont());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
setFixedDomainAxisSpaceForSubplots(space);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
setFixedRangeAxisSpaceForSubplots(space);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
new java.util.ArrayList().clear();
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new java.util.ArrayList().clear();
g2.setFont(getTickLabelFont());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(isRangeCrosshairVisible()){
drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.setBaseLinesVisible(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
this.axisOffset.setPlotLines(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
this.axisOffset.setBaseShapesVisible(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.clip(dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if((AxisState)foregroundRangeMarkers.get(getRangeAxis())==null){
if(parentState!=null){
rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());
}
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(getRenderer(weight)==null){
renderer=getRenderer(0);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if((AxisState)foregroundRangeMarkers.get(getDomainAxis())==null){
if(parentState!=null){
domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());
}
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.clip(dataArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea.setRect(area.getX()+4,area.getY()+4,area.getWidth()-8,area.getHeight()-8);
if(this.drawSharedDomainAxis){
drawBackground(g2,dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,dataArea);
g2.clip(dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,dataArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawOutline(g2,dataArea);
g2.clip(dataArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.trim(dataArea);
info.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setClip(g2.getClip());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
g2.setClip(g2.getClip());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(parentState==null){
parentState=new PlotState();
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
parentState.getSharedAxisStates().put(getDomainAxis(),getDomainAxis().draw(g2,RectangleEdge.coordinate(dataArea,getDomainAxisEdge()),area,dataArea,getDomainAxisEdge(),state));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(parentState==null){
parentState=new PlotState();
}
parentState.getSharedAxisStates().put(getDomainAxis(),getDomainAxis().draw(g2,RectangleEdge.coordinate(dataArea,getDomainAxisEdge()),area,dataArea,getDomainAxisEdge(),state));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue=estimateMaximumTickLabelHeight(g2);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(getRenderer(weight)!=null){
existing.removeChangeListener(this);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(b1||b2){
return ;
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
drawWaferEdge(g2,dataArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
dataArea.setRect(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.dispose();
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
++weight;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
++weight;
this.axisOffset.trim(dataArea);
info.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
getTransform().setToTranslation(dataArea.getMinX(),plotArea.getMaxY());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
getTransform().scale(dataArea.getWidth(),plotArea.getHeight()/3);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setFont(getFont());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setPaint(getPaint());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
new Line2D.Double().setLine(dataArea.getMinX()+(plotArea.getWidth()/2),dataArea.getMinY(),x,plotArea.getMaxY());
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(this.rangeGridlinePaint!=null){
g2.setPaint(this.backgroundPaint);
g2.fill(dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(this.rangeGridlinePaint!=null&&this.rangeCrosshairStroke!=null){
g2.setPaint(this.outlinePaint);
g2.setStroke(this.outlineStroke);
g2.draw(dataArea);
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(!isVisible()){
return space;
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(weight-COLUMN_RADIUS>area.getMinX()){
g2.drawString(UNITS[this.weight],tickX1,(int)(area.getMinY()+20));
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setStroke(this.rangeCrosshairStroke);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea=trimMargin(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(this.DEFAULT_GRIDLINE_STROKE);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
dataArea=trimMargin(contentArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
dataArea=trimBorder(contentArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
dataArea=trimPadding(contentArea);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(space==null){
space=new AxisSpace();
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(space==null){
space=new AxisSpace();
}
if(!isVisible()){
return space;
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
if(weight!=0){
return NO_SUCH_PAGE;
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
area.closePath();
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setPaint(getItemPaint(weight,weight));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.fill(area);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(insets==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset=insets;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(insets==null){
throw new IllegalArgumentException("Null \'offset\' argument.");
}
this.axisOffset=insets;
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(rangeCrosshairStroke);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(rangeCrosshairStroke);
g2.setPaint(getItemPaint(weight,weight));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.transform(AffineTransform.getScaleInstance(weight/anchorValue,weight/anchorValue));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setStroke(getItemOutlineStroke(weight,weight));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
g2.setPaint(getItemOutlinePaint(weight,weight));
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
========
this.datasets=new ObjectList();
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.axisOffset.trim(dataArea);
this.axisOffset=RectangleInsets.ZERO_INSETS;
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.datasets=new ObjectList();
this.axisOffset.trim(dataArea);
this.axisOffset=RectangleInsets.ZERO_INSETS;
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.datasets=new ObjectList();
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.axisOffset.trim(dataArea);
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.axisOffset.trim(dataArea);
this.axisOffset=RectangleInsets.ZERO_INSETS;
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.datasets=new ObjectList();
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
this.axisOffset.trim(dataArea);
this.axisOffset=RectangleInsets.ZERO_INSETS;
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
org.jfree.chart.plot.CategoryPlot,2564
org.jfree.chart.plot.CategoryPlot,2565
org.jfree.chart.plot.CategoryPlot,2571
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
state.setDataArea(dataArea);
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
state.setDataArea(dataArea);
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
state.setDataArea(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(getRenderer(weight)==null){
renderer=getRenderer();
if(renderer==null){
return rangeCrosshairLockedOnData;
}
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setPlotArea(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
insets.trim(dataArea);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(this.drawSharedDomainAxis){
drawBackground(g2,dataArea);
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
insets.trim(dataArea);
if(this.drawSharedDomainAxis){
drawBackground(g2,dataArea);
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setDataArea(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
drawBackground(g2,dataArea);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.insets.trim(area);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setPlotArea(dataArea);
}
insets.trim(dataArea);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setPlotArea(dataArea);
}
drawBackground(g2,dataArea);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
insets.trim(dataArea);
drawBackground(g2,dataArea);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setPlotArea(dataArea);
}
insets.trim(dataArea);
drawBackground(g2,dataArea);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(getRenderer(weight)==null){
return ;
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setClip(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.clip(area);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if((AxisState)axisStateMap.get(getDomainAxis())==null){
if(parentState!=null){
domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());
}
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.clip(area);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(dataArea);
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state!=null){
info.setPlotArea(dataArea);
info.setDataArea(plotArea);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(getRenderer(weight)==null){
renderer=getRenderer(0);
}
Shape savedClip=g2.getClip();

========
========
if(this.rangeGridlinePaint!=null){
g2.setPaint(this.backgroundPaint);
g2.fill(dataArea);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
setFixedRangeAxisSpaceForSubplots(space);
Shape savedClip=g2.getClip();

========
========
if(parentState==null){
parentState=new PlotState();
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
parentState.getSharedAxisStates().put(getDomainAxis(),getDomainAxis().draw(g2,RectangleEdge.coordinate(dataArea,getDomainAxisEdge()),area,dataArea,getDomainAxisEdge(),state));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(parentState==null){
parentState=new PlotState();
}
parentState.getSharedAxisStates().put(getDomainAxis(),getDomainAxis().draw(g2,RectangleEdge.coordinate(dataArea,getDomainAxisEdge()),area,dataArea,getDomainAxisEdge(),state));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
state.setTicks(annotations);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setFont(getTickLabelFont());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setFont(getFont());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setPaint(getPaint());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
this.b2=false;
Shape savedClip=g2.getClip();

========
========
if(isVerticalTickLabels()){
anchorValue=g2.getFontMetrics(getTickLabelFont()).getMaxAdvance();
}else {
ol=fm.getHeight();
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setClip(getWaferEdge(area));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
anchorValue=dataArea.getMaxY()+this.axisOffset.calculateBottomOutset(dataArea.getHeight());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue=dataArea.getMinX()-this.axisOffset.calculateLeftOutset(dataArea.getWidth());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue=dataArea.getMaxX()+this.axisOffset.calculateRightOutset(dataArea.getWidth());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.clip(area);
g2.setClip(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(b2){
anchorValue=dataArea.getMinX();
anchorValue=dataArea.getMaxX();
}else {
min=dataArea.getMinY();
max=dataArea.getMaxY();
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(Color.gray);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
dataArea=trimMargin(target);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
getFrame().draw(g2,dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
getFrame().getInsets().trim(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.draw(null);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.draw(null);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.draw(null);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setStroke(DEFAULT_GRIDLINE_STROKE);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(DEFAULT_CROSSHAIR_PAINT!=null){
g2.setPaint(paint);
g2.fill(new Rectangle2D.Double(dataArea.getMinX(),anchorValue,dataArea.getWidth(),anchorValue-y2));
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
dataArea=trimMargin(contentArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
drawBorder(g2,dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getDatasetRenderingOrder()==DatasetRenderingOrder.FORWARD){
for(int this.datasets.size()-1=0;i<this.datasets.size();i++){
rangeCrosshairLockedOnData=render(g2,dataArea,i,state)||foundData;
}
}else {
for(int i=this.datasets.size()-1;i>=0;i--){
foundData=render(g2,dataArea,i,state)||foundData;
}
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
anchorValue=estimateMaximumTickLabelHeight(g2);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setPaint(getItemPaint(weight,weight));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(DEFAULT_CROSSHAIR_PAINT!=null){
g2.setPaint(paint);
g2.fill(new Rectangle2D.Double(anchorValue,dataArea.getMinY(),anchorValue-x1,dataArea.getMaxY()-dataArea.getMinY()));
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.dispose();
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(listeners.length==0){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(b1||b2){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(state!=null){
info.setPlotArea(dataArea);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
insets.trim(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawChipGrid(g2,dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
drawWaferEdge(g2,dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(b1||b2){
return ;
}
insets.trim(dataArea);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getToolTipText()!=null||getURL()!=null){
addEntity(state,area,weight,toolTip,url);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(weight<0){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));
if(weight<0){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
drawZoomRectangle(g2);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(this.rangeGridlinePaint);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
anchorValue+=getTickLabelFont().getLineMetrics("123",g2.getFontRenderContext()).getHeight();
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(orientation==PlotOrientation.HORIZONTAL){
g2.draw(new Line2D.Double(anchorValue,anchorValue,anchorValue,anchorValue));
}else if(orientation==PlotOrientation.VERTICAL){
g2.draw(new Line2D.Double(xx0,yy0,xx,yy));
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
case BULB :

if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setStroke(getItemStroke(weight,weight));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state==null){
throw new IllegalArgumentException("Null \'state\' argument.");
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state==null){
throw new IllegalArgumentException("Null \'state\' argument.");
}
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state==null){
throw new IllegalArgumentException("Null \'state\' argument.");
}
g2.setPaint(this.rangeGridlinePaint);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(this.rangeGridlinePaint);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state==null){
throw new IllegalArgumentException("Null \'state\' argument.");
}
g2.setFont(this.DEFAULT_VALUE_LABEL_FONT);
g2.setPaint(this.rangeGridlinePaint);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(anchorValue>0.0){
new Rectangle2D.Double().setRect(area.getX(),area.getY(),area.getWidth(),t);
g2.fill(rect);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.dispose();
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setFont(getLabelFont());
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getLabelPaint());
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
new AffineTransform().setToTranslation(anchorValue,anchorValue);
Shape savedClip=g2.getClip();

========
========
g2.fill(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.draw(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.fill(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
new AffineTransform().setToTranslation(anchorValue,anchorValue);
Shape savedClip=g2.getClip();

========
========
g2.draw(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
new AffineTransform().setToTranslation(anchorValue,anchorValue);
Shape savedClip=g2.getClip();

========
========
g2.fill(savedClip);
g2.draw(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.fill(savedClip);
g2.draw(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
new AffineTransform().setToTranslation(anchorValue,anchorValue);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(orientation==PlotOrientation.HORIZONTAL){
anchorValue=Math.max(low,dataArea.getMinY());
anchorValue=Math.min(high,dataArea.getMaxY());
area=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high-low);
}else if(orientation==PlotOrientation.VERTICAL){
low=Math.max(low,dataArea.getMinX());
high=Math.min(high,dataArea.getMaxX());
rect=new Rectangle2D.Double(low,dataArea.getMinY(),high-low,dataArea.getHeight());
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(orientation==PlotOrientation.HORIZONTAL){
anchorValue=Math.max(low,dataArea.getMinX());
anchorValue=Math.min(high,dataArea.getMaxX());
area=new Rectangle2D.Double(low,dataArea.getMinY(),high-low,dataArea.getHeight());
}else if(orientation==PlotOrientation.VERTICAL){
low=Math.max(low,dataArea.getMinY());
high=Math.min(high,dataArea.getMaxY());
rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high-low);
}
Shape savedClip=g2.getClip();

========
========
TextUtilities.drawAlignedString("No value",g2,(float)area.getCenterX(),(float)area.getCenterY()+DEFAULT_CIRCLE_SIZE,TextAnchor.TOP_CENTER);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
anchorValue=rectX+weight*state.getBarWidth();
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(orientation==PlotOrientation.HORIZONTAL){
g2.fillRect((int)anchorValue,(int)anchorValue,this.weight,this.weight);
}else if(orientation==PlotOrientation.VERTICAL){
g2.fillRect((int)transX,(int)transY,this.dotWidth,this.dotHeight);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(this.DEFAULT_CROSSHAIR_PAINT);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getPlot().getOutlineStroke()!=null){
anchorValue=((BasicStroke)getPlot().getOutlineStroke()).getLineWidth();
}else {
outlineStrokeWidth=1.0;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
dataArea=insets.createOutsetRectangle(bounds);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setFont(getItemLabelFont(weight,weight));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setPaint(getItemLabelPaint(weight,weight));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setFont(getItemLabelFont(weight,weight));
g2.setPaint(getItemLabelPaint(weight,weight));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(getItemPaint(weight,weight)!=null){
g2.setPaint(p);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.fill(dataArea);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state.getBarWidth()>3){
g2.setStroke(getItemStroke(weight,weight));
g2.setPaint(getItemOutlinePaint(row,column));
g2.draw(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
g2.fill(dataArea);
Shape savedClip=g2.getClip();

========
========
if(DEFAULT_CROSSHAIR_PAINT!=null&&DEFAULT_GRIDLINE_STROKE!=null){
Arc2D.Double new Arc2D.Double(area.getX(),area.getY(),area.getWidth(),area.getHeight(),anchorValue,anchorValue,Arc2D.OPEN)=new Arc2D.Double(area.getX(),area.getY(),area.getWidth(),area.getHeight(),anchorValue,anchorValue,Arc2D.OPEN);
g2.setPaint(paint);
g2.setStroke(stroke);
g2.draw(arc);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(weight!=0){
return NO_SUCH_PAGE;
}
Shape savedClip=g2.getClip();

========
========
new Line2D.Double().setLine(dataArea.getMinX()+(plotArea.getWidth()/2),dataArea.getMinY(),x,plotArea.getMaxY());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
defaultDisplay(g2,new Line2D.Double());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.translate(insets.left,insets.top);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(b2){
AffineTransform AffineTransform.getScaleInstance(this.anchorValue,this.anchorValue)=AffineTransform.getScaleInstance(this.anchorValue,this.anchorValue);
g2.transform(st);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
g2.setTransform(savedClip);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(DEFAULT_CROSSHAIR_PAINT instanceof GradientPaint){
GradientPaint (GradientPaint)DEFAULT_CROSSHAIR_PAINT=(GradientPaint)p;
if(orientation==PlotOrientation.VERTICAL){
p=new GradientPaint((float)area.getCenterX(),(float)area.getMaxY(),gp.getColor1(),(float)area.getCenterX(),(float)area.getMinY(),gp.getColor2());
}else if(orientation==PlotOrientation.HORIZONTAL){
p=new GradientPaint((float)area.getMinX(),(float)area.getCenterY(),gp.getColor1(),(float)area.getMaxX(),(float)area.getCenterY(),gp.getColor2());
}
}
Shape savedClip=g2.getClip();

========
========
g2.fill(area);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setComposite(g2.getComposite());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(area);
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.setComposite(g2.getComposite());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.fill(area);
g2.setComposite(g2.getComposite());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
g2.setPaint(DEFAULT_CROSSHAIR_PAINT);
g2.fill(area);
g2.setComposite(g2.getComposite());
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(Double.isNaN(anchorValue)){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(getItemPaint(weight,weight)!=null){
g2.setPaint(p);
}
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(this.annotations.isEmpty()){
return ;
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setColor(Color.black);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(this.annotations.isEmpty()){
return ;
}
g2.setColor(Color.black);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
(Block)annotations.get(0).setBounds(new Rectangle2D.Double((anchorValue-s.width)/2.0,0.0,s.width,s.height));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
domainGridlinesVisible=false;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
domainGridlinesVisible=false;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
domainGridlinesVisible=false;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
domainGridlinesVisible=false;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
g2.setStroke(getItemStroke(weight,weight));
Shape savedClip=g2.getClip();

========
========
g2.transform(AffineTransform.getScaleInstance(weight/anchorValue,weight/anchorValue));
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setFont(DEFAULT_VALUE_LABEL_FONT);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(area.getWidth()<area.getWidth()){
anchorValue=x+(bounds.getWidth()-r.getWidth())/2;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getPaint());
Shape savedClip=g2.getClip();

========
========
if(getToolTipText()!=null||getURL()!=null){
addEntity(state,TextUtilities.drawAlignedString(getText(),g2,(float)anchorValue+Math.cos(this.anchorValue)*(this.anchorValue+this.anchorValue),(float)anchorValue+Math.sin(this.anchorValue)*(this.anchorValue+this.anchorValue),getTextAnchor()),weight,toolTip,url);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(this.rangeGridlinePaint!=null){
 final Rectangle2D new Rectangle2D.Double(dataArea.getX()+this.anchorValue,bounds.getY()+this.anchorValue,bounds.getWidth(),bounds.getHeight())=new Rectangle2D.Double(dataArea.getX()+this.anchorValue,bounds.getY()+this.anchorValue,bounds.getWidth(),bounds.getHeight());
g2.setPaint(this.shadowPaint);
g2.fill(shadow);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(anchorValue==90||valueAngle==270){
anchorValue=x-dataArea.getWidth()/2;
}else if(valueAngle<90||valueAngle>270){
x=x-tickLabelBounds.getWidth();
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(calculateBarL0L1(anchorValue)==null){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(orientation==PlotOrientation.HORIZONTAL){
double anchorValue=anchorValue;
j2DX=anchorValue;
j2DY=temp;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(!getItemVisible(weight,weight)){
return ;
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
return ;
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=bufferG2.getClip();

========
========
if((int)Math.round(anchorValue)<(GAP_RADIUS+dataArea.getMinY())){
k=(int)(GAP_RADIUS+interior.getMinY());
weight=BULB_RADIUS;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)){
y2=0.0;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(Double.isNaN(anchorValue)){
y1=0.0;
b2=true;
}
Shape savedClip=g2.getClip();

========
========
if(orientation==PlotOrientation.HORIZONTAL){
drState.lowerCoordinates.add(new double[]{anchorValue,anchorValue});
drState.upperCoordinates.add(new double[]{anchorValue,xx});
}else if(orientation==PlotOrientation.VERTICAL){
drState.lowerCoordinates.add(new double[]{xx,yyLow});
drState.upperCoordinates.add(new double[]{xx,yyHigh});
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)){
y1=0.0;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(Double.isNaN(anchorValue)||Double.isNaN(anchorValue)){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(orientation==PlotOrientation.HORIZONTAL){
state.workingLine.setLine(anchorValue,anchorValue,anchorValue,anchorValue);
}else if(orientation==PlotOrientation.VERTICAL){
state.workingLine.setLine(transX0,transY0,transX1,transY1);
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(anchorValue<anchorValue){
double anchorValue=translatedValue1;
translatedValue1=translatedValue0;
translatedValue0=temp;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
anchorValue=dataArea.getWidth();
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(anchorValue<anchorValue){
double anchorValue=j2dy1;
j2dy1=j2dy0;
j2dy0=temp;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(getStagger()){
int weight*STAGGER_WIDTH=weight*STAGGER_WIDTH;
if(xStagger>(anchorValue-2*anchorValue-anchorValue)){
xStagger=(int)(x1s-x0e);
}
x1s=x0e+xStagger;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(this.b2){
anchorValue=baseX-anchorValue-anchorValue/2.0;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
anchorValue=anchorValue;
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(area.getWidth()<=0.0||area.getHeight()<=0.0){
return ;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(weight>weight&&area.getWidth()<area.getHeight()){
int weight=displayCols;
displayCols=displayRows;
displayRows=temp;
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
prefetchSectionPaints();
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(this.anchorValue==DEFAULT_MAX_VALUE)calculateMaxValue(weight,weight);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
if(state.getBarWidth()>3){
g2.setStroke(getItemStroke(weight,weight));
g2.setPaint(getItemOutlinePaint(row,column));
g2.draw(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.fill(dataArea);
if(state.getBarWidth()>3){
g2.setStroke(getItemStroke(weight,weight));
g2.setPaint(getItemOutlinePaint(row,column));
g2.draw(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
g2.setPaint(getItemPaint(weight,weight));
g2.fill(dataArea);
if(state.getBarWidth()>3){
g2.setStroke(getItemStroke(weight,weight));
g2.setPaint(getItemOutlinePaint(row,column));
g2.draw(dataArea);
}
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(state!=null){
info.setDataArea(dataArea);
}
drawBackground(g2,dataArea);
Shape savedClip=g2.getClip();

========
========
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
if(area==null){
throw new IllegalArgumentException("Null \'area\' argument.");
}
Shape savedClip=g2.getClip();

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(area.getWidth()<=0.0){
return null;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
========
if(area.getHeight()<=0.0){
return null;
}
if(getRenderer()!=null){
getRenderer().drawBackground(g2,this,dataArea);
}else {
drawBackground(g2,dataArea);
}
Map axisStateMap=drawAxes(g2,area,dataArea,state);
Shape savedClip=g2.getClip();

========
org.jfree.chart.plot.CategoryPlot,2684
========
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=-1){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
if(this.xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(index,xAxis);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
xAxis.addChangeListener(this);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(index,xAxis);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
xAxis.addChangeListener(this);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(index,xAxis);
xAxis.addChangeListener(this);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(index,xAxis);
xAxis.addChangeListener(this);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null){
xAxis.addChangeListener(this);
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null){
this.annotations.add(xAxis);
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(this.annotations);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
Collections.sort(this.annotations);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
Collections.sort(this.annotations);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
Collections.sort(this.annotations);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
xAxis.addChangeListener(this);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
xAxis.addChangeListener(this);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(new OptionalLibraryHolder(xAxis));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(new OptionalLibraryHolder(xAxis));
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
fireSeriesChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
if(xAxis!=null){
result=new BlockResult();
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
fireChartChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
fireDatasetChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
fireDatasetChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
fireDatasetChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
xAxis.addChangeListener(this);
fireDatasetChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
fireDatasetChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
xAxis.addChangeListener(this);
fireDatasetChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
xAxis.addChangeListener(this);
fireDatasetChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
xAxis.addChangeListener(this);
fireDatasetChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
notifyListeners(new PlotChangeEvent(this));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new PlotChangeEvent(this));
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
notifyListeners(new PlotChangeEvent(this));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
notifyListeners(new PlotChangeEvent(this));
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.notifyListeners(new PlotChangeEvent(this));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.notifyListeners(new PlotChangeEvent(this));
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
this.notifyListeners(new PlotChangeEvent(this));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.annotations.add(xAxis);
this.notifyListeners(new PlotChangeEvent(this));
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
notifyListeners(new AxisChangeEvent(this));
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
if(xAxis!=null){
this.annotations.remove(xAxis);
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(index,xAxis);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.domainAxisLocations.set(index,xAxis);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,xAxis);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
this.rangeAxisLocations.set(index,xAxis);
if(rangeCrosshairLockedOnData){
notifyListeners(new PlotChangeEvent(this));
}
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
updateBounds(xAxis.getPeriod(),this.annotations.size()-1);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
fireSeriesChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
fireSeriesChanged();
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.annotations.add(xAxis);
fireSeriesChanged();
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
if(xAxis!=null){
fireSeriesChanged();
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
this.domainAxes.set(index,xAxis);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
if(xAxis!=null){
axis.configure();
axis.addChangeListener(this);
}
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
if(xAxis==-1){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}

========
========
for(int index=weight;index<this.domainAxes.size();index++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=0;index<=this.domainAxes.size();index++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=weight;index<=this.domainAxes.size();index++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=0;index<this.domainAxes.size();index++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
xAxis.addChangeListener(this);
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=0;index<this.domainAxes.size();index++){
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis==null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=0;index<this.domainAxes.size();index++){
if((Axis)this.domainAxes.get(index)!=null){
RectangleEdge xAxis=getDomainAxisEdge(index);
space=(Axis)this.domainAxes.get(index).reserveSpace(g2,this,plotArea,xAxis,fixedRangeAxisSpace);
}
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
========
for(int index=0;index<this.domainAxes.size();index++){
if(index==annotations.size()){
break;
}
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
TESTING : org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
========
for(int index=0;index<this.domainAxes.size();index++){
(Block)annotations.get(index).setBounds(new Rectangle2D.Double(weight*xAxis,weight*anchorValue,width,height));
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
========
for(int index=0;index<this.domainAxes.size();index++){
if(index==annotations.size()){
break;
}
(Block)annotations.get(index).setBounds(new Rectangle2D.Double(weight*xAxis,weight*anchorValue,width,height));

CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
========
for(int index=0;index<this.domainAxes.size();index++){
if((ValueAxis)this.domainAxes.get(index)!=null){
(ValueAxis)this.domainAxes.get(index).removeChangeListener(this);
}
CategoryAxis xAxis=(CategoryAxis)this.domainAxes.get(index);
if(xAxis!=null){
axisCollection.add(xAxis,getDomainAxisEdge(index));
}
}

========
Timeout!

real	301m42.744s
user	359m57.030s
sys	116m8.295s
