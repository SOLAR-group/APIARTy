/simfix/SimFix/sbfl/projects/
=================================================
Project : chart_11	start : 21/01/08 18:30

TIMEOUT : 18000000
org.jfree.chart.util.ShapeUtilities,265
========
if(p2==null){
return (p2==null);
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,268
========
if(p1==null){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,271
org.jfree.chart.util.ShapeUtilities,274
org.jfree.chart.util.ShapeUtilities,275
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
PathIterator iterator1=p1.getPathIterator(null);
PathIterator iterator2=p1.getPathIterator(null);
double[] d1=new double[6];

========
org.jfree.chart.util.ShapeUtilities,276
========
if(p1.getWindingRule()!=p1.getWindingRule()){
return false;
}
PathIterator iterator2=p1.getPathIterator(null);
double[] d1=new double[6];
double[] d2=new double[6];

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
PathIterator iterator2=p1.getPathIterator(null);
double[] d1=new double[6];
double[] d2=new double[6];

========
org.jfree.chart.util.ShapeUtilities,277
========
double[] d1=new double[6];
double[] d2=new double[6];
boolean done=iterator2.isDone()&&iterator1.isDone();

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,278
org.jfree.chart.util.ShapeUtilities,279
========
if(!Arrays.equals(this.d1,d2)){
return false;
}

========
========
if(!Arrays.equals(d1,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(this.d1,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(d1,that.seriesNeedle)){
return false;
}

========
========
if(!Arrays.equals(d1,that.paintSequence)){
return false;
}

========
========
if(!Arrays.equals(d1,that.outlinePaintSequence)){
return false;
}

========
========
if(!Arrays.equals(d1,that.strokeSequence)){
return false;
}

========
========
if(!Arrays.equals(d1,that.outlineStrokeSequence)){
return false;
}

========
========
if(!Arrays.equals(d1,that.labelInfo)){
return false;
}

========
========
if(!Arrays.equals(d1,that.months)){
return false;
}

========
========
if(!Arrays.equals(d1,that.showYear)){
return false;
}

========
========
if(!Arrays.equals(d1,that.quarters)){
return false;
}

========
========
if(!Arrays.equals(d1,that.data)){
return false;
}

========
========
if(!Arrays.equals(d1,that.date)){
return false;
}

========
========
if(!Arrays.equals(d1,that.open)){
return false;
}

========
========
if(!Arrays.equals(d1,that.high)){
return false;
}

========
========
if(!Arrays.equals(d1,that.low)){
return false;
}

========
========
if(!Arrays.equals(d1,that.close)){
return false;
}

========
========
if(!Arrays.equals(d1,that.volume)){
return false;
}

========
========
if(!Arrays.equals(d1,that.seriesKeys)){
return false;
}

========
========
if(!Arrays.equals(d1,that.categoryKeys)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,d2)){
return false;
}

========
========
if(!Arrays.equals(d1,p2.xpoints)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,d2)){
return false;
}

========
========
if(!Arrays.equals(d1,p2.ypoints)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=pi.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(new float[6]);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
iterator2.next();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
iterator2.next();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(new float[6]);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
pi.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.tickLabelsVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.defaultEntityRadius){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1==seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=null){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!placed){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
double seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.seg2!=that.stripOutlineVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
fillBand=!done;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(false){
invalidateRangeInfo();
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.radiusGridlinesVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
categoryIndex=seg2+1;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
currentGridBandIsDark=!done;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
fireChangeEvent();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().getDefaultWriteParam().setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().getDefaultWriteParam().setCompressionQuality(this.SQRT2);
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().dispose();
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.lineVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.baseShapesFilled){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.useOutlinePaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.useSeriesOffset){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.showOutline){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.autoWidthMethod){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.useOutlinePaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.autoTickUnitSelection){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.verticalTickLabels){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.dotWidth){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.dotHeight){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.drawXError){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.drawYError){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.useFillPaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.drawOutlines){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.useOutlinePaint){
return false;
}
if(this.seg2!=that.useSeriesOffset){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
float seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
float seg1=iterator1.currentSegment(d1);
float seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
float seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
notifyListeners(new RendererChangeEvent(this));
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.darkerSides){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.datasetIndex){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.renderAsPercentages){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.precision){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.scaleType){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.centerBarAtStartValue){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.roundXCoordinates){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.SQRT2!=that.alpha){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.stagger){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.minorTickCount){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.showOutline){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg2!=that.shapesVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.shapesFilled){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.done!=that.plotArea){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
if(this.seg1!=that.ignoreZeroValues){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
double seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(".");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(".");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,280
org.jfree.chart.util.ShapeUtilities,283
========
if(seg1!=seg2){
return false;
}
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);

========
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.getPathIterator(d1);
int seg2=iterator2.getPathIterator(d2);

========
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.getPathIterator(d1);
int seg2=iterator2.currentSegment(d2);

========
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.getPathIterator(d2);

========
org.jfree.chart.util.ShapeUtilities,284
========
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
int seg1=iterator1.getPathIterator(d1);
int seg2=iterator2.getPathIterator(d2);
if(seg1!=seg2){
return false;
}

========
========
int seg1=iterator1.getPathIterator(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}

========
========
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.getPathIterator(d2);
if(seg1!=seg2){
return false;
}

========
========
if(p1.getWindingRule()!=p2.getWindingRule()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,285
org.jfree.chart.util.ShapeUtilities,288
org.jfree.chart.util.ShapeUtilities,291
========
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
done=iterator1.isDone()&&iterator2.isDone();
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(seg1!=seg2){
return false;
}
done=iterator1.isDone()&&iterator2.isDone();
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(d1,d2)){
return false;
}
this.seg2=this.seg2;
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(this.d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.polygon)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(this.d1,that.polygon)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.seriesNeedle)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.paintSequence)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.outlinePaintSequence)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.strokeSequence)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.outlineStrokeSequence)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.labelInfo)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.months)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.showYear)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.quarters)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.data)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.date)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.open)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.high)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.low)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.close)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.volume)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.seriesKeys)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,that.categoryKeys)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(p1.xpoints,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,p2.xpoints)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(p1.ypoints,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,p2.ypoints)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(this.done!=that.showOutline){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(this.done!=that.useOutlinePaint){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(this.done!=that.drawSeriesLineAsPath){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(this.seg2!=that.dotHeight){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(this.done!=that.verticalTickLabels){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();

========
========
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
pi.next();

========
org.jfree.chart.util.ShapeUtilities,292
========
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
pi.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();

========
org.jfree.chart.util.ShapeUtilities,293
org.jfree.chart.util.ShapeUtilities,294
Find no block!
org.jfree.chart.util.ShapeUtilities,295
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=pi.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(new float[6]);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
iterator2.next();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
iterator2.next();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(new float[6]);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
pi.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.seg2!=that.stripOutlineVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.tickLabelsVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.defaultEntityRadius){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1==seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=null){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!placed){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
double seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(false){
invalidateRangeInfo();
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
fillBand=!done;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.radiusGridlinesVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
categoryIndex=seg2+1;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
currentGridBandIsDark=!done;
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1==null){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
fireChangeEvent();
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().getDefaultWriteParam().setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().getDefaultWriteParam().setCompressionQuality(this.SQRT2);
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
(ImageWriter)ImageIO.getImageWritersByFormatName("jpeg").next().dispose();
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.showOutline){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.dotWidth){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg1!=that.dotHeight){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.baseShapesFilled){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.useOutlinePaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg1!=that.useSeriesOffset){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.lineVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.autoWidthMethod){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg1!=that.useOutlinePaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.useFillPaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.drawOutlines){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.useSeriesOffset){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.useOutlinePaint){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return false;

========
========
if(this.seg1!=that.drawXError){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.drawYError){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.renderAsPercentages){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.precision){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.scaleType){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.centerBarAtStartValue){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.roundXCoordinates){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.SQRT2!=that.alpha){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.stagger){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.renderAsPercentages){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return false;

========
========
if(this.seg2!=that.darkerSides){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.datasetIndex){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.minorTickCount){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg1!=that.showOutline){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg2!=that.shapesVisible){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.shapesFilled){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.done!=that.plotArea){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
if(this.seg1!=that.ignoreZeroValues){
return false;
}
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
notifyListeners(new RendererChangeEvent(this));
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
float seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
float seg1=iterator1.currentSegment(d1);
float seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
float seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(".");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(".");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");
new StringBuffer().append(", but the TimeSeries is expecting an instance of ");
new StringBuffer().append(".");

if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
int seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
while(!done){
if(iterator1.isDone()!=iterator2.isDone()){
return false;
}
double seg1=iterator1.currentSegment(d1);
int seg2=iterator2.currentSegment(d2);
if(seg1!=seg2){
return false;
}
if(!Arrays.equals(d1,d2)){
return false;
}
iterator1.next();
iterator2.next();
done=iterator1.isDone()&&iterator2.isDone();
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,84
Find no block!
org.jfree.chart.util.ShapeUtilities,85
Find no block!
org.jfree.chart.util.ShapeUtilities,103
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}

========
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}

========
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}

========
org.jfree.chart.util.ShapeUtilities,105
org.jfree.chart.util.ShapeUtilities,107
Find no block!
org.jfree.chart.util.ShapeUtilities,110
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.groups=(List)KeyToGroupMap.clone(this.groups);
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.legendBar=ShapeUtilities.clone(this.legendBar);
return result;

========
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(shape==null){
return null;
}
return result;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(this.equals(TickType.MAJOR)){
result=TickType.MAJOR;
}else if(this.equals(TickType.MINOR)){
result=TickType.MINOR;
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(result==null){
result=this.shape;
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(this.equals(AreaRendererEndType.LEVEL)){
result=AreaRendererEndType.LEVEL;
}else if(this.equals(AreaRendererEndType.TAPER)){
result=AreaRendererEndType.TAPER;
}else if(this.equals(AreaRendererEndType.TRUNCATE)){
result=AreaRendererEndType.TRUNCATE;
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(this.equals(PieLabelLinkStyle.STANDARD)){
result=PieLabelLinkStyle.STANDARD;
}else if(this.equals(PieLabelLinkStyle.QUAD_CURVE)){
result=PieLabelLinkStyle.QUAD_CURVE;
}else if(this.equals(PieLabelLinkStyle.CUBIC_CURVE)){
result=PieLabelLinkStyle.CUBIC_CURVE;
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(result.getRangeAxis()!=null){
rangeAxis.configure();
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
if(result.getRangeAxis()!=null){
rangeAxis.configure();
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
if(result.getDomainAxis()!=null){
domainAxis.configure();
}
return result;

========
========
if(shape instanceof Cloneable){
try{
return (Shape)ObjectUtilities.clone(shape);
}catch (CloneNotSupportedException cnse) {
}

}
Shape result=null;
result=37*result+this.shape.hashCode();
return result;

========
org.jfree.chart.util.ShapeUtilities,111
org.jfree.chart.util.ShapeUtilities,128
org.jfree.chart.util.ShapeUtilities,129
org.jfree.chart.util.ShapeUtilities,131
org.jfree.chart.util.ShapeUtilities,132
org.jfree.chart.util.ShapeUtilities,134
org.jfree.chart.util.ShapeUtilities,135
org.jfree.chart.util.ShapeUtilities,137
org.jfree.chart.util.ShapeUtilities,138
org.jfree.chart.util.ShapeUtilities,140
org.jfree.chart.util.ShapeUtilities,141
org.jfree.chart.util.ShapeUtilities,145
org.jfree.chart.util.ShapeUtilities,159
========
if(l2==null){
return (l2==null);
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,160
org.jfree.chart.util.ShapeUtilities,162
========
if(l1==null){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,163
org.jfree.chart.util.ShapeUtilities,165
org.jfree.chart.util.ShapeUtilities,166
org.jfree.chart.util.ShapeUtilities,168
org.jfree.chart.util.ShapeUtilities,169
org.jfree.chart.util.ShapeUtilities,171
========
if(l1==null){
return (l2==null);
}
if(l2==null){
return false;
}
if(!l1.getP1().equals(l2.getP1())){
return false;
}
if(!l1.getP2().equals(l2.getP2())){
return false;
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(l2==null){
return (l2==null);
}
if(l2==null){
return false;
}
if(!l1.getP1().equals(l2.getP1())){
return false;
}
if(!l1.getP2().equals(l2.getP2())){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(l1!=null){
return (l2==null);
}
if(l2==null){
return false;
}
if(!l1.getP1().equals(l2.getP1())){
return false;
}
if(!l1.getP2().equals(l2.getP2())){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.SQRT2!=that.alpha){
return false;
}
if(l1==null){
return (l2==null);
}
if(l2==null){
return false;
}
if(!l1.getP1().equals(l2.getP1())){
return false;
}
if(!l1.getP2().equals(l2.getP2())){
return false;
}
return true;

========
========
if(l1==null){
return (l2==null);
}
if(l2==null){
return false;
}
if(!l1.getP1().equals(l2.getP1())){
return false;
}
if(!l1.getP2().equals(l2.getP2())){
return false;
}
return (false);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,184
========
if(e2==null){
return (e2==null);
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,185
org.jfree.chart.util.ShapeUtilities,187
========
if(e1==null){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,188
org.jfree.chart.util.ShapeUtilities,190
org.jfree.chart.util.ShapeUtilities,191
org.jfree.chart.util.ShapeUtilities,193
========
if(e2==null){
return (e2==null);
}
if(e2==null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(e1==null){
return (e2==null);
}
if(e2==null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(e1==null){
return (e2==null);
}
if(e2!=null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(e1==null){
return (e2==null);
}
if(e2==that.blockWidth){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(e1==null){
return (e2==null);
}
if(e2==that.viewW){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.value){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.quarterFirst){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.showBase){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.extent){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.baseShapesFilled){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.tickLabelsVisible){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.angle){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1!=null){
return (e2==null);
}
if(e2==null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(e1==null){
return (e2==null);
}
if(e2==that.stepPoint){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.renderAsPercentages){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.precision){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.scaleType){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.centerBarAtStartValue){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.roundXCoordinates){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.alpha){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.stagger){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=that.renderAsPercentages){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.baseLength){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.darkerSides){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.datasetIndex){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.shapesVisible){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.itemMargin){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.itemMargin){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=that.itemMargin){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=that.itemMargin){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
========
if(e1==null){
return (e2==null);
}
if(e2==ie.item){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.smallestValue){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.ignoreZeroValues){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.showOutline){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.autoWidthFactor){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.drawYError){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.outerRadius){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.outerSeparatorExtension){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.verticalTickLabels){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.yOffset){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.dotWidth){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.yOffset){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=that.yOffset){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2!=that.yOffset){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return false;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.startPercent){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.widthRadius){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.lineVisible){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==that.defaultEntityRadius){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return true;

========
========
if(e1==null){
return (e2==null);
}
if(e2==null){
return false;
}
if(!e1.getFrame().equals(e2.getFrame())){
return false;
}
return (false);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,206
========
if(a2==null){
return (a2==null);
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,207
org.jfree.chart.util.ShapeUtilities,209
========
if(a1==null){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,210
org.jfree.chart.util.ShapeUtilities,212
org.jfree.chart.util.ShapeUtilities,213
org.jfree.chart.util.ShapeUtilities,215
========
if(a1.getAngleExtent()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleStart()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleStart()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,216
org.jfree.chart.util.ShapeUtilities,218
========
if(a1.getAngleStart()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleStart()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,219
org.jfree.chart.util.ShapeUtilities,221
========
if(a1.getAngleStart()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleStart()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleStart()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getArcType()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleExtent()){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,222
org.jfree.chart.util.ShapeUtilities,224
========
if(a1.getAngleStart()!=a2.getAngleStart()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleStart()!=a2.getArcType()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleStart()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getAngleExtent()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getAngleExtent()!=a2.getArcType()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getAngleExtent()){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(a1.getArcType()!=a2.getArcType()){
return false;
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,237
org.jfree.chart.util.ShapeUtilities,238
org.jfree.chart.util.ShapeUtilities,240
org.jfree.chart.util.ShapeUtilities,241
org.jfree.chart.util.ShapeUtilities,243
org.jfree.chart.util.ShapeUtilities,244
org.jfree.chart.util.ShapeUtilities,246
========
if(!Arrays.equals(p1.ypoints,p2.xpoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.xpoints,p2.ypoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(this.xpoints,p2.xpoints)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.seriesNeedle)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.seriesNeedle)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.paintSequence)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.paintSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.outlinePaintSequence)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.outlinePaintSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.strokeSequence)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.strokeSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.outlineStrokeSequence)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.outlineStrokeSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.labelInfo)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.labelInfo)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.months)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.months)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.showYear)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.showYear)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.quarters)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.quarters)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.data)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.data)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.date)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.date)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.open)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.open)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.high)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.high)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.low)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.low)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.close)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.close)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.volume)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.volume)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.seriesKeys)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.seriesKeys)){
return false;
}

========
========
if(!Arrays.equals(p1.xpoints,that.categoryKeys)){
return false;
}

========
========
if(!Arrays.equals(this.xpoints,that.categoryKeys)){
return false;
}

========
org.jfree.chart.util.ShapeUtilities,247
org.jfree.chart.util.ShapeUtilities,249
========
if(!Arrays.equals(p1.xpoints,p2.ypoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.ypoints,p2.xpoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(this.ypoints,p2.ypoints)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.polygon)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.seriesNeedle)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.seriesNeedle)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.paintSequence)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.paintSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.outlinePaintSequence)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.outlinePaintSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.strokeSequence)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.strokeSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.outlineStrokeSequence)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.outlineStrokeSequence)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.labelInfo)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.labelInfo)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.months)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.months)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.showYear)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.showYear)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.quarters)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.quarters)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.data)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.data)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.date)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.date)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.open)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.open)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.high)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.high)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.low)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.low)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.close)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.close)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.volume)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.volume)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.seriesKeys)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.seriesKeys)){
return false;
}

========
========
if(!Arrays.equals(p1.ypoints,that.categoryKeys)){
return false;
}

========
========
if(!Arrays.equals(this.ypoints,that.categoryKeys)){
return false;
}

========
org.jfree.chart.util.ShapeUtilities,250
org.jfree.chart.util.ShapeUtilities,252
========
if(!Arrays.equals(p1.ypoints,p2.ypoints)){
return false;
}
return false;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(this.ypoints,p2.ypoints)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.quarters)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.quarters)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.polygon)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.polygon)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.seriesNeedle)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.seriesNeedle)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.paintSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.paintSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.outlinePaintSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.outlinePaintSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.strokeSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.strokeSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.outlineStrokeSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.outlineStrokeSequence)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.labelInfo)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.labelInfo)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.months)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.months)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.showYear)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.showYear)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.data)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.data)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.date)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.date)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.open)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.open)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.high)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.high)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.low)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.low)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.close)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.close)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.volume)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.volume)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.seriesKeys)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.seriesKeys)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.ypoints,that.categoryKeys)){
return false;
}
return true;

========
========
if(!Arrays.equals(this.ypoints,that.categoryKeys)){
return false;
}
return true;

========
========
if(!Arrays.equals(p1.xpoints,p2.ypoints)){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.ypoints,p2.xpoints)){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(!Arrays.equals(p1.xpoints,p2.xpoints)){
return false;
}
return true;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,266
org.jfree.chart.util.ShapeUtilities,269
org.jfree.chart.util.ShapeUtilities,272
org.jfree.chart.util.ShapeUtilities,281
org.jfree.chart.util.ShapeUtilities,286
org.jfree.chart.util.ShapeUtilities,289
org.jfree.chart.util.ShapeUtilities,310
========
if(shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}

========
========
if(this.shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}

========
========
if(shape==PlotOrientation.VERTICAL){
throw new IllegalArgumentException("Null \'shape\' argument.");
}

========
org.jfree.chart.util.ShapeUtilities,311
org.jfree.chart.util.ShapeUtilities,313
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(SQRT2,transY);
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,SQRT2);
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(SQRT2,SQRT2);
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
fireChangeEvent();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
========
notifyListeners(new RendererChangeEvent(this));
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
========
this.shape=shape;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getPathIterator(transX,transY);
return transform.createTransformedShape(shape);

========
========
if(base==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
========
if(shape==null){
if(shape==null){
return null;
}
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
========
if(this.shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform transform=AffineTransform.getTranslateInstance(transX,transY);
return transform.createTransformedShape(shape);

========
org.jfree.chart.util.ShapeUtilities,315
org.jfree.chart.util.ShapeUtilities,334
org.jfree.chart.util.ShapeUtilities,335
org.jfree.chart.util.ShapeUtilities,337
========
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' point.");
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(anchor==RectangleAnchor.RIGHT){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
org.jfree.chart.util.ShapeUtilities,338
org.jfree.chart.util.ShapeUtilities,340
========
this.shape=shape;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
this.anchor=RectangleAnchor.CENTER;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
this.locationY=x;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
this.locationY=y;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
this.anchor=anchor;
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
fireChangeEvent();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
notifyListeners(new RendererChangeEvent(this));
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor!=null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' point.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
notifyListeners(new DialLayerChangeEvent(this));
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
notifyListeners(new MarkerChangeEvent(this));
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
SQRT2=xx-(float)anchorPoint.getX();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
SQRT2=yy-(float)anchorPoint.getY();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
updateOffsets();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(this.shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(this.shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.min(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return RectangleAnchor.coordinates(null,anchor);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
if(listeners.length==0){
return ;
}
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
prefetchSectionPaints();
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
transform.setToTranslation(locationY,locationY);
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(transform==null){
continue;
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().moveTo((float)anchorPoint.getX(),(float)point1.getY());
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().append(transform,true);
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().closePath();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(transform.size()==0){
return ;
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().moveTo((float)anchorPoint.getX(),(float)point1.getY());
new GeneralPath().append(transform,true);
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().moveTo((float)anchorPoint.getX(),(float)point1.getY());
new GeneralPath().closePath();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().append(transform,true);
new GeneralPath().closePath();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
new GeneralPath().moveTo((float)anchorPoint.getX(),(float)point1.getY());
new GeneralPath().append(transform,true);
new GeneralPath().closePath();
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(base==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
if(shape==null){
return null;
}
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
setFixedRangeAxisSpaceForSubplots(null);
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
setFixedRangeAxisSpaceForSubplots(transform);
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
shape=new Rectangle2D.Double(locationY-4,locationY-4,8.0,8.0);
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(getPlot().getOutlineStroke()!=null&&outlineStroke instanceof BasicStroke){
locationY=((BasicStroke)outlineStroke).getLineWidth();
}else {
outlineStrokeWidth=1.0;
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(getPlot().getOutlineStroke()!=null){
locationY=((BasicStroke)getPlot().getOutlineStroke()).getLineWidth();
}else {
outlineStrokeWidth=1.0;
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=shape.getBounds2D().getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==RectangleAnchor.RIGHT){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getMaxRegularValue(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.max(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(getXDateFormat()!=null){
new Object[8][1]=getXDateFormat().format(new Date(transform.longValue()));
}else {
result[1]=getXFormat().format(x);
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
if(transform==null){
return ;
}
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==RectangleAnchor.LEFT){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(shape!=null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getMaxRegularValue(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(transform!=null){
locationY=x.doubleValue();
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
========
if(transform!=null){
locationY=y.doubleValue();
}
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
if(anchor==null){
throw new IllegalArgumentException("Null \'anchor\' argument.");
}
Point2D anchorPoint=RectangleAnchor.coordinates(shape.getBounds2D(),anchor);
AffineTransform transform=AffineTransform.getTranslateInstance(locationX-anchorPoint.getX(),locationY-anchorPoint.getY());
return transform.createTransformedShape(shape);

========
org.jfree.chart.util.ShapeUtilities,342
org.jfree.chart.util.ShapeUtilities,344
org.jfree.chart.util.ShapeUtilities,360
org.jfree.chart.util.ShapeUtilities,361
org.jfree.chart.util.ShapeUtilities,363
========
result=base.getBounds2D();
if(base==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
return result;

========
========
if(shape==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
return result;

========
========
if(base==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
return (Shape)ObjectUtilities.clone(base);

========
========
if(base!=null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
return result;

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
if(base==null){
return null;
}
rotate.setToTranslation(angle,y);
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
return result;

========
========
if(base==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
if(result==null){
result=this.base;
}
return result;

========
========
if(base==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
if(this.equals(PlotOrientation.HORIZONTAL)){
result=PlotOrientation.HORIZONTAL;
}else if(this.equals(PlotOrientation.VERTICAL)){
result=PlotOrientation.VERTICAL;
}
return result;

========
========
if(base==null){
return null;
}
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
Shape result=rotate.createTransformedShape(base);
if(this.equals(TickType.MAJOR)){
result=TickType.MAJOR;
}else if(this.equals(TickType.MINOR)){
result=TickType.MINOR;
}
return result;

========
org.jfree.chart.util.ShapeUtilities,364
org.jfree.chart.util.ShapeUtilities,365
org.jfree.chart.util.ShapeUtilities,380
========
AffineTransform saved=bufferG2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
defaultDisplay(g2,rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.draw(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setPaint(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
defaultDisplay(g2,shape);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
if(shape==null){
return null;
}
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
line.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.draw(shape);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
g2.draw(shape);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setPaint(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(rotate);
g2.setTransform(saved);

========
========
g2.draw(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setColor(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setPaint(getArtifactPaint());
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setPaint(saved);

========
========
notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_FINISHED,100));
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
line.draw(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setPaint(Color.black);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.fill(shape);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
g2.setPaint(Color.lightGray);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
rotate.setLine(SQRT2,SQRT2,x1,SQRT2);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.setPaint(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
area.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.fill(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.draw(saved);

========
========
setDrawSeriesLineAsPath(true);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
case BULB :

AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setComposite(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
if(listeners.length==0){
return ;
}
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
drawZoomRectangle(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.draw(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setComposite(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.setComposite(shape);
g2.setTransform(saved);

========
========
g2.setPaint(getWallPaint());
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
new GeneralPath().moveTo(x,y);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=isVerticalTickLabels()?AffineTransform.getRotateInstance(angle,x,y):TextUtilities.getTextBounds(rotate,g2,g2.getFontMetrics()).getWidth();
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=isVerticalTickLabels()?AffineTransform.getRotateInstance(angle,x,y):TextUtilities.getTextBounds(rotate,g2,g2.getFontMetrics()).getHeight();
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=g2.getFont().getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
setTickUnit((NumberTickUnit)getStandardTickUnits().getCeilingTickUnit(rotate),false,false);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
case LEFT :

AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
upperCoordinates.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
drState.lowerCoordinates.clear();
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
drState.upperCoordinates.clear();
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setComposite(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.calculateTopOutset(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.calculateBottomOutset(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.fillPolygon(new Polygon());
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.setColor(rotate);
g2.draw(shape);
g2.setColor(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setColor(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
seriesPath.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
setFixedRangeAxisSpaceForSubplots(null);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
setFixedRangeAxisSpaceForSubplots(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
TextUtilities.drawRotatedString(getText(),g2,SQRT2,rotate,getTextAnchor(),getRotationAngle(),getRotationAnchor());
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
x_graphics.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setComposite(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
drawZoomRectangle(g2);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
SQRT2=x;
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
SQRT2=y;
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.writeObject(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.writeDouble(shape);
g2.writeDouble(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.writeDouble(shape);
g2.setTransform(saved);

========
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.writeDouble(saved);

========
========
if(shape==null){
throw new IllegalArgumentException("Null \'shape\' argument.");
}
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.createUnion(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
shape=shape;
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
g2.setPaint(Color.lightGray);
g2.draw(rotate);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setPaint(Color.lightGray);
rotate.setLine(SQRT2,SQRT2,x1,SQRT2);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.draw(rotate);
rotate.setLine(SQRT2,SQRT2,x1,SQRT2);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setPaint(Color.lightGray);
g2.draw(rotate);
rotate.setLine(SQRT2,SQRT2,x1,SQRT2);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
========
g2.setPaint(getWallPaint());
new GeneralPath().moveTo(x,y);
AffineTransform saved=g2.getTransform();
AffineTransform rotate=AffineTransform.getRotateInstance(angle,x,y);
g2.transform(rotate);
g2.draw(shape);
g2.setTransform(saved);

========
org.jfree.chart.util.ShapeUtilities,381
org.jfree.chart.util.ShapeUtilities,382
org.jfree.chart.util.ShapeUtilities,383
org.jfree.chart.util.ShapeUtilities,384
org.jfree.chart.util.ShapeUtilities,386
Find no block!
org.jfree.chart.util.ShapeUtilities,400
========
p0.lineTo(-l,l);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-l);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-t,-t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-l,-t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(0.0,-t*SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(l-t,-l-t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-t*SQRT2,0.0);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(0.0,l);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-l,0.0);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-l,-s);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-l,s);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);

========
========
p0.lineTo(SQRT2+t/2.0,SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
barOutline.moveTo(-l-t,-l+t);
barOutline.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
barOutline.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
barOutline.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(SQRT2+t,SQRT2-SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
arrow.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
arrow.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bar3dRight.moveTo(-l-t,-l+t);
bar3dRight.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bar3dRight.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
bar3dRight.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bar3dTop.moveTo(-l-t,-l+t);
bar3dTop.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bar3dTop.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
bar3dTop.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
shape3.moveTo(-l-t,-l+t);
shape3.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
shape3.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
shape3.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
p0.clone();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.clone();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.clone();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.clone();
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t-getSize(),SQRT2);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
seriesPath.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
SQRT2=t;
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
SQRT2=SQRT2;
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
p0.closePath();
GeneralPath p0=new GeneralPath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
seriesPath.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
GeneralPath p0=new GeneralPath();
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
upperCoordinates.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottom.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottom.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
gp.moveTo(-l-t,-l+t);
gp.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
gp.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
gp.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottom.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
top.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
back.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
front.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
left.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
front.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
front.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
front.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
right.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottom.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
bottom.lineTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
l_path.moveTo(-l-t,-l+t);
l_path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
l_path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
l_path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
lowerCoordinates.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.append(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.max(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
path.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.closePath();
GeneralPath p0=new GeneralPath();
path.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);

========
========
p0.lineTo(t,t);
GeneralPath p0=new GeneralPath();
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);

========
========
p0.lineTo(-3.0,-2.0);
p0.closePath();
GeneralPath p0=new GeneralPath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
back.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
back.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);

========
========
GeneralPath p0=new GeneralPath();
back.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);

========
org.jfree.chart.util.ShapeUtilities,401
org.jfree.chart.util.ShapeUtilities,402
========
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,-t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,-t);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l,-t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l,-t);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t*SQRT2,0.0);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(-t*SQRT2,0.0);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,-l+t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
barOutline.moveTo(-l-t,-l+t);
barOutline.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
barOutline.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);

========
========
barOutline.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
barOutline.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);

========
========
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);

========
========
p.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);

========
========
p.moveTo(-l-t,-l+t);
p.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);

========
========
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l-t,-l+t);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l,0.0);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
bar3dRight.moveTo(-l-t,-l+t);
bar3dRight.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bar3dRight.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);

========
========
bar3dRight.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bar3dRight.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);

========
========
bar3dTop.moveTo(-l-t,-l+t);
bar3dTop.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bar3dTop.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);

========
========
bar3dTop.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bar3dTop.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);

========
========
shape3.moveTo(-l-t,-l+t);
shape3.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape3.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);

========
========
shape3.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape3.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.moveTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
area.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);

========
========
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
pointer.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
pointer.moveTo(-l-t,-l+t);
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
shape2.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
shape2.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.moveTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
clip.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);

========
========
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);

========
========
if(t<t){
y=minY;
}
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.moveTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
p0.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.clone();
left.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
seriesPath.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
SQRT2=t;
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
SQRT2=SQRT2;
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
arrow.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);

========
========
arrow.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
shape1.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
shape1.moveTo(-l-t,-l+t);
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.closePath();
shape1.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
upperCoordinates.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
upperCoordinates.lineTo(0.0,-t*SQRT2);

========
========
upperCoordinates.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
upperCoordinates.lineTo(0.0,-t*SQRT2);

========
========
seriesPath.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
right.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
right.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
right.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);

========
========
bottom.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);

========
========
bottom.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0=new GeneralPath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
lowerCoordinates.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
bottom.moveTo(-l-t,-l+t);
bottom.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
bottom.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);

========
========
gp.moveTo(-l-t,-l+t);
gp.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
gp.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);

========
========
gp.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
gp.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
bottom.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
top.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
right.moveTo(-l-t,-l+t);
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
back.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
left.moveTo(-l-t,-l+t);
back.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
top.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
front.moveTo(-l-t,-l+t);
top.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);

========
========
l_path.moveTo(-l-t,-l+t);
l_path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
l_path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
l_path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.max(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
arrow.moveTo(-l-t,-l+t);
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
arrow.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);

========
========
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
path.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
path.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.moveTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
path.lineTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.closePath();
p0.lineTo(-l-t,-l+t);
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.append(-l+t,-l-t);
p0.append(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.append(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.append(0.0,-t*SQRT2);

========
========
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l-t,-l+t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);

========
========
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
p0.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l-t,-l+t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
p0.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
front.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
p0.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
p0.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
========
back.moveTo(-l-t,-l+t);
front.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);

========
org.jfree.chart.util.ShapeUtilities,403
========
p0.lineTo(-t,-t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,-t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l,-t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t-t,l-t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t-t,l-t);
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
barOutline.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);

========
========
barOutline.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
barOutline.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);

========
========
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
area.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
area.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
clip.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
clip.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
clip.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
clip.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p.lineTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p.moveTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
p.moveTo(-l+t,-l-t);
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);

========
========
shape3.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);

========
========
shape3.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape3.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.closePath();
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.closePath();
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
area.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.closePath();
area.lineTo(-l+t,-l-t);
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l+t,-l-t);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l,0.0);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
right.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
right.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
bar3dRight.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);

========
========
bar3dRight.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bar3dRight.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);

========
========
bar3dTop.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);

========
========
bar3dTop.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bar3dTop.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);

========
========
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
seriesPath.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
SQRT2=t;
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
SQRT2=SQRT2;
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
pointer.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
pointer.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
pointer.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
pointer.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.lineTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
pointer.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);

========
========
upperCoordinates.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
upperCoordinates.lineTo(l-t,-l-t);

========
========
upperCoordinates.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
upperCoordinates.lineTo(l-t,-l-t);

========
========
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
if(t<t){
y=minY;
}
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.clone();
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.clone();
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
shape1.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
shape1.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
shape1.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
shape1.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.lineTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape1.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);

========
========
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
path.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
path.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
path.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
path.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.lineTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
path.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);

========
========
bottom.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
bottom.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
gp.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);

========
========
gp.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
gp.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);

========
========
bottom.lineTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
bottom.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
bottom.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
bottom.moveTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
bottom.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
bottom.moveTo(-l+t,-l-t);
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);

========
========
top.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
top.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
back.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
back.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
front.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
front.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
top.lineTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
top.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
top.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
top.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
top.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
top.moveTo(-l+t,-l-t);
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);

========
========
seriesPath.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
lowerCoordinates.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.lineTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
shape2.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);

========
========
l_path.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.max(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.lineTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
left.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.lineTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
right.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.lineTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
clip.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);

========
========
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
leftWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
leftWall.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
leftWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
leftWall.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);

========
========
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
bottomWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
bottomWall.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
bottomWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
bottomWall.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
p0.lineTo(t,t);
p0.moveTo(-l+t,-l-t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);

========
========
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
arrow.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
arrow.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
arrow.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
arrow.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.lineTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.closePath();
arrow.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
p0.closePath();
p0.moveTo(-l+t,-l-t);
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);

========
========
back.lineTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
back.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
back.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
back.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
back.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
back.moveTo(-l+t,-l-t);
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);

========
========
front.lineTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
front.lineTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
front.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
front.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);

========
========
front.moveTo(-l+t,-l-t);
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
p0.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
========
front.moveTo(-l+t,-l-t);
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);

========
org.jfree.chart.util.ShapeUtilities,404
========
p0.lineTo(-t,-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l,-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,-l+t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
barOutline.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);

========
========
barOutline.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
barOutline.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);

========
========
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
clip.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p.lineTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p.moveTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
p.moveTo(0.0,-t*SQRT2);
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);

========
========
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
area.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
area.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
clip.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
clip.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
clip.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
shape3.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);

========
========
shape3.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape3.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.closePath();
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.closePath();
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
area.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.closePath();
area.lineTo(0.0,-t*SQRT2);
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);

========
========
p0.lineTo(-l,0.0);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
left.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
left.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
right.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
right.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
bar3dRight.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);

========
========
bar3dRight.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bar3dRight.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);

========
========
bar3dTop.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);

========
========
bar3dTop.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bar3dTop.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);

========
========
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
seriesPath.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
SQRT2=t;
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
SQRT2=SQRT2;
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
pointer.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
pointer.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
pointer.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
pointer.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.lineTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
pointer.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);

========
========
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
if(t<t){
y=minY;
}
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
upperCoordinates.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
upperCoordinates.lineTo(l+t,-l+t);

========
========
upperCoordinates.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
upperCoordinates.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
left.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.clone();
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.clone();
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
shape1.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
shape1.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
shape1.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
shape1.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.lineTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape1.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);

========
========
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
path.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
path.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
path.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
path.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.lineTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
path.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);

========
========
gp.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);

========
========
gp.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
gp.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);

========
========
bottom.lineTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
bottom.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
bottom.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
bottom.moveTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
bottom.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
bottom.moveTo(0.0,-t*SQRT2);
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);

========
========
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
top.lineTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
top.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
top.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
top.moveTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
top.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
top.moveTo(0.0,-t*SQRT2);
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);

========
========
seriesPath.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
lowerCoordinates.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
shape2.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
shape2.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
shape2.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
shape2.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.lineTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
shape2.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);

========
========
l_path.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.max(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.lineTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
left.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.lineTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
right.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.lineTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
clip.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);

========
========
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
leftWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
leftWall.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
leftWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
leftWall.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.lineTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
leftWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);

========
========
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
bottomWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
bottomWall.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
bottomWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
bottomWall.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
p0.lineTo(t,t);
p0.moveTo(0.0,-t*SQRT2);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);

========
========
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
arrow.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
arrow.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
arrow.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
arrow.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.lineTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.closePath();
arrow.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
p0.closePath();
p0.moveTo(0.0,-t*SQRT2);
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);

========
========
back.lineTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
back.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
back.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
back.moveTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
back.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
back.moveTo(0.0,-t*SQRT2);
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);

========
========
front.lineTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
front.lineTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
front.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
front.moveTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);

========
========
front.moveTo(0.0,-t*SQRT2);
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
p0.moveTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
========
front.moveTo(0.0,-t*SQRT2);
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);

========
org.jfree.chart.util.ShapeUtilities,405
========
p0.lineTo(-t,-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(-l,-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l+t,l-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l-t,l-t);
p0.lineTo(-t*SQRT2,0.0);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
barOutline.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);

========
========
barOutline.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
barOutline.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);

========
========
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
clip.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p.lineTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p.moveTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
p.moveTo(l-t,-l-t);
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);

========
========
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
area.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
area.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
clip.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
clip.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
clip.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
shape3.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);

========
========
shape3.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape3.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
area.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
area.lineTo(l-t,-l-t);
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
result.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.lineTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(l-t,-l-t);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(SQRT2-t,SQRT2+SQRT2);
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(-l,0.0);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-l,0.0);
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
left.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
left.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
right.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
right.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
bar3dRight.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);

========
========
bar3dRight.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bar3dRight.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);

========
========
bar3dTop.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);

========
========
bar3dTop.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bar3dTop.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);

========
========
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
pointer.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
pointer.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
pointer.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
pointer.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.lineTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
pointer.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);

========
========
seriesPath.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
SQRT2=t;
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
SQRT2=SQRT2;
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
if(t<t){
y=minY;
}
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
left.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.clone();
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
upperCoordinates.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
upperCoordinates.lineTo(t*SQRT2,0.0);

========
========
upperCoordinates.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
upperCoordinates.lineTo(t*SQRT2,0.0);

========
========
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
shape1.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
shape1.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape1.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
shape1.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.lineTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape1.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);

========
========
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
path.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
path.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
path.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
path.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.lineTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
path.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);

========
========
gp.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);
gp.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);
gp.lineTo(t*SQRT2,0.0);

========
========
gp.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
gp.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
gp.lineTo(t*SQRT2,0.0);

========
========
seriesPath.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
bottom.lineTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
bottom.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
bottom.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
bottom.moveTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
bottom.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
bottom.moveTo(l-t,-l-t);
bottom.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);

========
========
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
top.lineTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
top.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
top.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
top.moveTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
top.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
top.moveTo(l-t,-l-t);
top.lineTo(l+t,-l+t);
top.lineTo(t*SQRT2,0.0);

========
========
lowerCoordinates.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
shape2.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
shape2.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
shape2.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
shape2.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.lineTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
shape2.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);

========
========
l_path.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.max(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.lineTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
left.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.lineTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
right.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.lineTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
clip.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);

========
========
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
leftWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
leftWall.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
leftWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
leftWall.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.lineTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
leftWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
bottomWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
bottomWall.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.lineTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
bottomWall.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
p0.lineTo(t,t);
p0.moveTo(l-t,-l-t);
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);

========
========
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
arrow.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
arrow.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
arrow.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
arrow.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.lineTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
arrow.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
p0.closePath();
p0.moveTo(l-t,-l-t);
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);

========
========
back.lineTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
back.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
back.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
back.moveTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
back.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
back.moveTo(l-t,-l-t);
back.lineTo(l+t,-l+t);
back.lineTo(t*SQRT2,0.0);

========
========
front.lineTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
front.lineTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
front.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
front.moveTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);

========
========
front.moveTo(l-t,-l-t);
p0.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
p0.moveTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
========
front.moveTo(l-t,-l-t);
front.lineTo(l+t,-l+t);
front.lineTo(t*SQRT2,0.0);

========
org.jfree.chart.util.ShapeUtilities,406
========
p0.lineTo(-t,-l);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,-l);
p0.lineTo(-t,-t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,l+t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(0.0,t*SQRT2);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(l-t,l+t);
p0.lineTo(0.0,t*SQRT2);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
p0.lineTo(t,t);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(t,t);
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
barOutline.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);
barOutline.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);
barOutline.lineTo(l+t,l-t);

========
========
barOutline.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
barOutline.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
barOutline.lineTo(l+t,l-t);

========
========
clip.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p.lineTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p.moveTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
p.moveTo(l+t,-l+t);
p.lineTo(t*SQRT2,0.0);
p.lineTo(l+t,l-t);

========
========
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
area.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(t,t);
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(t,t);
area.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
clip.lineTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
clip.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
clip.moveTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
clip.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
clip.moveTo(l+t,-l+t);
clip.lineTo(t*SQRT2,0.0);
clip.lineTo(l+t,l-t);

========
========
shape3.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);
shape3.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);
shape3.lineTo(l+t,l-t);

========
========
shape3.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape3.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape3.lineTo(l+t,l-t);

========
========
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.closePath();
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.closePath();
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
area.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
p0.closePath();
area.lineTo(l+t,-l+t);
area.lineTo(t*SQRT2,0.0);
area.lineTo(l+t,l-t);

========
========
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t,SQRT2+l);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+l);
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+l);
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t,SQRT2+l);
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
result.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
result.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
result.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
result.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
result.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.lineTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.moveTo(l+t,-l+t);
result.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(SQRT2-t/2.0,SQRT2);
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
result.lineTo(l+t,l-t);

========
========
p0.lineTo(-t,0.0);
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,0.0);
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,0.0);
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.lineTo(-t,0.0);
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
left.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
left.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
right.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
right.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
right.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
right.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
leftWall.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);
leftWall.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);
leftWall.lineTo(l+t,l-t);

========
========
leftWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
leftWall.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
leftWall.lineTo(l+t,l-t);

========
========
bottomWall.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);
bottomWall.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);
bottomWall.lineTo(l+t,l-t);

========
========
bottomWall.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bottomWall.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
bottomWall.lineTo(l+t,l-t);

========
========
bar3dRight.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);
bar3dRight.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);
bar3dRight.lineTo(l+t,l-t);

========
========
bar3dRight.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bar3dRight.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
bar3dRight.lineTo(l+t,l-t);

========
========
bar3dTop.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);
bar3dTop.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);
bar3dTop.lineTo(l+t,l-t);

========
========
bar3dTop.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bar3dTop.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
bar3dTop.lineTo(l+t,l-t);

========
========
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);
path.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);
path.lineTo(l+t,l-t);

========
========
path.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
path.lineTo(l+t,l-t);

========
========
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
pointer.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
pointer.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
pointer.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
pointer.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.lineTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
pointer.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
pointer.lineTo(t*SQRT2,0.0);
pointer.lineTo(l+t,l-t);

========
========
seriesPath.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
SQRT2=t;
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
SQRT2=SQRT2;
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
if(t<t){
y=minY;
}
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
left.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.closePath();
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
right.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
right.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
right.lineTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
right.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
right.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
right.lineTo(t*SQRT2,0.0);
right.lineTo(l+t,l-t);

========
========
p0.clone();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
TESTING : org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths
========
p0.clone();
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
left.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
p0.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
left.lineTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
left.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.clone();
left.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
p0.clone();
p0.moveTo(l+t,-l+t);
left.lineTo(t*SQRT2,0.0);
left.lineTo(l+t,l-t);

========
========
upperCoordinates.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
upperCoordinates.lineTo(l+t,l-t);

========
========
upperCoordinates.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
upperCoordinates.lineTo(l+t,l-t);

========
========
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
shape1.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
shape1.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
shape1.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
shape1.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.lineTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.closePath();
shape1.moveTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
p0.closePath();
p0.moveTo(l+t,-l+t);
shape1.lineTo(t*SQRT2,0.0);
shape1.lineTo(l+t,l-t);

========
========
shape2.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);
shape2.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);
shape2.lineTo(l+t,l-t);

========
========
shape2.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
shape2.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
shape2.lineTo(l+t,l-t);

========
========
arrow.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);
arrow.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);
arrow.lineTo(l+t,l-t);

========
========
arrow.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
arrow.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
arrow.lineTo(l+t,l-t);

========
========
bottom.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);
bottom.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);
bottom.lineTo(l+t,l-t);

========
========
bottom.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
bottom.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
========
p0.lineTo(l+t,-l+t);
p0.lineTo(t*SQRT2,0.0);
bottom.lineTo(l+t,l-t);

========
========
path.lineTo(l+t,-l+t);
path.lineTo(t*SQRT2,0.0);
p0.lineTo(l+t,l-t);

========
Timeout!

real	301m58.083s
user	210m2.092s
sys	63m8.124s
